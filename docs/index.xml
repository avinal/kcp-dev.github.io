<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>kcp – a Kubernetes-like multi-tenant control plane – Welcome to kcp Documentation</title><link>http://kcp-dev.github.io/docs/</link><description>Recent content in Welcome to kcp Documentation on kcp – a Kubernetes-like multi-tenant control plane</description><generator>Hugo -- gohugo.io</generator><atom:link href="http://kcp-dev.github.io/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Authorization</title><link>http://kcp-dev.github.io/docs/kcp-core/concepts/authorization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kcp-dev.github.io/docs/kcp-core/concepts/authorization/</guid><description>
&lt;p>Within workspaces, KCP implements the same RBAC-based authorization mechanism as Kubernetes.
Other authorization schemes (i.e. ABAC) are not supported.
Generally, the same (cluster) role and (cluster) role binding principles apply exactly as in Kubernetes.&lt;/p>
&lt;p>In addition, additional RBAC semantics is implemented cross-workspaces, namely the following:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Top-Level Organization&lt;/strong> access: the user must have this as pre-requisite to access any other workspace, or is
even member and by that can create workspaces inside the organization workspace.&lt;/li>
&lt;li>&lt;strong>Workspace Content&lt;/strong> access: the user needs access to a workspace or is even admin.&lt;/li>
&lt;li>for some resources, additional permission checks are performed, not represented by local or Kubernetes standard RBAC rules. E.g.
&lt;ul>
&lt;li>workspace creation checks for organization membership (see above).&lt;/li>
&lt;li>workspace creation checks for &lt;code>use&lt;/code> verb on the &lt;code>ClusterWorkspaceType&lt;/code>.&lt;/li>
&lt;li>API binding via APIBinding objects requires verb &lt;code>bind&lt;/code> access to the corresponding &lt;code>APIExport&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>System Workspaces&lt;/strong> access: system workspaces are prefixed with &lt;code>system:&lt;/code> and are not accessible by users.&lt;/li>
&lt;/ul>
&lt;p>The details are outlined below.&lt;/p>
&lt;h2 id="authorizers">Authorizers&lt;/h2>
&lt;p>The following authorizers are configured in kcp:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Authorizer&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Top-Level organization authorizer&lt;/td>
&lt;td>checks that the user is allowed to access the organization&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Workspace content authorizer&lt;/td>
&lt;td>determines additional groups a user gets inside of a workspace&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>API binding authorizer&lt;/td>
&lt;td>validates the RBAC policy in the api exporters workspace&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Local Policy authorizer&lt;/td>
&lt;td>validates the RBAC policy in the workspace that is accessed&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Kubernetes Bootstrap Policy authorizer&lt;/td>
&lt;td>validates the RBAC Kubernetes standard policy&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>They are related in the following way:&lt;/p>
&lt;ol>
&lt;li>top-level organization authorizer must allow&lt;/li>
&lt;li>workspace content authorizer must allow, and adds additional (virtual per-request) groups to the request user influencing the follow authorizers.&lt;/li>
&lt;li>api binding authorizer must allow&lt;/li>
&lt;li>one of the local authorizer or bootstrap policy authorizer must allow.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span> ┌──────────────┐
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ┌─────────────────┐ ┌───────────────┐ ┌─────────────┐ ┌────►│ Local Policy ├──┐
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ Top-level │ │ │ │ │ │ │ authorizer │ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> request │ Organization │ │ Workspace ┌───┴───┐ │ API Binding │ │ │ │ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>──────────►│ authorizer ├────►│ Content │+groups├───►│ authorizer ├───┤ └──────────────┘ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │ │ authorizer└───┬───┘ │ │ │ ▼
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │ │ │ └─────────────┘ │ OR───►
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └─────────────────┘ └───────────────┘ │ ┌──────────────┐ ▲
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │ Bootstrap │ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └────►│ Policy ├──┘
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ authorizer │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └──────────────┘
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="">ASCIIFlow document&lt;/a>&lt;/p>
&lt;h3 id="top-level-organization-authorizer">Top-Level Organization authorizer&lt;/h3>
&lt;p>A top-level organization is a workspace directly under root. When a user accesses a top-level organization or
a sub-workspace like &lt;code>root:org:ws:ws&lt;/code>, this authorizer will check in &lt;code>root&lt;/code> whether the user has permission
to the top-level org workspace represented by the &lt;code>ClusterWorkspace&lt;/code> named &lt;code>org&lt;/code> in &lt;code>root&lt;/code> with the following verbs:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Verb&lt;/th>
&lt;th>Resource&lt;/th>
&lt;th>Semantics&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>access&lt;/code>&lt;/td>
&lt;td>&lt;code>clusterworkspace/content&lt;/code>&lt;/td>
&lt;td>the user can access the organization &lt;code>root:org&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>E.g. the user is bound via a &lt;code>ClusterRoleBinding&lt;/code> in &lt;code>root&lt;/code> to a &lt;code>ClusterRole&lt;/code> of the following shape:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">rbac.authorization.k8s.io/v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">ClusterRole&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">clusterName&lt;/span>: &lt;span style="color:#ae81ff">root&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">rules&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">apiGroups&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">tenancy.kcp.dev&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">resources&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">workspaces/content&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">resourceNames&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">org&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">verbs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">access&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="workspace-content-authorizer">Workspace Content authorizer&lt;/h3>
&lt;p>The workspace content authorizer checks whether the user is granted &lt;code>admin&lt;/code> or &lt;code>access&lt;/code> verbs in
the parent workspace against the &lt;code>workspaces/content&lt;/code> resource with the &lt;code>resourceNames&lt;/code> of
the workspace being accessed.&lt;/p>
&lt;p>If any of the verbs is granted, the associated group is added to the user&amp;rsquo;s attributes
and will be evaluated in the subsequent authorizer chain.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Verb&lt;/th>
&lt;th>Groups&lt;/th>
&lt;th>Bootstrap cluster rolebinding&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>admin&lt;/code>&lt;/td>
&lt;td>&lt;code>system:kcp:workspace:admin&lt;/code> and &lt;code>system:kcp:workspace:access&lt;/code>&lt;/td>
&lt;td>&lt;code>system:kcp:clusterworkspace:admin&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>access&lt;/code>&lt;/td>
&lt;td>&lt;code>system:kcp:workspace:access&lt;/code>&lt;/td>
&lt;td>N/A&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>kcp&amp;rsquo;s bootstrap policy provides default bindings:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">rbac.authorization.k8s.io/v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">ClusterRoleBinding&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">clusterName&lt;/span>: &lt;span style="color:#ae81ff">system:kcp:clusterworkspace:admin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">subjects&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Group&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">system:kcp:clusterworkspace:admin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">roleRef&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">apiGroup&lt;/span>: &lt;span style="color:#ae81ff">rbac.authorization.k8s.io&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">ClusterRole&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">cluster-admin&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The access verb will not grant any cluster role but only associates with the &lt;code>system:kcp:clusterworkspace:access&lt;/code> group
and executes the subsequent authorizer chain.&lt;/p>
&lt;p>Example:&lt;/p>
&lt;p>Given the user accesses &lt;code>root:org:ws:ws&lt;/code>, the verbs &lt;code>admin&lt;/code> and &lt;code>access&lt;/code> are asserted
against the &lt;code>workspaces/content&lt;/code> resource for the &lt;code>resourceNames: [&amp;quot;ws&amp;quot;]&lt;/code> in the workspace &lt;code>root:org:ws&lt;/code>.&lt;/p>
&lt;p>To give a user called &amp;ldquo;adam&amp;rdquo; admin access to a workspace &lt;code>root:org:ws:ws&lt;/code>, beyond having org access using the previous top-level organization authorizer,
a &lt;code>ClusterRole&lt;/code> must be created in &lt;code>root:org:ws&lt;/code> with the following shape:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">rbac.authorization.k8s.io/v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">ClusterRole&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">workspace-admin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">clusterName&lt;/span>: &lt;span style="color:#ae81ff">root:org:ws&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">rules&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">apiGroups&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">tenancy.kcp.dev&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">resources&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">workspaces/content&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">resourceNames&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">ws&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">verbs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">admin&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>and the user must be bound to it via a &lt;code>ClusterRoleBinding&lt;/code> in &lt;code>root:org:ws&lt;/code> like the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">rbac.authorization.k8s.io/v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">ClusterRoleBinding&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">adam-admin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">clusterName&lt;/span>: &lt;span style="color:#ae81ff">root:org:ws&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">subjects&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">User&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">adam&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">roleRef&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">apiGroup&lt;/span>: &lt;span style="color:#ae81ff">rbac.authorization.k8s.io&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">ClusterRole&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">workspace-admin&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="initializing-workspaces">Initializing Workspaces&lt;/h4>
&lt;p>By default, workspaces are only accessible to a user if they are in &lt;code>Ready&lt;/code> phase. Workspaces that are initializing
can be access only by users that are granted &lt;code>admin&lt;/code> verb on the &lt;code>workspaces/content&lt;/code> resource in the
parent workspace.&lt;/p>
&lt;p>Service accounts declared within a workspace don&amp;rsquo;t have access to initializing workspaces.&lt;/p>
&lt;h3 id="api-binding-authorizer">API binding authorizer&lt;/h3>
&lt;p>If the requested resource type is part of an API binding, then the API binding authorizer verifies that
the request is not exceeding the maximum permission policy of the related API export.
Currently, the &amp;ldquo;local policy&amp;rdquo; maximum permission policy type is supported.&lt;/p>
&lt;h4 id="local-policy">Local policy&lt;/h4>
&lt;p>The local maximum permission policy delegates the decision to the RBAC of the related API export.
To distinguish between local RBAC role bindings in that workspace and those for this these maximum permission policy,
every name and group is prefixed with &lt;code>apis.kcp.dev:binding:&lt;/code>.&lt;/p>
&lt;p>Example:&lt;/p>
&lt;p>Given an API binding for type &lt;code>foo&lt;/code> declared in workspace &lt;code>consumer&lt;/code> that refers to an API export declared in workspace &lt;code>provider&lt;/code>
and a user &lt;code>user-1&lt;/code> having the group &lt;code>group-1&lt;/code> requesting a &lt;code>create&lt;/code> of &lt;code>foo&lt;/code> in the &lt;code>default&lt;/code> namespace in the &lt;code>consumer&lt;/code> workspace,
the API binding authorizer verifies that &lt;code>user-1&lt;/code> is allowed to execute this request by delegating to &lt;code>provider&lt;/code>&amp;rsquo;s RBAC using prefixed attributes.&lt;/p>
&lt;p>Here, the API binding authorizer prepends the &lt;code>apis.kcp.dev:binding:&lt;/code> prefix to the username and all groups the user belongs to.
Using prefixed attributes prevents RBAC collisions i.e. if &lt;code>user-1&lt;/code> is granted to execute requests within the &lt;code>provider&lt;/code> workspace directly.&lt;/p>
&lt;p>For the given example RBAC request looks as follows:&lt;/p>
&lt;ul>
&lt;li>Username: &lt;code>apis.kcp.dev:binding:user-1&lt;/code>&lt;/li>
&lt;li>Group: &lt;code>apis.kcp.dev:binding:group-1&lt;/code>&lt;/li>
&lt;li>Resource: &lt;code>foo&lt;/code>&lt;/li>
&lt;li>Namespace: &lt;code>default&lt;/code>&lt;/li>
&lt;li>Workspace: &lt;code>provider&lt;/code>&lt;/li>
&lt;li>Verb: &lt;code>create&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>The following role and role binding declared within the &lt;code>provider&lt;/code> workspace will grant access to the request:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">rbac.authorization.k8s.io/v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Role&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">foo-creator&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">clusterName&lt;/span>: &lt;span style="color:#ae81ff">provider&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">rules&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">apiGroups&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">foo.api&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">resources&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">foos&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">verbs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">create&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">rbac.authorization.k8s.io/v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">RoleBinding&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">user-1-foo-creator&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">default&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">clusterName&lt;/span>: &lt;span style="color:#ae81ff">provider&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">subjects&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">User&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">apis.kcp.dev:binding:user-1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">roleRef&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">apiGroup&lt;/span>: &lt;span style="color:#ae81ff">rbac.authorization.k8s.io&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Role&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">foo-creator&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
The same authorization scheme is enforced when executing the request of a claimed resource via the virtual API Export API server,
i.e. a claimed resource is bound to the same maximal permission policy. Only the actual owner of that resources can go beyond that policy.
&lt;/div>
&lt;p>TBD: Example&lt;/p>
&lt;h3 id="kubernetes-bootstrap-policy-authorizer">Kubernetes Bootstrap Policy authorizer&lt;/h3>
&lt;p>The bootstrap policy authorizer works just like the local authorizer but references RBAC rules
defined in the &lt;code>system:admin&lt;/code> system workspace.&lt;/p>
&lt;h3 id="local-policy-authorizer">Local Policy authorizer&lt;/h3>
&lt;p>Once the top-level organization authorizer and the workspace content authorizer granted access to a
workspace, RBAC rules contained in the workspace derived from the request context are evaluated.&lt;/p>
&lt;p>This authorizer ensures that RBAC rules contained within a workspace are being applied
and work just like in a regular Kubernetes cluster.&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
Groups added by the workspace content authorizer can be used for role bindings in that workspace.
&lt;/div>
&lt;p>It is possible to bind to roles and cluster roles in the bootstrap policy from a local policy &lt;code>RoleBinding&lt;/code> or &lt;code>ClusterRoleBinding&lt;/code>.&lt;/p>
&lt;h3 id="service-accounts">Service Accounts&lt;/h3>
&lt;p>Kubernetes service accounts are granted access to the workspaces they are defined in and that are ready.&lt;/p>
&lt;p>E.g. a service account &amp;ldquo;default&amp;rdquo; in &lt;code>root:org:ws:ws&lt;/code> is granted access to &lt;code>root:org:ws:ws&lt;/code>, and through the
workspace content authorizer it gains the &lt;code>system:kcp:clusterworkspace:access&lt;/code> group membership.&lt;/p></description></item><item><title>Docs: Cache Server</title><link>http://kcp-dev.github.io/docs/kcp-core/concepts/cache-server/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kcp-dev.github.io/docs/kcp-core/concepts/cache-server/</guid><description>
&lt;h3 id="purpose">Purpose&lt;/h3>
&lt;p>The primary purpose of the cache server is to support cross-shard communication.
Shards need to communicate with each other in order to enable, among other things, migration and replication features.
Direct shard-to-shard communication is not feasible in a larger setup as it scales with n*(n-1).
The web of connections would be hard to reason about, maintain and troubleshoot.
Thus, the cache server serves as a central place for shards to store and read common data.
Note, that the final topology can have more than one cache server, i.e. one in some geographic region.&lt;/p>
&lt;h3 id="high-level-overview">High-level overview&lt;/h3>
&lt;p>The cache server is a regular, Kubernetes-style CRUD API server with support of LIST/WATCH semantics.
Conceptually it supports two modes of operations.
The first mode is in which a shard gets its private space for storing its own data.
The second mode is in which a shard can read other shards&amp;rsquo; data.&lt;/p>
&lt;p>The first mode of operation is implemented as a write controller that runs on a shard.
It holds some state/data from that shard in memory and pushes it to the cache server.
The controller uses standard informers for getting required resources both from a local kcp instance and remote cache server.
Before pushing data it has to compare remote data to its local copy and make sure both copies are consistent.&lt;/p>
&lt;p>The second mode of operation is implemented as a read controller(s) that runs on some shard.
It holds other shards&amp;rsquo; data in an in-memory cache using an informer,
effectively pulling data from the central cache.
Thanks to having a separate informer for interacting with the cache server
a shard can implement a different resiliency strategy.
For example, it can tolerate the unavailability of the secondary during startup and become ready.&lt;/p>
&lt;h3 id="running-the-server">Running the server&lt;/h3>
&lt;p>The cache server can be run as a standalone binary or as part of a kcp server.&lt;/p>
&lt;p>The standalone binary is in &lt;a href="">https://github.com/kcp-dev/kcp/tree/main/cmd/cache-server&lt;/a> and can be run by issuing &lt;code>go run ./cmd/cache-server/main.go&lt;/code> command.&lt;/p>
&lt;p>To run it as part of a kcp server, pass &lt;code>--cache-url&lt;/code> flag to the kcp binary.&lt;/p>
&lt;h3 id="client-side-functionality">Client-side functionality&lt;/h3>
&lt;p>In order to interact with the cache server from a shard, the &lt;a href="">https://github.com/kcp-dev/kcp/tree/main/pkg/cache/client&lt;/a>
repository provides the following client-side functionality:&lt;/p>
&lt;p>&lt;a href="">ShardRoundTripper&lt;/a>,
a shard aware wrapper around &lt;code>http.RoundTripper&lt;/code>. It changes the URL path to target a shard from the context.&lt;/p>
&lt;p>&lt;a href="">DefaultShardRoundTripper&lt;/a>
is a &lt;code>http.RoundTripper&lt;/code> that sets a default shard name if not specified in the context.&lt;/p>
&lt;p>For example, in order to make a client shard aware, inject the &lt;code>http.RoundTrippers&lt;/code> to a &lt;code>rest.Config&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">cacheclient&lt;/span> &lt;span style="color:#e6db74">&amp;#34;github.com/kcp-dev/kcp/pkg/cache/client&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;github.com/kcp-dev/kcp/pkg/cache/client/shard&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// adds shards awareness to a client with a default `shard.Wildcard` name.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">NewClusterForConfig&lt;/span>(&lt;span style="color:#a6e22e">cacheclient&lt;/span>.&lt;span style="color:#a6e22e">WithShardRoundTripper&lt;/span>(&lt;span style="color:#a6e22e">cacheclient&lt;/span>.&lt;span style="color:#a6e22e">WithDefaultShardRoundTripper&lt;/span>(&lt;span style="color:#a6e22e">serverConfig&lt;/span>.&lt;span style="color:#a6e22e">LoopbackClientConfig&lt;/span>, &lt;span style="color:#a6e22e">shard&lt;/span>.&lt;span style="color:#a6e22e">Wildcard&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// and then change the context when you need to access a specific shard and pass is when making a HTTP request
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">ctx&lt;/span> = &lt;span style="color:#a6e22e">cacheclient&lt;/span>.&lt;span style="color:#a6e22e">WithShardInContext&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">shard&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;cache&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="authorizationauthentication">Authorization/Authentication&lt;/h3>
&lt;p>Not implemented at the moment&lt;/p>
&lt;h3 id="built-in-resources">Built-in resources&lt;/h3>
&lt;p>Out of the box, the server supports the following resources:&lt;/p>
&lt;ul>
&lt;li>&lt;code>apiresourceschemas&lt;/code>&lt;/li>
&lt;li>&lt;code>apiexports&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>All those resources are represented as CustomResourceDefinitions and
stored in &lt;code>system:cache:server&lt;/code> shard under &lt;code>system:system-crds&lt;/code> cluster.&lt;/p>
&lt;h3 id="adding-new-resources">Adding new resources&lt;/h3>
&lt;p>Not implemented at the moment.
Our near-term plan is to maintain a list of hard-coded resources that we want to keep in the cache server.
In the future, we will use the ReplicationClam which will describe schemas that need to be exposed by the cache server.&lt;/p>
&lt;h3 id="deletion-of-data">Deletion of data&lt;/h3>
&lt;p>Not implemented at the moment.
Only deleting resources explicitly is possible.
In the future, some form of automatic removal will be implemented.&lt;/p>
&lt;h3 id="design-details">Design details&lt;/h3>
&lt;p>The cache server is implemented as the &lt;code>apiextensions-apiserver&lt;/code>.
It is based on the same fork used by the kcp server, extended with shard support.&lt;/p>
&lt;p>Since the server serves as a secondary replica it doesn&amp;rsquo;t support versioning, validation, pruning, or admission.
All resources persisted by the server are deprived of schema.
That means the schema is implicit, maintained, and enforced by the shards pushing/pulling data into/from the server.&lt;/p>
&lt;h4 id="on-the-http-level">On the HTTP level&lt;/h4>
&lt;p>The server exposes the following path:&lt;/p>
&lt;p>&lt;code>/services/cache/shards/{shard-name}/clusters/{cluster-name}/apis/group/version/namespaces/{namespace-name}/resource/{resource-name}&lt;/code>&lt;/p>
&lt;p>Parameters:&lt;/p>
&lt;p>&lt;code>{shard-name}&lt;/code>: a required string holding a shard name, a wildcard is also supported indicating a cross-shard request&lt;/p>
&lt;p>&lt;code>{cluster-name}&lt;/code>: a required string holding a cluster name, a wildcard is also supported indicating a cross-cluster request.&lt;/p>
&lt;p>&lt;code>{namespace-name}&lt;/code>: an optional string holding a namespace the given request is for, not all resources are stored under a namespace.&lt;/p>
&lt;p>&lt;code>{resource-name}&lt;/code>: an optional string holding the name of a resource&lt;/p>
&lt;p>For example:&lt;/p>
&lt;p>&lt;code>/services/cache/shards/*/clusters/*/apis/apis.kcp.dev/v1alpha1/apiexports&lt;/code>: for listing apiexports for all shards and clusters&lt;/p>
&lt;p>&lt;code>/services/cache/shards/amber/clusters/*/apis/apis.kcp.dev/v1alpha1/apiexports&lt;/code>: for listing apiexports for amber shard for all clusters&lt;/p>
&lt;p>&lt;code>/services/cache/shards/sapphire/clusters/system:sapphire/apis/apis.kcp.dev/v1alpha1/apiexports&lt;/code>: for listing apiexports for sapphire shard stored in system:sapphire cluster&lt;/p>
&lt;h4 id="on-the-storage-layer">On the storage layer&lt;/h4>
&lt;p>All resources stored by the cache server are prefixed with &lt;code>/cache&lt;/code>.
Thanks to that the server can share the same database with the kcp server.&lt;/p>
&lt;p>Ultimately a shard aware resources end up being stored under the following key:&lt;/p>
&lt;p>&lt;code>/cache/group/resource/{shard-name}/{cluster-name}/{namespace-name}/{resource-name}&lt;/code>&lt;/p>
&lt;p>For more information about inner working of the storage layer,
please visit: TODO: add a link that explains the mapping of a URL to a storage prefix.&lt;/p></description></item><item><title>Docs: Cluster Mapper</title><link>http://kcp-dev.github.io/docs/kcp-core/concepts/cluster-mapper/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kcp-dev.github.io/docs/kcp-core/concepts/cluster-mapper/</guid><description>
&lt;h2 id="invariants">Invariants&lt;/h2>
&lt;ol>
&lt;li>Every object assigned by a location exists on the target location&lt;/li>
&lt;li>Every object in the target location has appropriate metadata set indicating source&lt;/li>
&lt;li>Every object in the target location that has status and the appropriate policy choice set will reflect that status back in the source object&lt;/li>
&lt;li>No object exists in the target location that is not assigned by a source object(s)&lt;/li>
&lt;/ol>
&lt;p>&lt;code>1..N&lt;/code> mappers per location (sharding by virtual cluster?)
mappers see only the objects assigned to them (special API)&lt;/p>
&lt;ul>
&lt;li>can load policy info during mapping?&lt;/li>
&lt;li>can load policy info from side channels like regular resources
wants to watch many different resources at once and deal with them as unstructured&lt;/li>
&lt;/ul>
&lt;p>assumption: all resources in the location are compatible with the target API (managed by control plane and CRD folding), and if that is broken the mapper is instructed to halt mapping&lt;/p>
&lt;ul>
&lt;li>how to deal with partial mapping when one object is broken&lt;/li>
&lt;li>how does CRD folding actually work (separate doc)&lt;/li>
&lt;/ul>
&lt;p>assumption: higher level control (admission) manages location accessibility&lt;/p>
&lt;p>assumption: kcp has 1k virtual clusters with 50k resources, a given mapper may see 1k to 50k resources&lt;/p>
&lt;ul>
&lt;li>fully syncing will take &lt;code>50k / default throttle&lt;/code> (50-100 req/s) ~ 1000s in serial&lt;/li>
&lt;li>order may be important&lt;/li>
&lt;li>there may be 100-1k locations, so we may have up to 1/1000 cardinality (implies indexing)&lt;/li>
&lt;li>mappers that favor summarization objects (deployments) have scale advantages over those that don&amp;rsquo;t (pods)&lt;/li>
&lt;/ul>
&lt;p>Assumption: we prefer not to require order to correctly map, but some order is implicit due to resource version ordering&lt;/p>
&lt;h2 id="basic-sync-loop">Basic sync loop&lt;/h2>
&lt;ol>
&lt;li>retrieve all objects assigned to a particular cluster (metadata.annotations[&amp;ldquo;kcp.io/assigned-locations&amp;rdquo;] = [&amp;ldquo;a&amp;rdquo;,&amp;ldquo;b&amp;rdquo;])&lt;/li>
&lt;li>transform them into one or more objects for the destination
&lt;ul>
&lt;li>add labels?&lt;/li>
&lt;li>map namespace from source to target&lt;/li>
&lt;li>hide certain annotations (assigned-locations?)&lt;/li>
&lt;li>set and maintain other annotations (like the source namespace / virtual cluster)&lt;/li>
&lt;li>set a controller ref?&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>perform a merge into the destination object (overwrite of spec)&lt;/li>
&lt;li>sync some fields (status?) back to source object&lt;/li>
&lt;li>delete all objects no longer assigned to the remote location
&lt;ul>
&lt;li>read all mappable objects from all mappable resources?
&lt;ul>
&lt;li>use &lt;code>kcp.dev/location=X&lt;/code> label to filter&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>detect when an object policy on mapping is changed?&lt;/li>
&lt;li>only need the partial object (metadata)&lt;/li>
&lt;li>can we leverage the garbage collector to delete the object?&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol></description></item><item><title>Docs: kcp</title><link>http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp/</guid><description>
&lt;h3 id="synopsis">Synopsis&lt;/h3>
&lt;p>KCP is the easiest way to manage Kubernetes applications against one or more clusters, by giving you a personal control plane that schedules your workloads onto one or many clusters, and making it simple to pick up and move. Advanced use cases including spreading your apps across clusters for resiliency, scheduling batch workloads onto clusters with free capacity, and enabling collaboration for individual teams without having access to the underlying clusters.&lt;/p>
&lt;p>This command provides KCP specific sub-command for kubectl.&lt;/p>
&lt;h3 id="options">Options&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-v" data-lang="v">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>add_dir_header &lt;span style="color:#a6e22e">If&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, adds the file directory to the header of the log messages
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>alsologtostderr log to standard &lt;span style="color:#66d9ef">error&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span> well &lt;span style="color:#66d9ef">as&lt;/span> files
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&lt;/span>h, &lt;span style="color:#f92672">--&lt;/span>help help &lt;span style="color:#66d9ef">for&lt;/span> kcp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>log_backtrace_at traceLocation when logging hits line file:&lt;span style="color:#a6e22e">N&lt;/span>, emit a stack trace (default :&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>log_dir string &lt;span style="color:#a6e22e">If&lt;/span> non&lt;span style="color:#f92672">-&lt;/span>empty, write log files &lt;span style="color:#66d9ef">in&lt;/span> this directory
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>log_file string &lt;span style="color:#a6e22e">If&lt;/span> non&lt;span style="color:#f92672">-&lt;/span>empty, use this log file
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>log_file_max_size uint &lt;span style="color:#a6e22e">Defines&lt;/span> the maximum size a log file can grow to. &lt;span style="color:#a6e22e">Unit&lt;/span> &lt;span style="color:#66d9ef">is&lt;/span> megabytes. &lt;span style="color:#a6e22e">If&lt;/span> the value &lt;span style="color:#66d9ef">is&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>, the maximum file size &lt;span style="color:#66d9ef">is&lt;/span> unlimited. (default &lt;span style="color:#ae81ff">1800&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>logtostderr log to standard &lt;span style="color:#66d9ef">error&lt;/span> instead of files (default &lt;span style="color:#66d9ef">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>one_output &lt;span style="color:#a6e22e">If&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, only write logs to their native severity level (vs also writing to each lower severity level)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>skip_headers &lt;span style="color:#a6e22e">If&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, avoid header prefixes &lt;span style="color:#66d9ef">in&lt;/span> the log messages
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>skip_log_headers &lt;span style="color:#a6e22e">If&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, avoid headers when opening log files
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>stderrthreshold severity logs at &lt;span style="color:#66d9ef">or&lt;/span> above this threshold &lt;span style="color:#66d9ef">go&lt;/span> to stderr (default &lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&lt;/span>v, &lt;span style="color:#f92672">--&lt;/span>v &lt;span style="color:#a6e22e">Level&lt;/span> number &lt;span style="color:#66d9ef">for&lt;/span> the log level verbosity
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>vmodule moduleSpec comma&lt;span style="color:#f92672">-&lt;/span>separated list of pattern&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">N&lt;/span> settings &lt;span style="color:#66d9ef">for&lt;/span> file&lt;span style="color:#f92672">-&lt;/span>filtered logging
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="see-also">SEE ALSO&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_crd/">kcp crd&lt;/a> - CRD related operations&lt;/li>
&lt;li>&lt;a href="http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_workload/">kcp workload&lt;/a> - Manages KCP sync targets&lt;/li>
&lt;li>&lt;a href="http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_workspace/">kcp workspace&lt;/a> - Manages KCP workspaces&lt;/li>
&lt;/ul></description></item><item><title>Docs: kcp crd</title><link>http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_crd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_crd/</guid><description>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>kcp crd [flags]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="options">Options&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span> -h, --help help for crd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="options-inherited-from-parent-commands">Options inherited from parent commands&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-v" data-lang="v">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>add_dir_header &lt;span style="color:#a6e22e">If&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, adds the file directory to the header of the log messages
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>alsologtostderr log to standard &lt;span style="color:#66d9ef">error&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span> well &lt;span style="color:#66d9ef">as&lt;/span> files
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>log_backtrace_at traceLocation when logging hits line file:&lt;span style="color:#a6e22e">N&lt;/span>, emit a stack trace (default :&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>log_dir string &lt;span style="color:#a6e22e">If&lt;/span> non&lt;span style="color:#f92672">-&lt;/span>empty, write log files &lt;span style="color:#66d9ef">in&lt;/span> this directory
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>log_file string &lt;span style="color:#a6e22e">If&lt;/span> non&lt;span style="color:#f92672">-&lt;/span>empty, use this log file
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>log_file_max_size uint &lt;span style="color:#a6e22e">Defines&lt;/span> the maximum size a log file can grow to. &lt;span style="color:#a6e22e">Unit&lt;/span> &lt;span style="color:#66d9ef">is&lt;/span> megabytes. &lt;span style="color:#a6e22e">If&lt;/span> the value &lt;span style="color:#66d9ef">is&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>, the maximum file size &lt;span style="color:#66d9ef">is&lt;/span> unlimited. (default &lt;span style="color:#ae81ff">1800&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>logtostderr log to standard &lt;span style="color:#66d9ef">error&lt;/span> instead of files (default &lt;span style="color:#66d9ef">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>one_output &lt;span style="color:#a6e22e">If&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, only write logs to their native severity level (vs also writing to each lower severity level)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>skip_headers &lt;span style="color:#a6e22e">If&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, avoid header prefixes &lt;span style="color:#66d9ef">in&lt;/span> the log messages
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>skip_log_headers &lt;span style="color:#a6e22e">If&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, avoid headers when opening log files
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>stderrthreshold severity logs at &lt;span style="color:#66d9ef">or&lt;/span> above this threshold &lt;span style="color:#66d9ef">go&lt;/span> to stderr (default &lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&lt;/span>v, &lt;span style="color:#f92672">--&lt;/span>v &lt;span style="color:#a6e22e">Level&lt;/span> number &lt;span style="color:#66d9ef">for&lt;/span> the log level verbosity
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>vmodule moduleSpec comma&lt;span style="color:#f92672">-&lt;/span>separated list of pattern&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">N&lt;/span> settings &lt;span style="color:#66d9ef">for&lt;/span> file&lt;span style="color:#f92672">-&lt;/span>filtered logging
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="see-also">SEE ALSO&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp/">kcp&lt;/a> - kubectl plugin for KCP&lt;/li>
&lt;li>&lt;a href="http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_crd_snapshot/">kcp crd snapshot&lt;/a> - Snapshot a CRD and convert it to an APIResourceSchema&lt;/li>
&lt;/ul></description></item><item><title>Docs: kcp crd snapshot</title><link>http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_crd_snapshot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_crd_snapshot/</guid><description>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>kcp crd snapshot -f FILE --prefix PREFIX [flags]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="examples">Examples&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> # Convert a CRD in a yaml file to an APIResourceSchema. For a CRD named widgets.example.io, and a prefix value of
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> # &amp;#39;today&amp;#39;, the new APIResourceSchema&amp;#39;s name will be today.widgets.example.io.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kubectl kcp crd snapshot -f crd.yaml --prefix 2022-05-07 &amp;gt; api-resource-schema.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> # Convert a CRD from STDIN
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kubectl get crd foo -o yaml | kubectl kcp crd snapshot -f - --prefix today &amp;gt; output.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="options">Options&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span> -f, --filename string Path to a file containing the CRD to convert to an APIResourceSchema, or - for stdin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -h, --help help for snapshot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -o, --output string Output format. Valid values are &amp;#39;json&amp;#39; and &amp;#39;yaml&amp;#39; (default &amp;#34;yaml&amp;#34;)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --prefix string Prefix to use for the APIResourceSchema&amp;#39;s name, before &amp;lt;resource&amp;gt;.&amp;lt;group&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="options-inherited-from-parent-commands">Options inherited from parent commands&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-v" data-lang="v">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>add_dir_header &lt;span style="color:#a6e22e">If&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, adds the file directory to the header of the log messages
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>alsologtostderr log to standard &lt;span style="color:#66d9ef">error&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span> well &lt;span style="color:#66d9ef">as&lt;/span> files
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>log_backtrace_at traceLocation when logging hits line file:&lt;span style="color:#a6e22e">N&lt;/span>, emit a stack trace (default :&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>log_dir string &lt;span style="color:#a6e22e">If&lt;/span> non&lt;span style="color:#f92672">-&lt;/span>empty, write log files &lt;span style="color:#66d9ef">in&lt;/span> this directory
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>log_file string &lt;span style="color:#a6e22e">If&lt;/span> non&lt;span style="color:#f92672">-&lt;/span>empty, use this log file
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>log_file_max_size uint &lt;span style="color:#a6e22e">Defines&lt;/span> the maximum size a log file can grow to. &lt;span style="color:#a6e22e">Unit&lt;/span> &lt;span style="color:#66d9ef">is&lt;/span> megabytes. &lt;span style="color:#a6e22e">If&lt;/span> the value &lt;span style="color:#66d9ef">is&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>, the maximum file size &lt;span style="color:#66d9ef">is&lt;/span> unlimited. (default &lt;span style="color:#ae81ff">1800&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>logtostderr log to standard &lt;span style="color:#66d9ef">error&lt;/span> instead of files (default &lt;span style="color:#66d9ef">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>one_output &lt;span style="color:#a6e22e">If&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, only write logs to their native severity level (vs also writing to each lower severity level)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>skip_headers &lt;span style="color:#a6e22e">If&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, avoid header prefixes &lt;span style="color:#66d9ef">in&lt;/span> the log messages
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>skip_log_headers &lt;span style="color:#a6e22e">If&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, avoid headers when opening log files
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>stderrthreshold severity logs at &lt;span style="color:#66d9ef">or&lt;/span> above this threshold &lt;span style="color:#66d9ef">go&lt;/span> to stderr (default &lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&lt;/span>v, &lt;span style="color:#f92672">--&lt;/span>v &lt;span style="color:#a6e22e">Level&lt;/span> number &lt;span style="color:#66d9ef">for&lt;/span> the log level verbosity
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>vmodule moduleSpec comma&lt;span style="color:#f92672">-&lt;/span>separated list of pattern&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">N&lt;/span> settings &lt;span style="color:#66d9ef">for&lt;/span> file&lt;span style="color:#f92672">-&lt;/span>filtered logging
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="see-also">SEE ALSO&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_crd/">kcp crd&lt;/a> - CRD related operations&lt;/li>
&lt;/ul></description></item><item><title>Docs: kcp workload</title><link>http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_workload/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_workload/</guid><description>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>kcp workload [flags]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="options">Options&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span> -h, --help help for workload
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="options-inherited-from-parent-commands">Options inherited from parent commands&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-v" data-lang="v">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>add_dir_header &lt;span style="color:#a6e22e">If&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, adds the file directory to the header of the log messages
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>alsologtostderr log to standard &lt;span style="color:#66d9ef">error&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span> well &lt;span style="color:#66d9ef">as&lt;/span> files
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>log_backtrace_at traceLocation when logging hits line file:&lt;span style="color:#a6e22e">N&lt;/span>, emit a stack trace (default :&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>log_dir string &lt;span style="color:#a6e22e">If&lt;/span> non&lt;span style="color:#f92672">-&lt;/span>empty, write log files &lt;span style="color:#66d9ef">in&lt;/span> this directory
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>log_file string &lt;span style="color:#a6e22e">If&lt;/span> non&lt;span style="color:#f92672">-&lt;/span>empty, use this log file
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>log_file_max_size uint &lt;span style="color:#a6e22e">Defines&lt;/span> the maximum size a log file can grow to. &lt;span style="color:#a6e22e">Unit&lt;/span> &lt;span style="color:#66d9ef">is&lt;/span> megabytes. &lt;span style="color:#a6e22e">If&lt;/span> the value &lt;span style="color:#66d9ef">is&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>, the maximum file size &lt;span style="color:#66d9ef">is&lt;/span> unlimited. (default &lt;span style="color:#ae81ff">1800&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>logtostderr log to standard &lt;span style="color:#66d9ef">error&lt;/span> instead of files (default &lt;span style="color:#66d9ef">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>one_output &lt;span style="color:#a6e22e">If&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, only write logs to their native severity level (vs also writing to each lower severity level)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>skip_headers &lt;span style="color:#a6e22e">If&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, avoid header prefixes &lt;span style="color:#66d9ef">in&lt;/span> the log messages
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>skip_log_headers &lt;span style="color:#a6e22e">If&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, avoid headers when opening log files
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>stderrthreshold severity logs at &lt;span style="color:#66d9ef">or&lt;/span> above this threshold &lt;span style="color:#66d9ef">go&lt;/span> to stderr (default &lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&lt;/span>v, &lt;span style="color:#f92672">--&lt;/span>v &lt;span style="color:#a6e22e">Level&lt;/span> number &lt;span style="color:#66d9ef">for&lt;/span> the log level verbosity
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>vmodule moduleSpec comma&lt;span style="color:#f92672">-&lt;/span>separated list of pattern&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">N&lt;/span> settings &lt;span style="color:#66d9ef">for&lt;/span> file&lt;span style="color:#f92672">-&lt;/span>filtered logging
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="see-also">SEE ALSO&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp/">kcp&lt;/a> - kubectl plugin for KCP&lt;/li>
&lt;li>&lt;a href="http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_workload_cordon/">kcp workload cordon&lt;/a> - Mark sync target as unschedulable&lt;/li>
&lt;li>&lt;a href="http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_workload_drain/">kcp workload drain&lt;/a> - Start draining sync target in preparation for maintenance&lt;/li>
&lt;li>&lt;a href="http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_workload_sync/">kcp workload sync&lt;/a> - Create a synctarget in kcp with service account and RBAC permissions. Output a manifest to deploy a syncer for the given sync target in a physical cluster.&lt;/li>
&lt;li>&lt;a href="http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_workload_uncordon/">kcp workload uncordon&lt;/a> - Mark sync target as schedulable&lt;/li>
&lt;/ul></description></item><item><title>Docs: kcp workload cordon</title><link>http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_workload_cordon/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_workload_cordon/</guid><description>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>kcp workload cordon &amp;lt;sync-target-name&amp;gt; [flags]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="examples">Examples&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> # Mark a sync target as unschedulable.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kubectl kcp workload cordon &amp;lt;sync-target-name&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="options">Options&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span> --as-uid string UID to impersonate for the operation
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --certificate-authority string Path to a cert file for the certificate authority
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --context string The name of the kubeconfig context to use
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -h, --help help for cordon
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --insecure-skip-tls-verify If true, the server&amp;#39;s certificate will not be checked for validity. This will make your HTTPS connections insecure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --kubeconfig string path to the kubeconfig file
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -n, --namespace string If present, the namespace scope for this CLI request
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --password string Password for basic authentication to the API server
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --proxy-url string If provided, this URL will be used to connect via proxy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --server string The address and port of the Kubernetes API server
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --token string Bearer token for authentication to the API server
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --user string The name of the kubeconfig user to use
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --username string Username for basic authentication to the API server
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="options-inherited-from-parent-commands">Options inherited from parent commands&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-v" data-lang="v">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>add_dir_header &lt;span style="color:#a6e22e">If&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, adds the file directory to the header of the log messages
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>alsologtostderr log to standard &lt;span style="color:#66d9ef">error&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span> well &lt;span style="color:#66d9ef">as&lt;/span> files
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>log_backtrace_at traceLocation when logging hits line file:&lt;span style="color:#a6e22e">N&lt;/span>, emit a stack trace (default :&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>log_dir string &lt;span style="color:#a6e22e">If&lt;/span> non&lt;span style="color:#f92672">-&lt;/span>empty, write log files &lt;span style="color:#66d9ef">in&lt;/span> this directory
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>log_file string &lt;span style="color:#a6e22e">If&lt;/span> non&lt;span style="color:#f92672">-&lt;/span>empty, use this log file
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>log_file_max_size uint &lt;span style="color:#a6e22e">Defines&lt;/span> the maximum size a log file can grow to. &lt;span style="color:#a6e22e">Unit&lt;/span> &lt;span style="color:#66d9ef">is&lt;/span> megabytes. &lt;span style="color:#a6e22e">If&lt;/span> the value &lt;span style="color:#66d9ef">is&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>, the maximum file size &lt;span style="color:#66d9ef">is&lt;/span> unlimited. (default &lt;span style="color:#ae81ff">1800&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>logtostderr log to standard &lt;span style="color:#66d9ef">error&lt;/span> instead of files (default &lt;span style="color:#66d9ef">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>one_output &lt;span style="color:#a6e22e">If&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, only write logs to their native severity level (vs also writing to each lower severity level)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>skip_headers &lt;span style="color:#a6e22e">If&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, avoid header prefixes &lt;span style="color:#66d9ef">in&lt;/span> the log messages
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>skip_log_headers &lt;span style="color:#a6e22e">If&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, avoid headers when opening log files
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>stderrthreshold severity logs at &lt;span style="color:#66d9ef">or&lt;/span> above this threshold &lt;span style="color:#66d9ef">go&lt;/span> to stderr (default &lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&lt;/span>v, &lt;span style="color:#f92672">--&lt;/span>v &lt;span style="color:#a6e22e">Level&lt;/span> number &lt;span style="color:#66d9ef">for&lt;/span> the log level verbosity
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>vmodule moduleSpec comma&lt;span style="color:#f92672">-&lt;/span>separated list of pattern&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">N&lt;/span> settings &lt;span style="color:#66d9ef">for&lt;/span> file&lt;span style="color:#f92672">-&lt;/span>filtered logging
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="see-also">SEE ALSO&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_workload/">kcp workload&lt;/a> - Manages KCP sync targets&lt;/li>
&lt;/ul></description></item><item><title>Docs: kcp workload drain</title><link>http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_workload_drain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_workload_drain/</guid><description>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>kcp workload drain &amp;lt;sync-target-name&amp;gt; [flags]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="examples">Examples&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> # Start draining a sync target in preparation for maintenance.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kubectl kcp workload drain &amp;lt;sync-target-name&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="options">Options&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span> --as-uid string UID to impersonate for the operation
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --certificate-authority string Path to a cert file for the certificate authority
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --context string The name of the kubeconfig context to use
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -h, --help help for drain
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --insecure-skip-tls-verify If true, the server&amp;#39;s certificate will not be checked for validity. This will make your HTTPS connections insecure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --kubeconfig string path to the kubeconfig file
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -n, --namespace string If present, the namespace scope for this CLI request
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --password string Password for basic authentication to the API server
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --proxy-url string If provided, this URL will be used to connect via proxy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --server string The address and port of the Kubernetes API server
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --token string Bearer token for authentication to the API server
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --user string The name of the kubeconfig user to use
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --username string Username for basic authentication to the API server
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="options-inherited-from-parent-commands">Options inherited from parent commands&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-v" data-lang="v">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>add_dir_header &lt;span style="color:#a6e22e">If&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, adds the file directory to the header of the log messages
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>alsologtostderr log to standard &lt;span style="color:#66d9ef">error&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span> well &lt;span style="color:#66d9ef">as&lt;/span> files
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>log_backtrace_at traceLocation when logging hits line file:&lt;span style="color:#a6e22e">N&lt;/span>, emit a stack trace (default :&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>log_dir string &lt;span style="color:#a6e22e">If&lt;/span> non&lt;span style="color:#f92672">-&lt;/span>empty, write log files &lt;span style="color:#66d9ef">in&lt;/span> this directory
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>log_file string &lt;span style="color:#a6e22e">If&lt;/span> non&lt;span style="color:#f92672">-&lt;/span>empty, use this log file
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>log_file_max_size uint &lt;span style="color:#a6e22e">Defines&lt;/span> the maximum size a log file can grow to. &lt;span style="color:#a6e22e">Unit&lt;/span> &lt;span style="color:#66d9ef">is&lt;/span> megabytes. &lt;span style="color:#a6e22e">If&lt;/span> the value &lt;span style="color:#66d9ef">is&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>, the maximum file size &lt;span style="color:#66d9ef">is&lt;/span> unlimited. (default &lt;span style="color:#ae81ff">1800&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>logtostderr log to standard &lt;span style="color:#66d9ef">error&lt;/span> instead of files (default &lt;span style="color:#66d9ef">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>one_output &lt;span style="color:#a6e22e">If&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, only write logs to their native severity level (vs also writing to each lower severity level)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>skip_headers &lt;span style="color:#a6e22e">If&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, avoid header prefixes &lt;span style="color:#66d9ef">in&lt;/span> the log messages
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>skip_log_headers &lt;span style="color:#a6e22e">If&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, avoid headers when opening log files
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>stderrthreshold severity logs at &lt;span style="color:#66d9ef">or&lt;/span> above this threshold &lt;span style="color:#66d9ef">go&lt;/span> to stderr (default &lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&lt;/span>v, &lt;span style="color:#f92672">--&lt;/span>v &lt;span style="color:#a6e22e">Level&lt;/span> number &lt;span style="color:#66d9ef">for&lt;/span> the log level verbosity
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>vmodule moduleSpec comma&lt;span style="color:#f92672">-&lt;/span>separated list of pattern&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">N&lt;/span> settings &lt;span style="color:#66d9ef">for&lt;/span> file&lt;span style="color:#f92672">-&lt;/span>filtered logging
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="see-also">SEE ALSO&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_workload/">kcp workload&lt;/a> - Manages KCP sync targets&lt;/li>
&lt;/ul></description></item><item><title>Docs: kcp workload sync</title><link>http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_workload_sync/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_workload_sync/</guid><description>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>kcp workload sync &amp;lt;sync-target-name&amp;gt; --syncer-image &amp;lt;kcp-syncer-image&amp;gt; [--resources=&amp;lt;resource1&amp;gt;,&amp;lt;resource2&amp;gt;..] -o &amp;lt;output-file&amp;gt; [flags]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="examples">Examples&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> # Ensure a syncer is running on the specified sync target.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kubectl kcp workload sync &amp;lt;sync-target-name&amp;gt; --syncer-image &amp;lt;kcp-syncer-image&amp;gt; -o syncer.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> KUBECONFIG=&amp;lt;pcluster-config&amp;gt; kubectl apply -f syncer.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> # Directly apply the manifest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kubectl kcp workload sync &amp;lt;sync-target-name&amp;gt; --syncer-image &amp;lt;kcp-syncer-image&amp;gt; -o - | KUBECONFIG=&amp;lt;pcluster-config&amp;gt; kubectl apply -f -
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="options">Options&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span> --as-uid string UID to impersonate for the operation
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --burst int Burst to use when talking to API servers. (default 30)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --certificate-authority string Path to a cert file for the certificate authority
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --context string The name of the kubeconfig context to use
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --feature-gates string A set of key=value pairs that describe feature gates for alpha/experimental features. Options are:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> KCPSyncerTunnel
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> APIResponseCompression
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DryRun
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ContextualLogging
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> KCPLocationAPI
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> AdvancedAuditing
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> APIListChunking
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ServerSideApply
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> APIPriorityAndFairness
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CustomResourceValidationExpressions
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -h, --help help for sync
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --insecure-skip-tls-verify If true, the server&amp;#39;s certificate will not be checked for validity. This will make your HTTPS connections insecure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --kcp-namespace string The name of the kcp namespace to create a service account in. (default &amp;#34;default&amp;#34;)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --kubeconfig string path to the kubeconfig file
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -n, --namespace string The namespace to create the syncer in in the physical cluster. By default this is &amp;#34;kcp-syncer-&amp;lt;synctarget-name&amp;gt;-&amp;lt;uid&amp;gt;&amp;#34;.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -o, --output-file string The manifest file to be created and applied to the physical cluster. Use - for stdout.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --password string Password for basic authentication to the API server
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --proxy-url string If provided, this URL will be used to connect via proxy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --qps float32 QPS to use when talking to API servers. (default 20)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --replicas int Number of replicas of the syncer deployment. (default 1)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --resources strings Resources to synchronize with kcp.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --server string The address and port of the Kubernetes API server
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --syncer-image string The syncer image to use in the syncer&amp;#39;s deployment YAML. Images are published at https://github.com/kcp-dev/kcp/pkgs/container/kcp%2Fsyncer.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --token string Bearer token for authentication to the API server
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --user string The name of the kubeconfig user to use
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --username string Username for basic authentication to the API server
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="options-inherited-from-parent-commands">Options inherited from parent commands&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-v" data-lang="v">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>add_dir_header &lt;span style="color:#a6e22e">If&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, adds the file directory to the header of the log messages
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>alsologtostderr log to standard &lt;span style="color:#66d9ef">error&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span> well &lt;span style="color:#66d9ef">as&lt;/span> files
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>log_backtrace_at traceLocation when logging hits line file:&lt;span style="color:#a6e22e">N&lt;/span>, emit a stack trace (default :&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>log_dir string &lt;span style="color:#a6e22e">If&lt;/span> non&lt;span style="color:#f92672">-&lt;/span>empty, write log files &lt;span style="color:#66d9ef">in&lt;/span> this directory
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>log_file string &lt;span style="color:#a6e22e">If&lt;/span> non&lt;span style="color:#f92672">-&lt;/span>empty, use this log file
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>log_file_max_size uint &lt;span style="color:#a6e22e">Defines&lt;/span> the maximum size a log file can grow to. &lt;span style="color:#a6e22e">Unit&lt;/span> &lt;span style="color:#66d9ef">is&lt;/span> megabytes. &lt;span style="color:#a6e22e">If&lt;/span> the value &lt;span style="color:#66d9ef">is&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>, the maximum file size &lt;span style="color:#66d9ef">is&lt;/span> unlimited. (default &lt;span style="color:#ae81ff">1800&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>logtostderr log to standard &lt;span style="color:#66d9ef">error&lt;/span> instead of files (default &lt;span style="color:#66d9ef">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>one_output &lt;span style="color:#a6e22e">If&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, only write logs to their native severity level (vs also writing to each lower severity level)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>skip_headers &lt;span style="color:#a6e22e">If&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, avoid header prefixes &lt;span style="color:#66d9ef">in&lt;/span> the log messages
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>skip_log_headers &lt;span style="color:#a6e22e">If&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, avoid headers when opening log files
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>stderrthreshold severity logs at &lt;span style="color:#66d9ef">or&lt;/span> above this threshold &lt;span style="color:#66d9ef">go&lt;/span> to stderr (default &lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&lt;/span>v, &lt;span style="color:#f92672">--&lt;/span>v &lt;span style="color:#a6e22e">Level&lt;/span> number &lt;span style="color:#66d9ef">for&lt;/span> the log level verbosity
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>vmodule moduleSpec comma&lt;span style="color:#f92672">-&lt;/span>separated list of pattern&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">N&lt;/span> settings &lt;span style="color:#66d9ef">for&lt;/span> file&lt;span style="color:#f92672">-&lt;/span>filtered logging
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="see-also">SEE ALSO&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_workload/">kcp workload&lt;/a> - Manages KCP sync targets&lt;/li>
&lt;/ul></description></item><item><title>Docs: kcp workload uncordon</title><link>http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_workload_uncordon/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_workload_uncordon/</guid><description>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>kcp workload uncordon &amp;lt;sync-target-name&amp;gt; [flags]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="examples">Examples&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> # Mark a sync target as schedulable.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kubectl kcp workload uncordon &amp;lt;sync-target-name&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="options">Options&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span> --as-uid string UID to impersonate for the operation
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --certificate-authority string Path to a cert file for the certificate authority
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --context string The name of the kubeconfig context to use
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -h, --help help for uncordon
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --insecure-skip-tls-verify If true, the server&amp;#39;s certificate will not be checked for validity. This will make your HTTPS connections insecure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --kubeconfig string path to the kubeconfig file
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -n, --namespace string If present, the namespace scope for this CLI request
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --password string Password for basic authentication to the API server
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --proxy-url string If provided, this URL will be used to connect via proxy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --server string The address and port of the Kubernetes API server
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --token string Bearer token for authentication to the API server
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --user string The name of the kubeconfig user to use
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --username string Username for basic authentication to the API server
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="options-inherited-from-parent-commands">Options inherited from parent commands&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-v" data-lang="v">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>add_dir_header &lt;span style="color:#a6e22e">If&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, adds the file directory to the header of the log messages
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>alsologtostderr log to standard &lt;span style="color:#66d9ef">error&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span> well &lt;span style="color:#66d9ef">as&lt;/span> files
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>log_backtrace_at traceLocation when logging hits line file:&lt;span style="color:#a6e22e">N&lt;/span>, emit a stack trace (default :&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>log_dir string &lt;span style="color:#a6e22e">If&lt;/span> non&lt;span style="color:#f92672">-&lt;/span>empty, write log files &lt;span style="color:#66d9ef">in&lt;/span> this directory
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>log_file string &lt;span style="color:#a6e22e">If&lt;/span> non&lt;span style="color:#f92672">-&lt;/span>empty, use this log file
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>log_file_max_size uint &lt;span style="color:#a6e22e">Defines&lt;/span> the maximum size a log file can grow to. &lt;span style="color:#a6e22e">Unit&lt;/span> &lt;span style="color:#66d9ef">is&lt;/span> megabytes. &lt;span style="color:#a6e22e">If&lt;/span> the value &lt;span style="color:#66d9ef">is&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>, the maximum file size &lt;span style="color:#66d9ef">is&lt;/span> unlimited. (default &lt;span style="color:#ae81ff">1800&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>logtostderr log to standard &lt;span style="color:#66d9ef">error&lt;/span> instead of files (default &lt;span style="color:#66d9ef">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>one_output &lt;span style="color:#a6e22e">If&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, only write logs to their native severity level (vs also writing to each lower severity level)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>skip_headers &lt;span style="color:#a6e22e">If&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, avoid header prefixes &lt;span style="color:#66d9ef">in&lt;/span> the log messages
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>skip_log_headers &lt;span style="color:#a6e22e">If&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, avoid headers when opening log files
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>stderrthreshold severity logs at &lt;span style="color:#66d9ef">or&lt;/span> above this threshold &lt;span style="color:#66d9ef">go&lt;/span> to stderr (default &lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&lt;/span>v, &lt;span style="color:#f92672">--&lt;/span>v &lt;span style="color:#a6e22e">Level&lt;/span> number &lt;span style="color:#66d9ef">for&lt;/span> the log level verbosity
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>vmodule moduleSpec comma&lt;span style="color:#f92672">-&lt;/span>separated list of pattern&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">N&lt;/span> settings &lt;span style="color:#66d9ef">for&lt;/span> file&lt;span style="color:#f92672">-&lt;/span>filtered logging
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="see-also">SEE ALSO&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_workload/">kcp workload&lt;/a> - Manages KCP sync targets&lt;/li>
&lt;/ul></description></item><item><title>Docs: kcp workspace</title><link>http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_workspace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_workspace/</guid><description>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>kcp workspace [create|create-context|use|current|&amp;lt;workspace&amp;gt;|..|.|-|~|&amp;lt;root:absolute:workspace&amp;gt;] [flags]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="examples">Examples&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> # shows the workspace you are currently using
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kubectl workspace .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> # enter a given workspace (this will change the current-context of your current KUBECONFIG)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kubectl workspace use my-workspace
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> # short-hand for the use syntax
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kubectl workspace my-workspace
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> # list sub-workspaces in the current workspace
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kubectl get workspaces
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> # enter a given absolute workspace
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kubectl workspace root:default:my-workspace
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> # enter the parent workspace
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kubectl workspace ..
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> # enter the previous workspace
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kubectl workspace -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> # go to your home workspace
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kubectl workspace
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> # create a workspace and immediately enter it
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kubectl workspace create my-workspace --enter
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> # create a context with the current workspace, e.g. root:default:my-workspace
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kubectl workspace create-context
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> # create a context with the current workspace, named context-name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kubectl workspace create-context context-name
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="options">Options&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span> --as-uid string UID to impersonate for the operation
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --certificate-authority string Path to a cert file for the certificate authority
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --context string The name of the kubeconfig context to use
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -h, --help help for workspace
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --insecure-skip-tls-verify If true, the server&amp;#39;s certificate will not be checked for validity. This will make your HTTPS connections insecure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --kubeconfig string path to the kubeconfig file
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -n, --namespace string If present, the namespace scope for this CLI request
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --password string Password for basic authentication to the API server
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --proxy-url string If provided, this URL will be used to connect via proxy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --server string The address and port of the Kubernetes API server
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --short Print only the name of the workspace, e.g. for integration into the shell prompt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --token string Bearer token for authentication to the API server
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --user string The name of the kubeconfig user to use
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --username string Username for basic authentication to the API server
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="options-inherited-from-parent-commands">Options inherited from parent commands&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-v" data-lang="v">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>add_dir_header &lt;span style="color:#a6e22e">If&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, adds the file directory to the header of the log messages
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>alsologtostderr log to standard &lt;span style="color:#66d9ef">error&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span> well &lt;span style="color:#66d9ef">as&lt;/span> files
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>log_backtrace_at traceLocation when logging hits line file:&lt;span style="color:#a6e22e">N&lt;/span>, emit a stack trace (default :&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>log_dir string &lt;span style="color:#a6e22e">If&lt;/span> non&lt;span style="color:#f92672">-&lt;/span>empty, write log files &lt;span style="color:#66d9ef">in&lt;/span> this directory
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>log_file string &lt;span style="color:#a6e22e">If&lt;/span> non&lt;span style="color:#f92672">-&lt;/span>empty, use this log file
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>log_file_max_size uint &lt;span style="color:#a6e22e">Defines&lt;/span> the maximum size a log file can grow to. &lt;span style="color:#a6e22e">Unit&lt;/span> &lt;span style="color:#66d9ef">is&lt;/span> megabytes. &lt;span style="color:#a6e22e">If&lt;/span> the value &lt;span style="color:#66d9ef">is&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>, the maximum file size &lt;span style="color:#66d9ef">is&lt;/span> unlimited. (default &lt;span style="color:#ae81ff">1800&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>logtostderr log to standard &lt;span style="color:#66d9ef">error&lt;/span> instead of files (default &lt;span style="color:#66d9ef">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>one_output &lt;span style="color:#a6e22e">If&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, only write logs to their native severity level (vs also writing to each lower severity level)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>skip_headers &lt;span style="color:#a6e22e">If&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, avoid header prefixes &lt;span style="color:#66d9ef">in&lt;/span> the log messages
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>skip_log_headers &lt;span style="color:#a6e22e">If&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, avoid headers when opening log files
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>stderrthreshold severity logs at &lt;span style="color:#66d9ef">or&lt;/span> above this threshold &lt;span style="color:#66d9ef">go&lt;/span> to stderr (default &lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&lt;/span>v, &lt;span style="color:#f92672">--&lt;/span>v &lt;span style="color:#a6e22e">Level&lt;/span> number &lt;span style="color:#66d9ef">for&lt;/span> the log level verbosity
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>vmodule moduleSpec comma&lt;span style="color:#f92672">-&lt;/span>separated list of pattern&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">N&lt;/span> settings &lt;span style="color:#66d9ef">for&lt;/span> file&lt;span style="color:#f92672">-&lt;/span>filtered logging
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="see-also">SEE ALSO&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp/">kcp&lt;/a> - kubectl plugin for KCP&lt;/li>
&lt;li>&lt;a href="http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_workspace_create/">kcp workspace create&lt;/a> - Creates a new workspace&lt;/li>
&lt;li>&lt;a href="http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_workspace_create-context/">kcp workspace create-context&lt;/a> - Create a kubeconfig context for the current workspace&lt;/li>
&lt;li>&lt;a href="http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_workspace_current/">kcp workspace current&lt;/a> - Print the current workspace. Same as &amp;lsquo;kubectl ws .&amp;rsquo;.&lt;/li>
&lt;li>&lt;a href="http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_workspace_tree/">kcp workspace tree&lt;/a> - Print the current workspace tree.&lt;/li>
&lt;li>&lt;a href="http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_workspace_use/">kcp workspace use&lt;/a> - Uses the given workspace as the current workspace. Using - means previous workspace, .. means parent workspace, . mean current, ~ means home workspace&lt;/li>
&lt;/ul></description></item><item><title>Docs: kcp workspace create</title><link>http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_workspace_create/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_workspace_create/</guid><description>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>kcp workspace create [flags]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="examples">Examples&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>kcp workspace create &amp;lt;workspace name&amp;gt; [--type=&amp;lt;type&amp;gt;] [--enter [--ignore-not-ready]] --ignore-existing
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="options">Options&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span> --enter Immediately enter the created workspace
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -h, --help help for create
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --ignore-existing Ignore if the workspace already exists. Requires none or absolute type path.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --kubeconfig string path to the kubeconfig file
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --type string A workspace type. The default type depends on where this child workspace is created.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="options-inherited-from-parent-commands">Options inherited from parent commands&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-v" data-lang="v">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>add_dir_header &lt;span style="color:#a6e22e">If&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, adds the file directory to the header of the log messages
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>alsologtostderr log to standard &lt;span style="color:#66d9ef">error&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span> well &lt;span style="color:#66d9ef">as&lt;/span> files
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>&lt;span style="color:#66d9ef">as&lt;/span>&lt;span style="color:#f92672">-&lt;/span>uid string &lt;span style="color:#a6e22e">UID&lt;/span> to impersonate &lt;span style="color:#66d9ef">for&lt;/span> the operation
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>certificate&lt;span style="color:#f92672">-&lt;/span>authority string &lt;span style="color:#a6e22e">Path&lt;/span> to a cert file &lt;span style="color:#66d9ef">for&lt;/span> the certificate authority
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>context string &lt;span style="color:#a6e22e">The&lt;/span> name of the kubeconfig context to use
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>insecure&lt;span style="color:#f92672">-&lt;/span>skip&lt;span style="color:#f92672">-&lt;/span>tls&lt;span style="color:#f92672">-&lt;/span>verify &lt;span style="color:#a6e22e">If&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, the server&lt;span style="color:#e6db74">&amp;#39;s certificate will not be checked for validity. This will make your HTTPS connections insecure
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace (default :0)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --log_dir string If non-empty, write log files in this directory
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --log_file string If non-empty, use this log file
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --log_file_max_size uint Defines the maximum size a log file can grow to. Unit is megabytes. If the value is 0, the maximum file size is unlimited. (default 1800)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --logtostderr log to standard error instead of files (default true)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> -n, --namespace string If present, the namespace scope for this CLI request
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --one_output If true, only write logs to their native severity level (vs also writing to each lower severity level)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --password string Password for basic authentication to the API server
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --proxy-url string If provided, this URL will be used to connect via proxy
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --server string The address and port of the Kubernetes API server
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --skip_headers If true, avoid header prefixes in the log messages
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --skip_log_headers If true, avoid headers when opening log files
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --stderrthreshold severity logs at or above this threshold go to stderr (default 2)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --token string Bearer token for authentication to the API server
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --user string The name of the kubeconfig user to use
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --username string Username for basic authentication to the API server
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> -v, --v Level number for the log level verbosity
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --vmodule moduleSpec comma-separated list of pattern=N settings for file-filtered logging
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="see-also">SEE ALSO&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_workspace/">kcp workspace&lt;/a> - Manages KCP workspaces&lt;/li>
&lt;/ul></description></item><item><title>Docs: kcp workspace create-context</title><link>http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_workspace_create-context/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_workspace_create-context/</guid><description>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>kcp workspace create-context [&amp;lt;context-name&amp;gt;] [--overwrite] [flags]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="examples">Examples&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>kcp workspace create-context
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="options">Options&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span> -h, --help help for create-context
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --kubeconfig string path to the kubeconfig file
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --overwrite Overwrite the context if it already exists
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="options-inherited-from-parent-commands">Options inherited from parent commands&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-v" data-lang="v">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>add_dir_header &lt;span style="color:#a6e22e">If&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, adds the file directory to the header of the log messages
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>alsologtostderr log to standard &lt;span style="color:#66d9ef">error&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span> well &lt;span style="color:#66d9ef">as&lt;/span> files
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>&lt;span style="color:#66d9ef">as&lt;/span>&lt;span style="color:#f92672">-&lt;/span>uid string &lt;span style="color:#a6e22e">UID&lt;/span> to impersonate &lt;span style="color:#66d9ef">for&lt;/span> the operation
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>certificate&lt;span style="color:#f92672">-&lt;/span>authority string &lt;span style="color:#a6e22e">Path&lt;/span> to a cert file &lt;span style="color:#66d9ef">for&lt;/span> the certificate authority
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>context string &lt;span style="color:#a6e22e">The&lt;/span> name of the kubeconfig context to use
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>insecure&lt;span style="color:#f92672">-&lt;/span>skip&lt;span style="color:#f92672">-&lt;/span>tls&lt;span style="color:#f92672">-&lt;/span>verify &lt;span style="color:#a6e22e">If&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, the server&lt;span style="color:#e6db74">&amp;#39;s certificate will not be checked for validity. This will make your HTTPS connections insecure
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace (default :0)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --log_dir string If non-empty, write log files in this directory
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --log_file string If non-empty, use this log file
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --log_file_max_size uint Defines the maximum size a log file can grow to. Unit is megabytes. If the value is 0, the maximum file size is unlimited. (default 1800)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --logtostderr log to standard error instead of files (default true)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> -n, --namespace string If present, the namespace scope for this CLI request
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --one_output If true, only write logs to their native severity level (vs also writing to each lower severity level)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --password string Password for basic authentication to the API server
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --proxy-url string If provided, this URL will be used to connect via proxy
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --server string The address and port of the Kubernetes API server
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --skip_headers If true, avoid header prefixes in the log messages
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --skip_log_headers If true, avoid headers when opening log files
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --stderrthreshold severity logs at or above this threshold go to stderr (default 2)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --token string Bearer token for authentication to the API server
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --user string The name of the kubeconfig user to use
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --username string Username for basic authentication to the API server
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> -v, --v Level number for the log level verbosity
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --vmodule moduleSpec comma-separated list of pattern=N settings for file-filtered logging
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="see-also">SEE ALSO&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_workspace/">kcp workspace&lt;/a> - Manages KCP workspaces&lt;/li>
&lt;/ul></description></item><item><title>Docs: kcp workspace current</title><link>http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_workspace_current/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_workspace_current/</guid><description>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>kcp workspace current [--short] [flags]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="examples">Examples&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>kcp workspace current
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="options">Options&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span> -h, --help help for current
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --kubeconfig string path to the kubeconfig file
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --short Print only the name of the workspace, e.g. for integration into the shell prompt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="options-inherited-from-parent-commands">Options inherited from parent commands&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-v" data-lang="v">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>add_dir_header &lt;span style="color:#a6e22e">If&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, adds the file directory to the header of the log messages
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>alsologtostderr log to standard &lt;span style="color:#66d9ef">error&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span> well &lt;span style="color:#66d9ef">as&lt;/span> files
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>&lt;span style="color:#66d9ef">as&lt;/span>&lt;span style="color:#f92672">-&lt;/span>uid string &lt;span style="color:#a6e22e">UID&lt;/span> to impersonate &lt;span style="color:#66d9ef">for&lt;/span> the operation
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>certificate&lt;span style="color:#f92672">-&lt;/span>authority string &lt;span style="color:#a6e22e">Path&lt;/span> to a cert file &lt;span style="color:#66d9ef">for&lt;/span> the certificate authority
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>context string &lt;span style="color:#a6e22e">The&lt;/span> name of the kubeconfig context to use
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>insecure&lt;span style="color:#f92672">-&lt;/span>skip&lt;span style="color:#f92672">-&lt;/span>tls&lt;span style="color:#f92672">-&lt;/span>verify &lt;span style="color:#a6e22e">If&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, the server&lt;span style="color:#e6db74">&amp;#39;s certificate will not be checked for validity. This will make your HTTPS connections insecure
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace (default :0)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --log_dir string If non-empty, write log files in this directory
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --log_file string If non-empty, use this log file
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --log_file_max_size uint Defines the maximum size a log file can grow to. Unit is megabytes. If the value is 0, the maximum file size is unlimited. (default 1800)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --logtostderr log to standard error instead of files (default true)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> -n, --namespace string If present, the namespace scope for this CLI request
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --one_output If true, only write logs to their native severity level (vs also writing to each lower severity level)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --password string Password for basic authentication to the API server
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --proxy-url string If provided, this URL will be used to connect via proxy
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --server string The address and port of the Kubernetes API server
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --skip_headers If true, avoid header prefixes in the log messages
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --skip_log_headers If true, avoid headers when opening log files
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --stderrthreshold severity logs at or above this threshold go to stderr (default 2)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --token string Bearer token for authentication to the API server
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --user string The name of the kubeconfig user to use
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --username string Username for basic authentication to the API server
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> -v, --v Level number for the log level verbosity
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --vmodule moduleSpec comma-separated list of pattern=N settings for file-filtered logging
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="see-also">SEE ALSO&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_workspace/">kcp workspace&lt;/a> - Manages KCP workspaces&lt;/li>
&lt;/ul></description></item><item><title>Docs: kcp workspace tree</title><link>http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_workspace_tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_workspace_tree/</guid><description>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>kcp workspace tree [flags]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="examples">Examples&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>kcp workspace tree
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="options">Options&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span> -f, --full Show full workspaces names
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -h, --help help for tree
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --kubeconfig string path to the kubeconfig file
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="options-inherited-from-parent-commands">Options inherited from parent commands&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-v" data-lang="v">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>add_dir_header &lt;span style="color:#a6e22e">If&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, adds the file directory to the header of the log messages
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>alsologtostderr log to standard &lt;span style="color:#66d9ef">error&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span> well &lt;span style="color:#66d9ef">as&lt;/span> files
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>&lt;span style="color:#66d9ef">as&lt;/span>&lt;span style="color:#f92672">-&lt;/span>uid string &lt;span style="color:#a6e22e">UID&lt;/span> to impersonate &lt;span style="color:#66d9ef">for&lt;/span> the operation
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>certificate&lt;span style="color:#f92672">-&lt;/span>authority string &lt;span style="color:#a6e22e">Path&lt;/span> to a cert file &lt;span style="color:#66d9ef">for&lt;/span> the certificate authority
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>context string &lt;span style="color:#a6e22e">The&lt;/span> name of the kubeconfig context to use
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>insecure&lt;span style="color:#f92672">-&lt;/span>skip&lt;span style="color:#f92672">-&lt;/span>tls&lt;span style="color:#f92672">-&lt;/span>verify &lt;span style="color:#a6e22e">If&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, the server&lt;span style="color:#e6db74">&amp;#39;s certificate will not be checked for validity. This will make your HTTPS connections insecure
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace (default :0)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --log_dir string If non-empty, write log files in this directory
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --log_file string If non-empty, use this log file
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --log_file_max_size uint Defines the maximum size a log file can grow to. Unit is megabytes. If the value is 0, the maximum file size is unlimited. (default 1800)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --logtostderr log to standard error instead of files (default true)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> -n, --namespace string If present, the namespace scope for this CLI request
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --one_output If true, only write logs to their native severity level (vs also writing to each lower severity level)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --password string Password for basic authentication to the API server
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --proxy-url string If provided, this URL will be used to connect via proxy
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --server string The address and port of the Kubernetes API server
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --skip_headers If true, avoid header prefixes in the log messages
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --skip_log_headers If true, avoid headers when opening log files
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --stderrthreshold severity logs at or above this threshold go to stderr (default 2)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --token string Bearer token for authentication to the API server
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --user string The name of the kubeconfig user to use
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --username string Username for basic authentication to the API server
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> -v, --v Level number for the log level verbosity
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --vmodule moduleSpec comma-separated list of pattern=N settings for file-filtered logging
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="see-also">SEE ALSO&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_workspace/">kcp workspace&lt;/a> - Manages KCP workspaces&lt;/li>
&lt;/ul></description></item><item><title>Docs: kcp workspace use</title><link>http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_workspace_use/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_workspace_use/</guid><description>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>kcp workspace use &amp;lt;workspace&amp;gt;|..|.|-|~|&amp;lt;root:absolute:workspace&amp;gt; [flags]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="options">Options&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span> -h, --help help for use
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --kubeconfig string path to the kubeconfig file
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --short Print only the name of the workspace, e.g. for integration into the shell prompt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="options-inherited-from-parent-commands">Options inherited from parent commands&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-v" data-lang="v">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>add_dir_header &lt;span style="color:#a6e22e">If&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, adds the file directory to the header of the log messages
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>alsologtostderr log to standard &lt;span style="color:#66d9ef">error&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span> well &lt;span style="color:#66d9ef">as&lt;/span> files
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>&lt;span style="color:#66d9ef">as&lt;/span>&lt;span style="color:#f92672">-&lt;/span>uid string &lt;span style="color:#a6e22e">UID&lt;/span> to impersonate &lt;span style="color:#66d9ef">for&lt;/span> the operation
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>certificate&lt;span style="color:#f92672">-&lt;/span>authority string &lt;span style="color:#a6e22e">Path&lt;/span> to a cert file &lt;span style="color:#66d9ef">for&lt;/span> the certificate authority
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>context string &lt;span style="color:#a6e22e">The&lt;/span> name of the kubeconfig context to use
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>insecure&lt;span style="color:#f92672">-&lt;/span>skip&lt;span style="color:#f92672">-&lt;/span>tls&lt;span style="color:#f92672">-&lt;/span>verify &lt;span style="color:#a6e22e">If&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, the server&lt;span style="color:#e6db74">&amp;#39;s certificate will not be checked for validity. This will make your HTTPS connections insecure
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace (default :0)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --log_dir string If non-empty, write log files in this directory
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --log_file string If non-empty, use this log file
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --log_file_max_size uint Defines the maximum size a log file can grow to. Unit is megabytes. If the value is 0, the maximum file size is unlimited. (default 1800)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --logtostderr log to standard error instead of files (default true)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> -n, --namespace string If present, the namespace scope for this CLI request
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --one_output If true, only write logs to their native severity level (vs also writing to each lower severity level)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --password string Password for basic authentication to the API server
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --proxy-url string If provided, this URL will be used to connect via proxy
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --server string The address and port of the Kubernetes API server
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --skip_headers If true, avoid header prefixes in the log messages
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --skip_log_headers If true, avoid headers when opening log files
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --stderrthreshold severity logs at or above this threshold go to stderr (default 2)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --tls-server-name string If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --token string Bearer token for authentication to the API server
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --user string The name of the kubeconfig user to use
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --username string Username for basic authentication to the API server
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> -v, --v Level number for the log level verbosity
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --vmodule moduleSpec comma-separated list of pattern=N settings for file-filtered logging
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="see-also">SEE ALSO&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="http://kcp-dev.github.io/docs/kcp-core/cli-reference/kcp_workspace/">kcp workspace&lt;/a> - Manages KCP workspaces&lt;/li>
&lt;/ul></description></item><item><title>Docs: Writing kcp-aware controllers</title><link>http://kcp-dev.github.io/docs/kcp-core/concepts/developers/controllers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kcp-dev.github.io/docs/kcp-core/concepts/developers/controllers/</guid><description>
&lt;h2 id="keys-for-objects-in-listersindexers">Keys for objects in listers/indexers&lt;/h2>
&lt;p>When you need to get an object from a kcp-aware lister or an indexer, you can&amp;rsquo;t just pass the object&amp;rsquo;s name to the
&lt;code>Get()&lt;/code> function, like you do with a typical controller targeting Kubernetes. Projects using kcp&amp;rsquo;s copy of client-go
are using a modified key function.&lt;/p>
&lt;p>Here are what keys look like for an object &lt;code>foo&lt;/code> for both cluster-scoped and namespace-scoped varieties:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Organization&lt;/th>
&lt;th>Workspace&lt;/th>
&lt;th>Logical Cluster&lt;/th>
&lt;th>Namespace&lt;/th>
&lt;th>Key&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>root&lt;/td>
&lt;td>-&lt;/td>
&lt;td>root&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>root&lt;/td>
&lt;td>default&lt;/td>
&lt;td>default/root&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>root&lt;/td>
&lt;td>my-org&lt;/td>
&lt;td>root:my-org&lt;/td>
&lt;td>-&lt;/td>
&lt;td>root:my-org&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>root&lt;/td>
&lt;td>my-org&lt;/td>
&lt;td>root:my-org&lt;/td>
&lt;td>default&lt;/td>
&lt;td>default/root:my-org&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>my-org&lt;/td>
&lt;td>my-workspace&lt;/td>
&lt;td>my-org:my-workspace&lt;/td>
&lt;td>-&lt;/td>
&lt;td>my-org:my-workspace&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>my-org&lt;/td>
&lt;td>my-workspace&lt;/td>
&lt;td>my-org:my-workspace&lt;/td>
&lt;td>default&lt;/td>
&lt;td>default/my-org:my-workspace&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="encodingdecoding-keys">Encoding/decoding keys&lt;/h2>
&lt;h3 id="encoding-workspace-keys">Encoding workspace keys&lt;/h3>
&lt;p>To encode a key &lt;strong>for a workspace&lt;/strong>, use &lt;code>helper.WorkspaceKey(org, ws)&lt;/code>. Valid values for &lt;code>org&lt;/code> are &lt;code>root&lt;/code> and any
organization workspace name (e.g. &lt;code>my-org&lt;/code> from above).&lt;/p>
&lt;h3 id="encoding-all-other-keys">Encoding all other keys&lt;/h3>
&lt;p>To encode a key for anything else, use &lt;code>clusters.ToClusterAwareKey(clusterName, name)&lt;/code>. If your object is namespace-scoped,
you&amp;rsquo;ll need to do &lt;code>ns + &amp;quot;/&amp;quot; + clusters.ToClusterAwareKey(clusterName, name)&lt;/code>.&lt;/p>
&lt;h3 id="decoding-keys">Decoding keys&lt;/h3>
&lt;p>To decode a key, use &lt;code>clusters.SplitClusterAwareKey(key)&lt;/code>.&lt;/p>
&lt;p>To decode a key for a cluster-scoped object, use it directly. To decode a key for a namespace-scoped object, do this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">namespace&lt;/span>, &lt;span style="color:#a6e22e">clusterNameAndName&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">cache&lt;/span>.&lt;span style="color:#a6e22e">SplitMetaNamespaceKey&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// handle error
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">clusterName&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">clusters&lt;/span>.&lt;span style="color:#a6e22e">SplitClusterAwareKey&lt;/span>(&lt;span style="color:#a6e22e">clusterNameAndName&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Using `kcp` as a library</title><link>http://kcp-dev.github.io/docs/kcp-core/concepts/developers/library-usage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kcp-dev.github.io/docs/kcp-core/concepts/developers/library-usage/</guid><description>
&lt;p>Instead of running the kcp as a binary using &lt;code>go run&lt;/code>, you can include the kcp api-server in your own projects. To create and start the api-server with the default options (including an embedded etcd server):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">options&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">serveroptions&lt;/span>.&lt;span style="color:#a6e22e">NewOptions&lt;/span>().&lt;span style="color:#a6e22e">Complete&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">srv&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">server&lt;/span>.&lt;span style="color:#a6e22e">NewServer&lt;/span>(&lt;span style="color:#a6e22e">options&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Run() will block until the apiserver stops or an error occurs.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">srv&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You may also configure post-start hooks which are useful if you need to start a some process that depends on a connection to the newly created api-server such as a controller manager.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Create a new api-server with default options
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">options&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">serveroptions&lt;/span>.&lt;span style="color:#a6e22e">NewOptions&lt;/span>().&lt;span style="color:#a6e22e">Complete&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">srv&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">server&lt;/span>.&lt;span style="color:#a6e22e">NewServer&lt;/span>(&lt;span style="color:#a6e22e">options&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Register a post-start hook that connects to the api-server
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">srv&lt;/span>.&lt;span style="color:#a6e22e">AddPostStartHook&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;connect-to-api&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">genericapiserver&lt;/span>.&lt;span style="color:#a6e22e">PostStartHookContext&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Create a new client using the client config from our newly created api-server
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">client&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">clientset&lt;/span>.&lt;span style="color:#a6e22e">NewForConfigOrDie&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>.&lt;span style="color:#a6e22e">LoopbackClientConfig&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">client&lt;/span>.&lt;span style="color:#a6e22e">Discovery&lt;/span>().&lt;span style="color:#a6e22e">ServerGroups&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Start the api-server
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">srv&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Logical clusters</title><link>http://kcp-dev.github.io/docs/kcp-core/concepts/investigations/logical-clusters/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kcp-dev.github.io/docs/kcp-core/concepts/investigations/logical-clusters/</guid><description>
&lt;p>Kubernetes evolved from and was influenced by earlier systems that had weaker internal tenancy than a general-purpose compute platform requires. The namespace, quota, admission, and RBAC concepts were all envisioned quite early in the project, but evolved with Kubernetes and not all impacts to future evolution were completely anticipated. Tenancy within clusters is handled at the resource and namespace level, and within a namespace there are a limited number of boundaries. Most organizations use either namespace or cluster separation as their primary unit of self service, with variations leveraging a rich ecosystem of tools.&lt;/p>
&lt;p>The one concrete component that cannot be tenanted are API resources - from a Kubernetes perspective we have too much history and ecosystem to desire a change, and so intra-cluster tenancy will always be at its weakest when users desire to add diverse extensions and tools. In addition, controllers are practically limited to a cluster scope or a namespace scope by the design of our APIs and authorization models and so intra-cluster tenancy for extensions is particularly weak (you can&amp;rsquo;t prevent an ingress controller from viewing &amp;ldquo;all secrets&amp;rdquo;).&lt;/p>
&lt;p>Our admission chain has historically been very powerful and allowed deep policy to be enforced for tenancy, but the lack of a dynamic plugin model in golang has limited us to what can be accomplished to external RPC webhooks which have a number of significant performance and reliability impacts (especially when coupled to the cluster the webhook is acting on). If we want to have larger numbers of tenants or stronger subdivision, we need to consider improving the scalability of our policy chain in a number of dimensions.&lt;/p>
&lt;p>Ideally, as a community we could improve both namespace and cluster tenancy at the same time in a way that provides enhanced tools for teams and organizations, addresses extensions holistically, and improves the reliability and performance of policy control from our control planes.&lt;/p>
&lt;h2 id="goal-getting-a-new-cluster-that-allows-a-team-to-add-extensions-efficiently-should-be-effectively-zero-cost">Goal: Getting a new cluster that allows a team to add extensions efficiently should be effectively zero cost&lt;/h2>
&lt;p>If a cluster is a desirable unit of tenancy, clusters should be amortized &amp;ldquo;free&amp;rdquo; and easy to operationalize as self-service. We have explored in the community a number of approaches that make new clusters cheaper (specifically &lt;a href="">virtual clusters&lt;/a> in SIG-multi-tenancy, as well as the natural cloud vendor &amp;ldquo;as-a-service&amp;rdquo; options where they amortize the cost of many small clusters), but there are certain fundamental fixed costs that inflate the cost of those clusters. If we could make one more cluster the same cost as a namespace, we could dramatically improve isolation of teams as well as offering an advantage for more alignment on tenancy across the ecosystem.&lt;/p>
&lt;h3 id="constraint-a-naive-client-should-see-no-difference-between-a-physical-or-logical-cluster">Constraint: A naive client should see no difference between a physical or logical cluster&lt;/h3>
&lt;p>A logical cluster that behaves differently from a physical cluster is not valuable for existing tools. We would need to lean heavily on our existing abstractions to ensure clients see no difference, and to focus on implementation options that avoid reduplicating a large amount of the Kube API surface area.&lt;/p>
&lt;h3 id="constraint-the-implementation-must-improve-isolation-within-a-single-process">Constraint: The implementation must improve isolation within a single process&lt;/h3>
&lt;p>As clusters grow larger or are used in more complex fashion, the failure modes of a single process API server have received significant attention within the last few years. To offer cheaper clusters, we&amp;rsquo;d have to also improve isolation between simultaneous clients and manage etcd usage, traffic, and both cpu and memory use at the control plane. These stronger controls would be beneficial to physical clusters and organizations running more complex clusters as well.&lt;/p>
&lt;h3 id="constraint-we-should-improve-in-process-options-for-policy">Constraint: We should improve in-process options for policy&lt;/h3>
&lt;p>Early in Kubernetes we discussed our options for extension of the core capability - admission control and controllers are the two primary levers, with aggregated APIs being an escape hatch for more complex API behavior (including the ability to wrap existing APIs or CRDs). We should consider options that could reduce the cost of complex policy such as making using the Kube API more library-like (to enable forking) as well as in-process options for policy that could deliver order of magnitude higher reliability and performance than webhooks.&lt;/p>
&lt;h2 id="areas-of-investigation">Areas of investigation&lt;/h2>
&lt;ol>
&lt;li>Define high level user use cases&lt;/li>
&lt;li>Prototype modelling the simplest option to enable &lt;code>kcp&lt;/code> demo functionality and team subdivision&lt;/li>
&lt;li>Explore client changes required to make multi-cluster controllers efficient&lt;/li>
&lt;li>Support surfacing into a logical cluster API resources from another logical cluster&lt;/li>
&lt;li>Layering RBAC so that changes in one logical cluster are additive to a source policy that is out of the logical cluster&amp;rsquo;s control&lt;/li>
&lt;li>Explore quota of requests, cpu, memory, and persistent to complement P&amp;amp;F per logical cluster with hard and soft limits&lt;/li>
&lt;li>Explore making &lt;code>kcp&lt;/code> usable as a library so that an extender could write Golang admission / hierarchal policy for logical clusters that reduces the need for external extension&lt;/li>
&lt;li>Work through how a set of etcd objects could be moved to another etcd for sharding operations and keep clients unaware (similar to the &amp;ldquo;restore a cluster from backup&amp;rdquo; problem)&lt;/li>
&lt;li>Explore providing a read only resource underlay from another logical cluster so that immutable default objects can be provided&lt;/li>
&lt;li>Investigate use cases that would benefit even a single cluster (justify having this be a feature in kube-apiserver on by default)&lt;/li>
&lt;/ol>
&lt;h2 id="use-cases">Use cases&lt;/h2>
&lt;p>The use cases of logical cluster can be seen to overlap heavily with &lt;a href="http://kcp-dev.github.io/docs/kcp-core/concepts/investigations/transparent-multi-cluster/">transparent multi-cluster&lt;/a> use cases, and are captured at the highest level in &lt;a href="">GOALS.md&lt;/a>. The use cases below attempt to focus on logical clusters independent of the broader goals.&lt;/p>
&lt;h3 id="as-a-developer-of-crds--controllers--extensions">As a developer of CRDs / controllers / extensions&lt;/h3>
&lt;ul>
&lt;li>I can launch a local Kube control plane and test out multiple different versions of the same CRD in parallel quickly&lt;/li>
&lt;li>I can create a control plane for my organization&amp;rsquo;s cloud resources (CRDs) that is centralized but doesn&amp;rsquo;t require me to provision nodes.&lt;/li>
&lt;/ul>
&lt;h3 id="as-an-infrastructure-admin">As an infrastructure admin&lt;/h3>
&lt;ul>
&lt;li>I can have strong tenant separation between different application teams&lt;/li>
&lt;li>Allow tenant teams to run their own custom resources (CRDs) and controllers without impacting others&lt;/li>
&lt;li>Subdivide access to the underlying clusters, keep those clusters simpler and with fewer extensions, and reduce the impact of cluster failure&lt;/li>
&lt;/ul>
&lt;h3 id="as-a-user-on-an-existing-kubernetes-cluster">As a user on an existing Kubernetes cluster&lt;/h3>
&lt;ul>
&lt;li>I can get a temporary space to test an extension before installing it&lt;/li>
&lt;li>I can create clusters that have my own namespaces&lt;/li>
&lt;/ul>
&lt;h2 id="progress">Progress&lt;/h2>
&lt;h3 id="logical-clusters-represented-as-a-prefix-to-etcd">Logical clusters represented as a prefix to etcd&lt;/h3>
&lt;p>In the early prototype stage &lt;code>kcp&lt;/code> has a series of patches that allow a header or API prefix path to alter the prefix used to retrieve resources from etcd. The set of available resources is stripped down to a minimal set of hardcoded APIs including namespaces, rbac, and crds by patching those out of kube-apiserver type registration.&lt;/p>
&lt;p>The header &lt;code>X-Kubernetes-Cluster&lt;/code> supports either a named logical cluster or the value &lt;code>*&lt;/code>, or the prefix &lt;code>/cluster/&amp;lt;name&amp;gt;&lt;/code> may be used at the root. This alters the behavior of a number of components, primarily retrieval and storage of API objects in etcd by adding a new segment to the etcd key (instead of &lt;code>/&amp;lt;resource&amp;gt;/&amp;lt;namespace&amp;gt;/&amp;lt;name&amp;gt;&lt;/code>, &lt;code>/&amp;lt;resource&amp;gt;/&amp;lt;cluster&amp;gt;/&amp;lt;namespace&amp;gt;/&amp;lt;name&amp;gt;&lt;/code>). Providing &lt;code>*&lt;/code> is currently acting on watch to support watching resources across all clusters, which also has the side effect of populating the object &lt;code>metadata.clusterName&lt;/code> field. If no logical cluster name is provided, the value &lt;code>admin&lt;/code> is used (which behaves as a normal kube-apiserver would).&lt;/p>
&lt;p>This means new logical clusters start off empty (no RBAC or CRD resources), which the &lt;code>kcp&lt;/code> prototype mitigates by calculating the set of API resources available by merging from the default &lt;code>admin&lt;/code> CRDs + the hardcoded APIs. That demonstrates one avenue of efficiency - a new logical cluster has an amortized cost near zero for both RBAC (no duplication of several hundred RBAC roles into the logical cluster) and API OpenAPI documents (built on demand as the union of another logical cluster and any CRDs added to the new cluster).&lt;/p>
&lt;p>To LIST or WATCH these resources, the user specifies &lt;code>*&lt;/code> as their cluster name which adjusts the key prefix to fetch all resources across all logical clusters. It&amp;rsquo;s likely some intermediate step between client and server would be necessary to support &amp;ldquo;watch subset&amp;rdquo; efficiently, which would require work to better enable clients to recognize the need to relist as well as the need to make the prototype support some level of logical cluster subset retrieval besides just an etcd key prefix scan.&lt;/p>
&lt;h4 id="next-steps">Next steps&lt;/h4>
&lt;ul>
&lt;li>Continuing to explore how clients might query multiple resources across multiple logical clusters&lt;/li>
&lt;li>What changes to resource version are necessary to allow&lt;/li>
&lt;/ul>
&lt;h3 id="zero-configuration-on-startup-in-local-dev">Zero configuration on startup in local dev&lt;/h3>
&lt;p>The &lt;code>kcp&lt;/code> binary embeds &lt;code>etcd&lt;/code> in a single node config and manages it for local iterative development. This is in keeping with optimize for local workflow, but can be replaced by connecting to an existing etcd instance (not currently implemented). Ideally, a &lt;code>kcp&lt;/code> like process would have minimal external dependencies and be capable of running in a shardable configuration efficiently (each shard handling 100k objects), with other components handling logical cluster sharding.&lt;/p>
&lt;h3 id="crd-virtualization-inheritance-and-normalization">CRD virtualization, inheritance, and normalization&lt;/h3>
&lt;p>A simple implementation of CRD virtualization (different logical clusters having different api resources), CRD inheritance (a logical cluster inheriting CRDs from a parent logical cluster), and CRD normalization (between multiple physical clusters) to find the lowest-common-denominator resource has been prototyped.&lt;/p>
&lt;p>The CRD structure in the kube-apiserver is currently &amp;ldquo;up front&amp;rdquo; (as soon as a CRD is created it shows up in apiresources), but with the goal of reducing the up front cost of a logical cluster we may wish to suggest refactors upstream that would make the model more amenable to &amp;ldquo;on demand&amp;rdquo; construction and merging at runtime. OpenAPI merging is a very expensive part of the kube-apiserver historically (rapid CRD changes can have a massive memory and CPU impact) and this may be a logical area to invest to allow scaling within regular clusters.&lt;/p>
&lt;p>Inheritance allows an admin to control which resources a client might use - this would be particularly useful in more opinionated platform flows for organizations that wish to offer only a subset of APIs. The simplest approach here is that all logical clusters inherit the admin virtual cluster (the default), but more complicated flows with policy and chaining should be possible.&lt;/p>
&lt;p>Normalization involves reading OpenAPI docs from one or more child clusters, converting those to CRDs, finding the lowest compatible version of those CRDs (the version that shares all fields), and materializing those objects as CRDs in a logical cluster. This allows the minimum viable hook for turning a generic control plane into a spot where real Kube objects can run, and would be a key part of transparent multi-cluster.&lt;/p></description></item><item><title>Docs: Minimal API Server</title><link>http://kcp-dev.github.io/docs/kcp-core/concepts/investigations/minimal-api-server/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kcp-dev.github.io/docs/kcp-core/concepts/investigations/minimal-api-server/</guid><description>
&lt;p>The Kubernetes API machinery provides a pattern for declarative config-driven API with a number of conventions that simplify building configuration loops and consolidating sources of truth. There have been many efforts to make that tooling more reusable and less dependent on the rest of the Kube concepts but without a strong use case driving separation and a design the tooling is still fairly coupled to Kube.&lt;/p>
&lt;h2 id="goal">Goal&lt;/h2>
&lt;p>Building and sustaining an API server that:&lt;/p>
&lt;ol>
&lt;li>reuses much of the Kubernetes API server codebase to support Kube-like CRUD operations&lt;/li>
&lt;li>adds, removes, or excludes some / any / all the built-in Kubernetes types&lt;/li>
&lt;li>excludes some default assumptions of Kubernetes specific to the &amp;ldquo;Kube as a cluster&amp;rdquo; like &amp;ldquo;create the kubernetes default svc&amp;rdquo;&lt;/li>
&lt;li>replaces / modifies some implementations like custom resources, backend storage (etcd vs others), RBAC, admission control, and other primitives&lt;/li>
&lt;/ol>
&lt;p>As a secondary goal, identifying where exceptions or undocumented assumptions exist in the libraries that would make clients behave differently generically (where an abstraction is not complete) should help ensure future clients can more concretely work across different API servers consistently.&lt;/p>
&lt;h3 id="constraint-the-abstraction-for-a-minimal-api-server-should-not-hinder-kubernetes-development">Constraint: The abstraction for a minimal API server should not hinder Kubernetes development&lt;/h3>
&lt;p>The primary consumer of the Kube API is Kubernetes - any abstraction that makes a standalone API server possible must not regress Kubernetes performance or overly complicate Kubernetes evolution. The abstraction &lt;em>should&lt;/em> be an opportunity to improve interfaces within Kubernetes to decouple components and improve comprehension.&lt;/p>
&lt;h3 id="constraint-reusing-the-existing-code-base">Constraint: Reusing the existing code base&lt;/h3>
&lt;p>While it is certainly possible to rebuild all of Kube from scratch, a large amount of client tooling and benefit exists within patterns like declarative apply. This investigation is scoped to working within the context of improving the existing code and making the minimal changes within the bounds of API compatibility to broaden utility.&lt;/p>
&lt;p>It should be possible to add an arbitrary set of the existing Kube resources to the minimal API server, up to and including what an existing kube-apiserver exposes. Several use cases desire RBAC, Namespaces, Secrets, or other parts of the workload, while ensuring a &amp;ldquo;pick and choose&amp;rdquo; mindset keeps the interface supporting the needs of the full Kubernetes server.&lt;/p>
&lt;p>In the short term, it would not be a goal of this investigation to replace the underlying storage implementation &lt;code>etcd&lt;/code>, but it should be possible to more easily inject the appropriate initialization code so that someone can easily start an API server that uses a different storage mechanism.&lt;/p>
&lt;h2 id="areas-of-investigation">Areas of investigation&lt;/h2>
&lt;ol>
&lt;li>Define high level user use cases&lt;/li>
&lt;li>Document existing efforts inside and outside of the SIG process&lt;/li>
&lt;li>Identify near-term SIG API-Machinery work that would benefit from additional decoupling (also wg-code-organization)&lt;/li>
&lt;li>Find consensus points on near term changes and draft a KEP&lt;/li>
&lt;/ol>
&lt;h2 id="use-cases">Use cases&lt;/h2>
&lt;h3 id="as-a-developer-of-crds--controllers--extensions">As a developer of CRDs / controllers / extensions&lt;/h3>
&lt;ul>
&lt;li>I can launch a local Kube API and test out multiple different versions of the same CRD in parallel quickly (shared with &lt;a href="http://kcp-dev.github.io/docs/kcp-core/concepts/investigations/logical-clusters/">logical-clusters&lt;/a>)&lt;/li>
&lt;li>I can create a control plane for my organization&amp;rsquo;s cloud resources (CRDs) that is centralized but doesn&amp;rsquo;t require me to provision nodes (shared with &lt;a href="http://kcp-dev.github.io/docs/kcp-core/concepts/investigations/logical-clusters/">logical-clusters&lt;/a>)&lt;/li>
&lt;li>&amp;hellip; benefits for unit testing CRDs in controller projects?&lt;/li>
&lt;/ul>
&lt;h3 id="as-a-kubernetes-core-developer">As a Kubernetes core developer&lt;/h3>
&lt;ul>
&lt;li>The core API server libraries are better separated and more strongly reviewed&lt;/li>
&lt;li>Additional contributors are incentivized to maintain the core libraries of Kube because of a broader set of use cases&lt;/li>
&lt;li>Kube client tools have fewer edge cases because they are tested against multiple sets of resources&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;h3 id="as-an-aggregated-api-server-developer">As an aggregated API server developer&lt;/h3>
&lt;ul>
&lt;li>It is easy to reuse the k8s.io/apiserver code base to provide:
&lt;ul>
&lt;li>A virtual read-only resource that proxies to another type
&lt;ul>
&lt;li>e.g. metrics-server&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>An end user facing resource backed by a CRD (editable only by admins) that has additional validation and transformation
&lt;ul>
&lt;li>e.g. service catalog&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>A subresource implementation for a core type (pod/logs) that is not embedded in the Kube apiserver code&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="as-a-devops-team">As a devops team&lt;/h3>
&lt;ul>
&lt;li>I want to be able to create declarative APIs using the controller pattern &amp;hellip;
&lt;ul>
&lt;li>So that I can have declarative infrastructure without a full Kube cluster (&lt;a href="">https://github.com/thetirefire/badidea&lt;/a> and &lt;a href="">https://docs.google.com/presentation/d/1TfCrsBEgvyOQ1MGC7jBKTvyaelAYCZzl3udRjPlVmWg/edit#slide=id.g401c104a3c_0_0&lt;/a>)&lt;/li>
&lt;li>So that I can have controllers that list/watch/sync/react to user focused changes&lt;/li>
&lt;li>So that I can have a kubectl apply loop for my intent (spec) and see the current state (status)&lt;/li>
&lt;li>So that I can move cloud infrastructure integrations like &lt;a href="">AWS Controllers for k8s&lt;/a> out of individual clusters into a centrally secured spot&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>I want to be offer a &amp;ldquo;cluster-like&amp;rdquo; user experience to a Kube application author without exposing the cluster directly (&lt;a href="http://kcp-dev.github.io/docs/kcp-core/concepts/investigations/transparent-multi-cluster/">transparent multi-cluster&lt;/a>)
&lt;ul>
&lt;li>So that I can keep app authors from directly knowing about where the app runs for security / infrastructure abstraction&lt;/li>
&lt;li>So that I can control where applications run across multiple clusters centrally&lt;/li>
&lt;li>So that I can offer self-service provisioning at a higher level than namespace or cluster&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>I want to consolidate all of my infrastructure and use gitops to talk to them the same way I do for clusters
&lt;ul>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>More detailed requests&lt;/p>
&lt;ul>
&lt;li>With some moderate boilerplate (50-100 lines of code) I can start a Kube compliant API server with (some / any of):
&lt;ul>
&lt;li>Only custom built-in types (code -&amp;gt; generic registry -&amp;gt; etcd)&lt;/li>
&lt;li>CRDs (CustomResourceDefinition)&lt;/li>
&lt;li>Aggregated API support (APIService)&lt;/li>
&lt;li>Quotas and rate control and priority and fairness&lt;/li>
&lt;li>A custom admission chain that does not depend on webhooks but is inline code&lt;/li>
&lt;li>A different backend for storage other than etcd (projects like &lt;a href="">kine&lt;/a>)&lt;/li>
&lt;li>Add / wrap some HTTP handlers with middleware&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="progress">Progress&lt;/h2>
&lt;p>Initial work in k/k fork involved stripping out elements of kube-apiserver start that required &amp;ldquo;the full stack&amp;rdquo; or internal controllers such as the kubernetes.default.svc maintainer (roughly &lt;code>pkg/master&lt;/code>). It also looked at how to pull a subset of Kube resources (namespaces, rbac, but not pods) from the core resource group. The &lt;code>kcp&lt;/code> binary uses fairly normal &lt;code>k8s.io/apiserver&lt;/code> methods to init the apiserver process.&lt;/p>
&lt;p>Next steps include identifying example use cases and the interfaces they wish to customize in the control plane (see above) and then looking at how those could be composed in an approachable way. That also involves exploring what refactors and organization makes sense within the k/k project in concert with 1-2 sig-apimachinery members.&lt;/p></description></item><item><title>Docs: Placement, Locations and Scheduling</title><link>http://kcp-dev.github.io/docs/kcp-core/concepts/locations-and-scheduling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kcp-dev.github.io/docs/kcp-core/concepts/locations-and-scheduling/</guid><description>
&lt;p>KCP implements &lt;em>Compute as a Service&lt;/em> via a concept of Transparent Multi Cluster (TMC). TMC means that
Kubernetes clusters are attached to a kcp installation to execute workload objects from the users'
workspaces by syncing these workload objects down to those clusters and the objects&amp;rsquo; status
back up. This gives the illusion of native compute in KCP.&lt;/p>
&lt;p>We call it &lt;em>Compute as a Service&lt;/em> because the registered &lt;code>SyncTargets&lt;/code> live in workspaces that
are (normally) invisible to the users, and the teams operating compute can be different from
the compute consumers.&lt;/p>
&lt;p>The APIs used for Compute as a Service are:&lt;/p>
&lt;ol>
&lt;li>&lt;code>scheduling.kcp.dev/v1alpha1&lt;/code> – we call the outcome of this &lt;em>placement&lt;/em> of namespaces.&lt;/li>
&lt;li>&lt;code>workload.kcp.dev/v1alpha1&lt;/code> – responsible for the syncer component of TMC.&lt;/li>
&lt;/ol>
&lt;h2 id="main-concepts">Main Concepts&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;code>SyncTarget&lt;/code> in &lt;code>workload.kcp.dev/v1alpha1&lt;/code> – representations of Kubernetes clusters that are attached to a kcp installation to
execute workload objects from the users&amp;rsquo; workspaces. On a Kubernetes cluster, there is one syncer
process for each &lt;code>SyncTarget&lt;/code> object.&lt;/p>
&lt;p>Sync targets are invisible to users, and (medium term) at most identified via a UID.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Location&lt;/code> in &lt;code>scheduling.kcp.dev/v1alpha1&lt;/code> – represents a collection of &lt;code>SyncTarget&lt;/code> objects selected via instance labels, and
exposes labels (potentially different from the instance labels) to the users to describe, identify and select locations to be used
for placement of user namespaces onto sync targets.&lt;/p>
&lt;p>Locations are visible to users, but owned by the compute service team, i.e. read-only to the users and only projected
into their workspaces for visibility. A placement decision references a location by name.&lt;/p>
&lt;p>&lt;code>SyncTarget&lt;/code>s in a &lt;code>Location&lt;/code> are transparent to the user. Workloads should be able to seamlessly move from one &lt;code>SyncTarget&lt;/code> to another
within a &lt;code>Location&lt;/code>, based on operational concerns of the compute service provider, like decommissioning a cluster, rebalancing
capacity, or due to an outage of a cluster.&lt;/p>
&lt;p>It is compute service&amp;rsquo;s responsibility to ensure that for workloads in a location, to the user it looks like ONE cluster.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Placement&lt;/code> in &lt;code>scheduling.kcp.dev/v1alpha1&lt;/code> – represents a selection rule to choose ONE &lt;code>Location&lt;/code> via location labels, and bind
the selected location to MULTIPLE namespaces in a user workspace. For Workspaces with multiple Namespaces, users can create multiple
Placements to assign specific Namespace(s) to specific Locations.&lt;/p>
&lt;p>&lt;code>Placement&lt;/code> are visible and writable to users. A default &lt;code>Placement&lt;/code> is automatically created when a workload &lt;code>APIBinding&lt;/code> is
created on the user workspace, which randomly select a &lt;code>Location&lt;/code> and bind to all namespaces in this workspace. The user can mutate
or delete the default &lt;code>Placement&lt;/code>. The corresponding &lt;code>APIBinding&lt;/code> will be annotated with &lt;code>workload.kcp.dev/skip-default-object-creation&lt;/code>,
so that the default &lt;code>Placement&lt;/code> will not be recreated upon deletion.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>Compute Service Workspace&lt;/em> (previously &lt;em>Negotiation Workspace&lt;/em>) – the workspace owned by the compute service team to hold
the &lt;code>APIExport&lt;/code> (named &lt;code>kubernetes&lt;/code> today) with the synced resources, and &lt;code>SyncTarget&lt;/code> and &lt;code>Location&lt;/code> objects.&lt;/p>
&lt;p>The user binds to the &lt;code>APIExport&lt;/code> called &lt;code>kubernetes&lt;/code> using an &lt;code>APIBinding&lt;/code>. From this moment on, the users&amp;rsquo; workspaces
are subject to placement.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
&lt;p>Binding to a compute service is a permanent decision. Unbinding (i.e. deleting of the APIBinding object) means deletion of the
workload objects.&lt;/p>
&lt;p>It is planned to allow multiple location workspaces for the same compute service, even with different owners.&lt;/p>
&lt;/div>
&lt;h3 id="placement-and-resource-scheduling">Placement and resource scheduling&lt;/h3>
&lt;p>The placement state is one of&lt;/p>
&lt;ul>
&lt;li>&lt;code>Pending&lt;/code> – the placement controller waits for a valid &lt;code>Location&lt;/code> to select&lt;/li>
&lt;li>&lt;code>Bound&lt;/code> – at least one namespace is bound to the placement. When the user updates the spec of the &lt;code>Placement&lt;/code>, the selected location of
the placement will be changed in &lt;code>Bound&lt;/code> state.&lt;/li>
&lt;li>&lt;code>Unbound&lt;/code> – a location is selected by the placement, but no namespace is bound to the placement. When the user updates the spec of the &lt;code>Placement&lt;/code>, the
selected location of the placement will be changed in &lt;code>Unbound&lt;/code> state.&lt;/li>
&lt;/ul>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
Sync targets from different locations can be bound at the same time, while each location can only have one sync target bound to the
namespace.
&lt;/div>
&lt;p>The user interface to influence the placement decisions is the &lt;code>Placement&lt;/code> object. For example, use can create a placement to bind namespace with
label of &amp;ldquo;app=foo&amp;rdquo; to a location with label &amp;ldquo;cloud=aws&amp;rdquo; as below:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">scheduling.kcp.dev/v1alpha1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Placement&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">aws&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">locationSelectors&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">matchLabels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">cloud&lt;/span>: &lt;span style="color:#ae81ff">aws&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">namespaceSelector&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">matchLabels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">foo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">locationWorkspace&lt;/span>: &lt;span style="color:#ae81ff">root:default:location-ws&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>A matched location will be selected for this &lt;code>Placement&lt;/code> at first, which makes the &lt;code>Placement&lt;/code> turns from &lt;code>Pending&lt;/code> to &lt;code>Unbound&lt;/code>. Then if there is at
least one matching Namespace, the Namespace will be annotated with &lt;code>scheduling.kcp.dev/placement&lt;/code> and the placement turns from &lt;code>Unbound&lt;/code> to &lt;code>Bound&lt;/code>.
After this, a &lt;code>SyncTarget&lt;/code> will be selected from the location picked by the placement. &lt;code>state.workload.kcp.dev/&amp;lt;cluster-id&amp;gt;&lt;/code> label with value of &lt;code>Sync&lt;/code> will be set if a valid &lt;code>SyncTarget&lt;/code> is selected.&lt;/p>
&lt;p>The user can create another placement targeted to a different location for this Namespace, e.g.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">scheduling.kcp.dev/v1alpha1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Placement&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">gce&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">locationSelectors&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">matchLabels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">cloud&lt;/span>: &lt;span style="color:#ae81ff">gce&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">namespaceSelector&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">matchLabels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">foo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">locationWorkspace&lt;/span>: &lt;span style="color:#ae81ff">root:default:location-ws&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>which will result in another &lt;code>state.workload.kcp.dev/&amp;lt;cluster-id&amp;gt;&lt;/code> label added to the Namespace, and the Namespace will have two different
&lt;code>state.workload.kcp.dev/&amp;lt;cluster-id&amp;gt;&lt;/code> label.&lt;/p>
&lt;p>Placement is in the &lt;code>Ready&lt;/code> status condition when&lt;/p>
&lt;ol>
&lt;li>selected location matches the &lt;code>Placement&lt;/code> spec.&lt;/li>
&lt;li>selected location exists in the location workspace.&lt;/li>
&lt;/ol>
&lt;h4 id="sync-target-removing">Sync target removing&lt;/h4>
&lt;p>A sync target will be removed when:&lt;/p>
&lt;ol>
&lt;li>corresponding &lt;code>Placement&lt;/code> is deleted.&lt;/li>
&lt;li>corresponding &lt;code>Placement&lt;/code> is not in &lt;code>Ready&lt;/code> condition.&lt;/li>
&lt;li>corresponding &lt;code>SyncTarget&lt;/code> is evicting/not Ready/deleted&lt;/li>
&lt;/ol>
&lt;p>All above cases will make the &lt;code>SyncTarget&lt;/code> represented in the label &lt;code>state.workload.kcp.dev/&amp;lt;cluster-id&amp;gt;&lt;/code> invalid, which will cause
&lt;code>finalizers.workload.kcp.dev/&amp;lt;cluster-id&amp;gt;&lt;/code> annotation with removing time in the format of RFC-3339 added on the Namespace.&lt;/p>
&lt;h3 id="resource-syncing">Resource Syncing&lt;/h3>
&lt;p>As soon as the &lt;code>state.workload.kcp.dev/&amp;lt;cluster-id&amp;gt;&lt;/code> label is set on the Namespace, the workload resource controller will
copy the &lt;code>state.workload.kcp.dev/&amp;lt;cluster-id&amp;gt;&lt;/code> label to the resources in that namespace.&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
In the future, the label on the resources is first set to empty string &lt;code>&amp;quot;&amp;quot;&lt;/code>, and a coordination controller will be
able to apply changes before syncing starts. This includes the ability to add per-location finalizers through the
&lt;code>finalizers.workload.kcp.dev/&amp;lt;cluster-id&amp;gt;&lt;/code> annotation such that the coordination controller gets full control over
the downstream life-cycle of the objects per location (imagine an ingress that blocks downstream removal until the new replicas
have been launched on another sync target). Finally, the coordination controller will replace the empty string with &lt;code>Sync&lt;/code>
such that the state machine continues.
&lt;/div>
&lt;p>With the state label set to &lt;code>Sync&lt;/code>, the syncer will start seeing the resources in the namespace
and starts syncing them downstream, first by creating the namespace. Before syncing, it will also set
a finalizer &lt;code>workload.kcp.dev/syncer-&amp;lt;cluster-id&amp;gt;&lt;/code> on the upstream object in order to delay upstream deletion until
the downstream object is also deleted.&lt;/p>
&lt;p>When the &lt;code>deletion.internal.workload.kcp.dev/&amp;lt;cluster-id&amp;gt;&lt;/code> is added to the Namespace. The virtual workspace apiserver
will translate that annotation into a deletion timestamp on the object the syncer sees. The syncer
notices that as a started deletion flow. As soon as there are no coordination controller finalizers registered via the
&lt;code>finalizers.workload.kcp.dev/&amp;lt;cluster-id&amp;gt;&lt;/code> annotation anymore, the syncer will start a deletion of the downstream object.&lt;/p>
&lt;p>When the downstream deletion is complete, the syncer will remove the finalizer from the upstream object, and the
&lt;code>state.workload.kcp.dev/&amp;lt;cluster-id&amp;gt;&lt;/code> labels gets deleted as well. The syncer stops seeing the object in the virtual
workspace.&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
There is a missing bit in the implementation (in v0.5) about removal of the &lt;code>state.workload.kcp.dev/&amp;lt;cluster-id&amp;gt;&lt;/code>
label from namespaces: the syncer currently does not participate in the namespace deletion state-machine, but has to and signal finished
downstream namespace deletion via &lt;code>state.workload.kcp.dev/&amp;lt;cluster-id&amp;gt;&lt;/code> label removal.
&lt;/div></description></item><item><title>Docs: Publishing a new kcp release</title><link>http://kcp-dev.github.io/docs/kcp-core/concepts/developers/releasing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kcp-dev.github.io/docs/kcp-core/concepts/developers/releasing/</guid><description>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
&lt;p>You currently need write access to the &lt;a href="">kcp-dev/kcp&lt;/a> repository to perform these tasks.&lt;/p>
&lt;p>You also need an available team member with approval permissions from &lt;a href="">https://github.com/openshift/release/blob/master/ci-operator/config/kcp-dev/kcp/OWNERS&lt;/a>.&lt;/p>
&lt;/div>
&lt;h2 id="create-git-tags">Create git tags&lt;/h2>
&lt;h3 id="prerequisite---make-sure-you-have-a-gpg-signing-key">Prerequisite - make sure you have a GPG signing key&lt;/h3>
&lt;ol>
&lt;li>&lt;a href="">https://docs.github.com/en/authentication/managing-commit-signature-verification/generating-a-new-gpg-key&lt;/a>&lt;/li>
&lt;li>&lt;a href="">https://docs.github.com/en/authentication/managing-commit-signature-verification/adding-a-gpg-key-to-your-github-account&lt;/a>&lt;/li>
&lt;li>&lt;a href="">https://docs.github.com/en/authentication/managing-commit-signature-verification/telling-git-about-your-signing-key&lt;/a>&lt;/li>
&lt;/ol>
&lt;h3 id="create-the-tags">Create the tags&lt;/h3>
&lt;p>kcp has 2 go modules, and a unique tag is needed for each module every time we create a new release.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>git fetch&lt;/code> from the main kcp repository (kcp-dev/kcp) to ensure you have the latest commits&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Tag the main module&lt;/p>
&lt;ol>
&lt;li>If your git remote for kcp-dev/kcp is named something other than &lt;code>upstream&lt;/code>, change &lt;code>REF&lt;/code> accordingly&lt;/li>
&lt;li>If you are creating a release from a release branch, change &lt;code>main&lt;/code> in &lt;code>REF&lt;/code> accordingly, or you can
make &lt;code>REF&lt;/code> a commit hash.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>REF&lt;span style="color:#f92672">=&lt;/span>upstream/main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TAG&lt;span style="color:#f92672">=&lt;/span>v1.2.3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git tag --sign --message &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$TAG&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$TAG&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$REF&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Tag the &lt;code>pkg/apis&lt;/code> module, following the same logic as above for &lt;code>REF&lt;/code> and &lt;code>TAG&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>REF&lt;span style="color:#f92672">=&lt;/span>upstream/main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TAG&lt;span style="color:#f92672">=&lt;/span>v1.2.3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git tag --sign --message &lt;span style="color:#e6db74">&amp;#34;pkg/apis/&lt;/span>$TAG&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;pkg/apis/&lt;/span>$TAG&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$REF&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h3 id="push-the-tags">Push the tags&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>REMOTE&lt;span style="color:#f92672">=&lt;/span>upstream
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TAG&lt;span style="color:#f92672">=&lt;/span>v1.2.3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git push &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$REMOTE&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$TAG&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;pkg/apis/&lt;/span>$TAG&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="if-its-a-new-minor-version">If it&amp;rsquo;s a new minor version&lt;/h2>
&lt;p>If this is the first release of a new minor version (e.g. the last release was v0.7.x, and you are releasing the first
0.8.x version), follow the following steps.&lt;/p>
&lt;p>Otherwise, you can skip to &lt;a href="">Review/edit/publish the release in GitHub&lt;/a>&lt;/p>
&lt;h3 id="create-a-release-branch">Create a release branch&lt;/h3>
&lt;p>Set &lt;code>REMOTE&lt;/code>, &lt;code>REF&lt;/code>, and &lt;code>VERSION&lt;/code> as appropriate.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>REMOTE&lt;span style="color:#f92672">=&lt;/span>upstream
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>REF&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>$REMOTE&lt;span style="color:#e6db74">/main&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>VERSION&lt;span style="color:#f92672">=&lt;/span>1.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git checkout -b &lt;span style="color:#e6db74">&amp;#34;release-&lt;/span>$VERSION&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$REF&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git push &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$REMOTE&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;release-&lt;/span>$VERSION&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="configure-prow-for-the-new-release-branch">Configure prow for the new release branch&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>Make sure you have &lt;a href="">openshift/release&lt;/a> cloned&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Create a new branch&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Copy &lt;code>ci-operator/config/kcp-dev/kcp/kcp-dev-kcp-main.yaml&lt;/code> to &lt;code>ci-operator/config/kcp-dev/kcp/kcp-dev-kcp-release-&amp;lt;version&amp;gt;.yaml&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Edit the new file&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Change &lt;code>main&lt;/code> to the name of the release branch, such as &lt;code>release-0.8&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">zz_generated_metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">branch&lt;/span>: &lt;span style="color:#ae81ff">main&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Change &lt;code>latest&lt;/code> to the name of the release branch&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">promotion&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">kcp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tag&lt;/span>: &lt;span style="color:#ae81ff">latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tag_by_commit&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Edit &lt;code>core-services/prow/02_config/kcp-dev/kcp/_prowconfig.yaml&lt;/code>&lt;/p>
&lt;ol>
&lt;li>Copy the &lt;code>main&lt;/code> branch configuration to a new &lt;code>release-x.y&lt;/code> entry&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Run &lt;code>make update&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Add the new/updated files and commit your changes&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Push your branch to your fork&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Open a pull request&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Wait for it to be reviewed and merged&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="update-testgrid">Update testgrid&lt;/h3>
&lt;ol>
&lt;li>Make sure you have a clone of &lt;a href="">kubernetes/test-infra&lt;/a>&lt;/li>
&lt;li>Edit config/testgrids/kcp/kcp.yaml
&lt;ol>
&lt;li>In the &lt;code>test_groups&lt;/code> section:
&lt;ol>
&lt;li>Copy all the entries under &lt;code># main&lt;/code> to the bottom of the map&lt;/li>
&lt;li>Rename &lt;code>-main-&lt;/code> to &lt;code>-release-&amp;lt;version&amp;gt;-&lt;/code>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>In the &lt;code>dashboard_groups&lt;/code> section:
&lt;ol>
&lt;li>Add a new entry under &lt;code>dashboard_names&lt;/code> for &lt;code>kcp-release-&amp;lt;version&amp;gt;&lt;/code>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>In the &lt;code>dashboards&lt;/code> section:
&lt;ol>
&lt;li>Copy the &lt;code>kcp-main&lt;/code> entry, including &lt;code>dashboard_tab&lt;/code> and all its entries, to a new entry called &lt;code>kcp-release-&amp;lt;version&amp;gt;&lt;/code>&lt;/li>
&lt;li>Rename &lt;code>main&lt;/code> to &lt;code>release-&amp;lt;version&amp;gt;&lt;/code> in the new entry&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Commit your changes&lt;/li>
&lt;li>Push your branch to your fork&lt;/li>
&lt;li>Open a pull request&lt;/li>
&lt;li>Wait for it to be reviewed and merged&lt;/li>
&lt;/ol>
&lt;h2 id="revieweditpublish-the-release-in-github">Review/edit/publish the release in GitHub&lt;/h2>
&lt;p>The &lt;a href="">goreleaser&lt;/a> workflow automatically creates a draft GitHub release for each tag.&lt;/p>
&lt;ol>
&lt;li>Navigate to the draft release for the tag you just pushed. You&amp;rsquo;ll be able to find it under the &lt;a href="">releases&lt;/a> page.&lt;/li>
&lt;li>If the release notes have been pre-populated, delete them.&lt;/li>
&lt;li>For the &amp;ldquo;previous tag,&amp;rdquo; select the most recent, appropriate tag as the starting point
&lt;ol>
&lt;li>If this is a new minor release (e.g. v0.8.0), select the initial version of the previous minor release (e.g. v0.7.0)&lt;/li>
&lt;li>If this is a patch release (e.g. v0.8.7), select the previous patch release (e.g. v0.8.6)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Click &amp;ldquo;Generate release notes&amp;rdquo;&lt;/li>
&lt;li>Publish the release&lt;/li>
&lt;/ol>
&lt;h2 id="notify">Notify&lt;/h2>
&lt;ol>
&lt;li>Create an email addressed to &lt;a href="">kcp-dev@googlegroups.com&lt;/a> and &lt;a href="">kcp-users@googlegroups.com&lt;/a>
&lt;ol>
&lt;li>Subject: &lt;code>[release] &amp;lt;version&amp;gt;&lt;/code> e.g. &lt;code>[release] v0.8.0&lt;/code>&lt;/li>
&lt;li>In the body, include noteworthy changes&lt;/li>
&lt;li>Provide a link to the release in GitHub for the full release notes&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Post a message in the &lt;a href="">#kcp-dev&lt;/a> Slack channel&lt;/li>
&lt;/ol></description></item><item><title>Docs: Self-service policy</title><link>http://kcp-dev.github.io/docs/kcp-core/concepts/investigations/self-service-policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kcp-dev.github.io/docs/kcp-core/concepts/investigations/self-service-policy/</guid><description>
&lt;h2 id="goal">Goal&lt;/h2>
&lt;p>Improve consistency and reusability of self-service and policy enforcement across multiple Kubernetes clusters.&lt;/p>
&lt;blockquote>
&lt;p>Just like Kubernetes standardized deploying containerized software onto a small set of machines, we want to standardize self-service of application focused integration across multiple teams with organizational control.&lt;/p>
&lt;/blockquote>
&lt;p>Or possibly&lt;/p>
&lt;blockquote>
&lt;p>Kubernetes standardized deploying applications into chunks of capacity. We want to standardize isolating and integrating application teams across organizations, and to do that in a way that makes applications everywhere more secure.&lt;/p>
&lt;/blockquote>
&lt;h2 id="problem">Problem&lt;/h2>
&lt;p>A key component of large Kubernetes clusters is shared use, where the usage pattern might vary from externally controlled (via gitops / existing operational tools) to a permissive self-service model. The most common partitioning model in Kubernetes is namespace, and the second most common model is cluster.&lt;/p>
&lt;p>Self-service is currently limited by the set of resources that are namespace scoped for the former, and by the need to parameterize and configure multiple clusters consistently for the latter. Cluster partitioning can uniquely offer distinct sets of APIs to consumers. Namespace partitioning is cheap up until the scale limits of the cluster (~10k namespaces), while cluster partitioning usually has a fixed cost per cluster in operational and resource usage, as well as lower total utilization.&lt;/p>
&lt;p>Once a deployment reaches the scale limit of a single cluster, operators often need to redefine their policies and tools to work in a multi-cluster environment. Many large deployers create their own systems for managing self-service policy above their clusters and leverage individual subsystems within Kubernetes to accomplish those goals.&lt;/p>
&lt;h2 id="approach">Approach&lt;/h2>
&lt;p>The logical cluster concept offers an opportunity to allow self-service at a cluster scope, with the effective cost of the namespace partitioning scheme. In addition, the separation of workload at control plane (kcp) and data plane (physical cluster) via &lt;a href="http://kcp-dev.github.io/docs/kcp-core/concepts/investigations/transparent-multi-cluster/">transparent multi-cluster&lt;/a> or similar schemes allows strong policy control of what configuration is allowed (reject early), restriction of the supported API surface area for workload APIs (limit / control certain fields like pod security), and limits the access of individual users to the underlying infra (much like clusters limit access to nodes).&lt;/p>
&lt;p>It should be possible to accomplish current self-service namespace and cluster partitioning via the logical cluster mechanism + policy enforcement, and to incentivize a wider range of &amp;ldquo;external policy control&amp;rdquo; users to adopt self-service via stronger control points and desirable use cases (multi-cluster resiliency for apps).&lt;/p>
&lt;p>We want to enable concrete points of injection of policy that are difficult today in Kubernetes tenancy:&lt;/p>
&lt;ol>
&lt;li>The acquisition of a new logical cluster with &lt;strong>capabilities&lt;/strong> and &lt;strong>constraints&lt;/strong>&lt;/li>
&lt;li>How the APIs in a logical cluster are &lt;strong>transformed&lt;/strong> to an underlying cluster&lt;/li>
&lt;li>How to manage the evolution of APIs available to a logical cluster over time&lt;/li>
&lt;li>New hierarchal policy options are more practical since different logical clusters can have different APIs&lt;/li>
&lt;/ol>
&lt;h2 id="areas-of-investigation">Areas of investigation&lt;/h2>
&lt;ul>
&lt;li>Using logical clusters as a mechanism for tenancy, but having a backing implementation that can change
&lt;ul>
&lt;li>I.e. materialize logical clusters as an API resource in a separate logical cluster&lt;/li>
&lt;li>Or implementing logical clusters outside the system and having the kcp server implementation be a shim&lt;/li>
&lt;li>Formal &amp;ldquo;policy module&amp;rdquo; implementations that can be plugged into a minimal API server while using logical cluster impl&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Catalog the set of tenancy constructs in use in Kube
&lt;ul>
&lt;li>Draw heavily on sig-multitenancy explorations - work done by &lt;a href="">cluster api nested&lt;/a>, &lt;a href="">virtual clusters&lt;/a>, namespace tenancy, and &lt;a href="">hierarchal namespace&lt;/a> designs&lt;/li>
&lt;li>Look at reference materials created by large organizational adopters of Kube&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Consider making &amp;ldquo;cost&amp;rdquo; a first class control concept alongside quota and RBAC (i.e. a service load balancer &amp;ldquo;costs&amp;rdquo; $1, whereas a regular service costs $0.001)
&lt;ul>
&lt;li>Could this more effectively limit user action&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Explore hierarchy of policy - if logical clusters are selectable by label, could you have composability of policy using controllers&lt;/li>
&lt;li>Explore using implicit resources
&lt;ul>
&lt;li>i.e. within a logical cluster have all resources of type RoleBinding be fetched from two sources - within the cluster, and in a separate logical cluster - and merged, so that you could change the global source and watches would still fire&lt;/li>
&lt;li>Impliict resources have risk though - no way to &amp;ldquo;lock&amp;rdquo; them so the consequences of an implicit change can be expensive&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="progress">Progress&lt;/h2>
&lt;h3 id="simple-example-of-a-policy-implementation">Simple example of a policy implementation&lt;/h3>
&lt;p>Building out an example flow that goes from creating a logical cluster resource that results in a logical cluster being accessible to client, with potential hook points for deeper integration.&lt;/p>
&lt;h3 id="describe-a-complicated-policy-implementation">Describe a complicated policy implementation&lt;/h3>
&lt;p>An example hosted multi-tenant service with billing, organizational policy, and tenancy isolation.&lt;/p></description></item><item><title>Docs: Registering Kubernetes Clusters using syncer</title><link>http://kcp-dev.github.io/docs/kcp-core/concepts/syncer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kcp-dev.github.io/docs/kcp-core/concepts/syncer/</guid><description>
&lt;p>In order to register a Kubernetes clusters with the kcp server,
users have to install a special component named &lt;a href="">syncer&lt;/a>.&lt;/p>
&lt;h2 id="requirements">Requirements&lt;/h2>
&lt;ul>
&lt;li>kcp server&lt;/li>
&lt;li>&lt;a href="http://kcp-dev.github.io/docs/kcp-core/concepts/kubectl-kcp-plugin/">kcp kubectl plugin&lt;/a>&lt;/li>
&lt;li>kubernetes cluster&lt;/li>
&lt;/ul>
&lt;h2 id="instructions">Instructions&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>(Optional) Skip this step, if you already have a physical cluster.
Create a kind cluster to back the sync target:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ kind create cluster
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Creating cluster &lt;span style="color:#e6db74">&amp;#34;kind&amp;#34;&lt;/span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;snip&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Set kubectl context to &lt;span style="color:#e6db74">&amp;#34;kind-kind&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>You can now use your cluster with:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubectl cluster-info --context kind-kind
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
This step sets current context to the new kind cluster. Make sure to use a KCP kubeconfig for the next steps unless told otherwise.
&lt;/div>
&lt;ol>
&lt;li>
&lt;p>Create an organisation and immediately enter it:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ kubectl kcp workspace create my-org --enter
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Workspace &lt;span style="color:#e6db74">&amp;#34;my-org&amp;#34;&lt;/span> &lt;span style="color:#f92672">(&lt;/span>type root:organization&lt;span style="color:#f92672">)&lt;/span> created. Waiting &lt;span style="color:#66d9ef">for&lt;/span> it to be ready...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Workspace &lt;span style="color:#e6db74">&amp;#34;my-org&amp;#34;&lt;/span> &lt;span style="color:#f92672">(&lt;/span>type root:organization&lt;span style="color:#f92672">)&lt;/span> is ready to use.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Current workspace is &lt;span style="color:#e6db74">&amp;#34;root:my-org&amp;#34;&lt;/span> &lt;span style="color:#f92672">(&lt;/span>type &lt;span style="color:#e6db74">&amp;#34;root:organization&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Enable the syncer for a p-cluster:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>kubectl kcp workload sync &amp;lt;mycluster&amp;gt; --syncer-image &amp;lt;image name&amp;gt; -o syncer.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Where &lt;code>&amp;lt;image name&amp;gt;&lt;/code> &lt;a href="">one of the syncer images&lt;/a> for your corresponding KCP release (e.g. &lt;code>ghcr.io/kcp-dev/kcp/syncer:v0.7.5&lt;/code>).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Apply the manifest to the p-cluster:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ KUBECONFIG&lt;span style="color:#f92672">=&lt;/span>&amp;lt;pcluster-config&amp;gt; kubectl apply -f syncer.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>namespace/kcp-syncer-kind-1owee1ci created
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>serviceaccount/kcp-syncer-kind-1owee1ci created
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>secret/kcp-syncer-kind-1owee1ci-token created
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>clusterrole.rbac.authorization.k8s.io/kcp-syncer-kind-1owee1ci created
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>clusterrolebinding.rbac.authorization.k8s.io/kcp-syncer-kind-1owee1ci created
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>secret/kcp-syncer-kind-1owee1ci created
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>deployment.apps/kcp-syncer-kind-1owee1ci created
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>and it will create a &lt;code>kcp-syncer&lt;/code> deployment:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ KUBECONFIG&lt;span style="color:#f92672">=&lt;/span>&amp;lt;pcluster-config&amp;gt; kubectl -n kcp-syncer-kind-1owee1ci get deployments
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME READY UP-TO-DATE AVAILABLE AGE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kcp-syncer 1/1 &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> 13m
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Wait for the kcp sync target to go ready:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl wait --for&lt;span style="color:#f92672">=&lt;/span>condition&lt;span style="color:#f92672">=&lt;/span>Ready synctarget/&amp;lt;mycluster&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h3 id="running-a-workload">Running a workload&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>Create a deployment:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>kubectl create deployment kuard --image gcr.io/kuar-demo/kuard-amd64:blue
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
Replace &amp;ldquo;gcr.io/kuar-demo/kuard-amd64:blue&amp;rdquo; with &amp;ldquo;gcr.io/kuar-demo/kuard-arm64:blue&amp;rdquo; in case you&amp;rsquo;re running
an Apple M1 based virtual machine.
&lt;/div>
&lt;ol>
&lt;li>
&lt;p>Verify the deployment on the local workspace:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ kubectl rollout status deployment/kuard
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Waiting &lt;span style="color:#66d9ef">for&lt;/span> deployment &lt;span style="color:#e6db74">&amp;#34;kuard&amp;#34;&lt;/span> rollout to finish: &lt;span style="color:#ae81ff">0&lt;/span> of &lt;span style="color:#ae81ff">1&lt;/span> updated replicas are available...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>deployment &lt;span style="color:#e6db74">&amp;#34;kuard&amp;#34;&lt;/span> successfully rolled out
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="for-syncer-development">For syncer development&lt;/h2>
&lt;h3 id="running-in-a-kind-cluster-with-a-local-registry">Running in a kind cluster with a local registry&lt;/h3>
&lt;p>You can run the syncer in a kind cluster for development.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Create a &lt;code>kind&lt;/code> cluster with a local registry to simplify syncer development
by executing the following script:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>/bin/bash -c &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>curl -fsSL https://raw.githubusercontent.com/kubernetes-sigs/kind/main/site/static/examples/kind-with-registry.sh&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Install &lt;code>ko&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>go install github.com/google/ko@latest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Build image and push to the local registry integrated with &lt;code>kind&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>KO_DOCKER_REPO&lt;span style="color:#f92672">=&lt;/span>localhost:5001 ko publish ./cmd/syncer -t &amp;lt;image tag&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>By default &lt;code>ko&lt;/code> will build for &lt;code>amd64&lt;/code>. To build for &lt;code>arm64&lt;/code>
(e.g. apple silicon), specify &lt;code>--platform=linux/arm64&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Create an organisation and immediately enter it:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ kubectl kcp workspace create my-org --enter
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Workspace &lt;span style="color:#e6db74">&amp;#34;my-org&amp;#34;&lt;/span> &lt;span style="color:#f92672">(&lt;/span>type root:organization&lt;span style="color:#f92672">)&lt;/span> created. Waiting &lt;span style="color:#66d9ef">for&lt;/span> it to be ready...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Workspace &lt;span style="color:#e6db74">&amp;#34;my-org&amp;#34;&lt;/span> &lt;span style="color:#f92672">(&lt;/span>type root:organization&lt;span style="color:#f92672">)&lt;/span> is ready to use.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Current workspace is &lt;span style="color:#e6db74">&amp;#34;root:my-org&amp;#34;&lt;/span> &lt;span style="color:#f92672">(&lt;/span>type &lt;span style="color:#e6db74">&amp;#34;root:organization&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>To use the image pushed to the local registry, supply &lt;code>&amp;lt;image name&amp;gt;&lt;/code> to the
&lt;code>kcp workload sync&lt;/code> plugin command, where &lt;code>&amp;lt;image name&amp;gt;&lt;/code> is
from the output of &lt;code>ko publish&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>kubectl kcp workload sync &amp;lt;mycluster&amp;gt; --syncer-image &amp;lt;image name&amp;gt; -o syncer.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Apply the manifest to the p-cluster:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ KUBECONFIG&lt;span style="color:#f92672">=&lt;/span>&amp;lt;pcluster-config&amp;gt; kubectl apply -f syncer.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>namespace/kcp-syncer-kind-1owee1ci created
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>serviceaccount/kcp-syncer-kind-1owee1ci created
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>secret/kcp-syncer-kind-1owee1ci-token created
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>clusterrole.rbac.authorization.k8s.io/kcp-syncer-kind-1owee1ci created
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>clusterrolebinding.rbac.authorization.k8s.io/kcp-syncer-kind-1owee1ci created
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>secret/kcp-syncer-kind-1owee1ci created
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>deployment.apps/kcp-syncer-kind-1owee1ci created
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>and it will create a &lt;code>kcp-syncer&lt;/code> deployment:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ KUBECONFIG&lt;span style="color:#f92672">=&lt;/span>&amp;lt;pcluster-config&amp;gt; kubectl -n kcp-syncer-kind-1owee1ci get deployments
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME READY UP-TO-DATE AVAILABLE AGE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kcp-syncer 1/1 &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> 13m
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Wait for the kcp sync target to go ready:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl wait --for&lt;span style="color:#f92672">=&lt;/span>condition&lt;span style="color:#f92672">=&lt;/span>Ready synctarget/&amp;lt;mycluster&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h3 id="running-locally">Running locally&lt;/h3>
&lt;p>TODO(m1kola): we need a less hacky way to run locally: needs to be more close
to what we have when running inside the kind with own kubeconfig.&lt;/p>
&lt;p>This assumes that KCP is also being run locally.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Create a kind cluster to back the sync target:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ kind create cluster
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Creating cluster &lt;span style="color:#e6db74">&amp;#34;kind&amp;#34;&lt;/span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;snip&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Set kubectl context to &lt;span style="color:#e6db74">&amp;#34;kind-kind&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>You can now use your cluster with:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubectl cluster-info --context kind-kind
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Make sure to use kubeconfig for your local KCP:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>export KUBECONFIG&lt;span style="color:#f92672">=&lt;/span>.kcp/admin.kubeconfig
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Create an organisation and immediately enter it:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ kubectl kcp workspace create my-org --enter
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Workspace &lt;span style="color:#e6db74">&amp;#34;my-org&amp;#34;&lt;/span> &lt;span style="color:#f92672">(&lt;/span>type root:organization&lt;span style="color:#f92672">)&lt;/span> created. Waiting &lt;span style="color:#66d9ef">for&lt;/span> it to be ready...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Workspace &lt;span style="color:#e6db74">&amp;#34;my-org&amp;#34;&lt;/span> &lt;span style="color:#f92672">(&lt;/span>type root:organization&lt;span style="color:#f92672">)&lt;/span> is ready to use.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Current workspace is &lt;span style="color:#e6db74">&amp;#34;root:my-org&amp;#34;&lt;/span> &lt;span style="color:#f92672">(&lt;/span>type &lt;span style="color:#e6db74">&amp;#34;root:organization&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Enable the syncer for a p-cluster:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>kubectl kcp workload sync &amp;lt;mycluster&amp;gt; --syncer-image &amp;lt;image name&amp;gt; -o syncer.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>&amp;lt;image name&amp;gt;&lt;/code> can be anything here as it will only be used to generate &lt;code>syncer.yaml&lt;/code> which we are not going to apply.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Gather data required for the syncer:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>syncTargetName&lt;span style="color:#f92672">=&lt;/span>&amp;lt;mycluster&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>syncTargetUID&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>kubectl get synctarget $syncTargetName -o jsonpath&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{.metadata.uid}&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fromCluster&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>kubectl ws current --short&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Run the following snippet:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>go run ./cmd/syncer &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --from-kubeconfig&lt;span style="color:#f92672">=&lt;/span>.kcp/admin.kubeconfig &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --from-context&lt;span style="color:#f92672">=&lt;/span>base &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --to-kubeconfig&lt;span style="color:#f92672">=&lt;/span>$HOME/.kube/config &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --sync-target-name&lt;span style="color:#f92672">=&lt;/span>$syncTargetName &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --sync-target-uid&lt;span style="color:#f92672">=&lt;/span>$syncTargetUID &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --from-cluster&lt;span style="color:#f92672">=&lt;/span>$fromCluster &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --resources&lt;span style="color:#f92672">=&lt;/span>configmaps &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --resources&lt;span style="color:#f92672">=&lt;/span>deployments.apps &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --resources&lt;span style="color:#f92672">=&lt;/span>secrets &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --resources&lt;span style="color:#f92672">=&lt;/span>serviceaccounts &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --qps&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">30&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --burst&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">20&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Wait for the kcp sync target to go ready:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl wait --for&lt;span style="color:#f92672">=&lt;/span>condition&lt;span style="color:#f92672">=&lt;/span>Ready synctarget/&amp;lt;mycluster&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol></description></item><item><title>Docs: Quickstart: Tenancy and APIs</title><link>http://kcp-dev.github.io/docs/kcp-core/concepts/quickstart-tenancy-and-apis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kcp-dev.github.io/docs/kcp-core/concepts/quickstart-tenancy-and-apis/</guid><description>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;p>A running kcp server, as per &lt;a href="">README.md&lt;/a>.&lt;/p>
&lt;h2 id="set-your-kubeconfig">Set your KUBECONFIG&lt;/h2>
&lt;p>To access a workspace, you need credentials and an Kubernetes API server URL for the workspace, both of which are stored
in a &lt;code>kubeconfig&lt;/code> file.&lt;/p>
&lt;p>The default context in the kcp-provided &lt;code>admin.kubeconfig&lt;/code> gives access to the &lt;code>root&lt;/code> workspace as the &lt;code>kcp-admin&lt;/code> user.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ export KUBECONFIG&lt;span style="color:#f92672">=&lt;/span>.kcp/admin.kubeconfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ kubectl config get-contexts
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CURRENT NAME CLUSTER AUTHINFO NAMESPACE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> base base kcp-admin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>* root root kcp-admin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> system:admin base shard-admin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can use API discovery to see what resources are available in this &lt;code>root&lt;/code> workspace. We&amp;rsquo;re here to explore the
&lt;code>tenancy.kcp.dev&lt;/code> and &lt;code>apis.kcp.dev&lt;/code> resources.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ kubectl api-resources
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME SHORTNAMES APIVERSION NAMESPACED KIND
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>configmaps cm v1 true ConfigMap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>events ev v1 true Event
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apibindings apis.kcp.dev/v1alpha1 false APIBinding
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiexports apis.kcp.dev/v1alpha1 false APIExport
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>workspaces ws tenancy.kcp.dev/v1beta1 false Workspace
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="create-and-navigate-some-workspaces">Create and navigate some workspaces&lt;/h2>
&lt;p>The &lt;code>ws&lt;/code> plugin for &lt;code>kubectl&lt;/code> makes it easy to switch your &lt;code>kubeconfig&lt;/code> between workspaces, and to create new ones:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ kubectl ws .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Current workspace is &lt;span style="color:#e6db74">&amp;#34;root&amp;#34;&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ kubectl ws create a --enter
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Workspace &lt;span style="color:#e6db74">&amp;#34;a&amp;#34;&lt;/span> &lt;span style="color:#f92672">(&lt;/span>type root:organization&lt;span style="color:#f92672">)&lt;/span> created. Waiting &lt;span style="color:#66d9ef">for&lt;/span> it to be ready...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Workspace &lt;span style="color:#e6db74">&amp;#34;a&amp;#34;&lt;/span> &lt;span style="color:#f92672">(&lt;/span>type root:organization&lt;span style="color:#f92672">)&lt;/span> is ready to use.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Current workspace is &lt;span style="color:#e6db74">&amp;#34;root:a&amp;#34;&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ kubectl ws create b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Workspace &lt;span style="color:#e6db74">&amp;#34;b&amp;#34;&lt;/span> &lt;span style="color:#f92672">(&lt;/span>type root:universal&lt;span style="color:#f92672">)&lt;/span> created. Waiting &lt;span style="color:#66d9ef">for&lt;/span> it to be ready...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Workspace &lt;span style="color:#e6db74">&amp;#34;b&amp;#34;&lt;/span> &lt;span style="color:#f92672">(&lt;/span>type root:universal&lt;span style="color:#f92672">)&lt;/span> is ready to use.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ kubectl get workspaces
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME TYPE PHASE URL
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>b universal Ready https://myhost:6443/clusters/root:a:b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ kubectl ws b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Current workspace is &lt;span style="color:#e6db74">&amp;#34;root:a:b&amp;#34;&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ kubectl ws ..
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Current workspace is &lt;span style="color:#e6db74">&amp;#34;root:a&amp;#34;&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ kubectl ws -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Current workspace is &lt;span style="color:#e6db74">&amp;#34;root:a:b&amp;#34;&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ kubectl ws root
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Current workspace is &lt;span style="color:#e6db74">&amp;#34;root&amp;#34;&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ kubectl get workspaces
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME TYPE PHASE URL
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a organization Ready https://myhost:6443/clusters/root:a
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Our &lt;code>kubeconfig&lt;/code> now contains two additional contexts, one which represents the current workspace, and the other to keep
track of our most recently used workspace. This highlights that the &lt;code>kubectl ws&lt;/code> plugin is primarily a convenience
wrapper for managing a &lt;code>kubeconfig&lt;/code> that can be used for working within a workspace.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ kubectl config get-contexts
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CURRENT NAME CLUSTER AUTHINFO NAMESPACE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> base base kcp-admin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> root root kcp-admin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> system:admin base shard-admin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>* workspace.kcp.dev/current workspace.kcp.dev/current kcp-admin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> workspace.kcp.dev/previous workspace.kcp.dev/previous kcp-admin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="understand-workspace-types">Understand workspace types&lt;/h2>
&lt;p>As we can see above, workspaces can contain sub-workspaces, and workspaces have different types. A workspace type
defines which sub-workspace types can be created under such workspaces. So, for example:&lt;/p>
&lt;ul>
&lt;li>A universal workspace is the base workspace type that most other workspace types inherit from - they may contain other
universal workspaces, and they have a &amp;ldquo;default&amp;rdquo; namespace&lt;/li>
&lt;li>The root workspace primarily contains organization workspaces&lt;/li>
&lt;li>An organization workspace can contain universal workspaces, or can be further subdivided using team workspaces&lt;/li>
&lt;/ul>
&lt;p>The final type of workspace is &amp;ldquo;home workspaces&amp;rdquo;. These are workspaces that are intended to be used privately by
individual users. They appear under the &lt;code>root:users&lt;/code> workspace (type &lt;code>homeroot&lt;/code>) and they are further organized into a
hierarchy of &lt;code>homebucket&lt;/code> workspaces based on a hash of their name.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ kubectl ws
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Current workspace is &lt;span style="color:#e6db74">&amp;#34;root:users:zu:yc:kcp-admin&amp;#34;&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ kubectl ws root
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Current workspace is &lt;span style="color:#e6db74">&amp;#34;root&amp;#34;&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ kubectl get workspaces
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME TYPE PHASE URL
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a organization Ready https://myhost:6443/clusters/root:a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>users homeroot Ready https://myhost:6443/clusters/root:users
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Workspace types and their behaviors are defined using the &lt;code>ClusterWorkspaceType&lt;/code> resource:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ kubectl get clusterworkspacetypes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME AGE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>home 74m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>homebucket 74m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>homeroot 74m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>organization 74m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root 74m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>team 74m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>universal 74m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ kubectl describe clusterworkspacetype/team
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Name: team
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>API Version: tenancy.kcp.dev/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Kind: ClusterWorkspaceType
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Default Child Workspace Type:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Name: universal
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Path: root
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Extend:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> With:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Name: universal
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Path: root
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Limit Allowed Parents:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Types:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Name: organization
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Path: root
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Name: team
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Path: root
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Status:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Conditions:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Status: True
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Type: Ready
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="workspaces-faqs">Workspaces FAQs&lt;/h2>
&lt;p>Q: Why do we have both &lt;code>ClusterWorkspaces&lt;/code> and &lt;code>Workspaces&lt;/code>?&lt;/p>
&lt;p>A: &lt;code>Workspaces&lt;/code> are intended to be the user-facing resource, whereas &lt;code>ClusterWorkspaces&lt;/code> is a low-level resource for kcp
platform admins.&lt;/p>
&lt;p>&lt;code>Workspaces&lt;/code> are actually a &amp;ldquo;projected resource&amp;rdquo;, there is no such resource stored in etcd, instead it is served as a
transformation of the &lt;code>ClusterWorkspace&lt;/code> resource. &lt;code>ClusterWorkspaces&lt;/code> contain details like shard assignment, which are
low-level fields that users should not see.&lt;/p>
&lt;p>We are working on a change of this system behind the scenes. That will probably promote Workspaces to a normal,
non-projected resource, and ClusterWorkspaces will change in its role.&lt;/p>
&lt;h2 id="publish-some-apis-as-a-service-provider">Publish some APIs as a service provider&lt;/h2>
&lt;p>kcp offers &lt;code>APIExport&lt;/code> and &lt;code>APIBinding&lt;/code> resources which allow a service provider operating in one workspace to offer its
capabilities to service consumers in other workspaces.&lt;/p>
&lt;p>First we&amp;rsquo;ll create an organization workspace, and then within that create a service provider workspace.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ kubectl ws create wildwest --enter
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Workspace &lt;span style="color:#e6db74">&amp;#34;wildwest&amp;#34;&lt;/span> &lt;span style="color:#f92672">(&lt;/span>type root:organization&lt;span style="color:#f92672">)&lt;/span> created. Waiting &lt;span style="color:#66d9ef">for&lt;/span> it to be ready...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Workspace &lt;span style="color:#e6db74">&amp;#34;wildwest&amp;#34;&lt;/span> &lt;span style="color:#f92672">(&lt;/span>type root:organization&lt;span style="color:#f92672">)&lt;/span> is ready to use.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Current workspace is &lt;span style="color:#e6db74">&amp;#34;root:wildwest&amp;#34;&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ kubectl ws create cowboys-service --enter
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Workspace &lt;span style="color:#e6db74">&amp;#34;cowboys-service&amp;#34;&lt;/span> &lt;span style="color:#f92672">(&lt;/span>type root:universal&lt;span style="color:#f92672">)&lt;/span> created. Waiting &lt;span style="color:#66d9ef">for&lt;/span> it to be ready...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Workspace &lt;span style="color:#e6db74">&amp;#34;cowboys-service&amp;#34;&lt;/span> &lt;span style="color:#f92672">(&lt;/span>type root:universal&lt;span style="color:#f92672">)&lt;/span> is ready to use.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Current workspace is &lt;span style="color:#e6db74">&amp;#34;root:wildwest:cowboys-service&amp;#34;&lt;/span>.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then we&amp;rsquo;ll use a CRD to generate an &lt;code>APIResourceSchema&lt;/code> and &lt;code>APIExport&lt;/code> and apply these within the service provider
workspace.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ mkdir wildwest-schemas/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ./bin/apigen --input-dir test/e2e/customresourcedefinition/ --output-dir wildwest-schemas/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ls -1 wildwest-schemas/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiexport-wildwest.dev.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiresourceschema-cowboys.wildwest.dev.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ kubectl apply -f wildwest-schemas/apiresourceschema-cowboys.wildwest.dev.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiresourceschema.apis.kcp.dev/v220920-6039d110.cowboys.wildwest.dev created
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ kubectl apply -f wildwest-schemas/apiexport-wildwest.dev.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiexport.apis.kcp.dev/wildwest.dev created
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can think of an &lt;code>APIResourceSchema&lt;/code> as being equivalent to a CRD, and an &lt;code>APIExport&lt;/code> makes a set of schemas
available to consumers.&lt;/p>
&lt;h2 id="use-those-apis-as-a-service-consumer">Use those APIs as a service consumer&lt;/h2>
&lt;p>Now we can adopt the service consumer persona and create a workspace from which we will use this new &lt;code>APIExport&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ kubectl ws
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Current workspace is &lt;span style="color:#e6db74">&amp;#34;root:users:zu:yc:kcp-admin&amp;#34;&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ kubectl ws create --enter test-consumer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Workspace &lt;span style="color:#e6db74">&amp;#34;test-consumer&amp;#34;&lt;/span> &lt;span style="color:#f92672">(&lt;/span>type root:universal&lt;span style="color:#f92672">)&lt;/span> created. Waiting &lt;span style="color:#66d9ef">for&lt;/span> it to be ready...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Workspace &lt;span style="color:#e6db74">&amp;#34;test-consumer&amp;#34;&lt;/span> &lt;span style="color:#f92672">(&lt;/span>type root:universal&lt;span style="color:#f92672">)&lt;/span> is ready to use.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Current workspace is &lt;span style="color:#e6db74">&amp;#34;root:users:zu:yc:kcp-admin:test-consumer&amp;#34;&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ kubectl apply -f - &lt;span style="color:#e6db74">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">apiVersion: apis.kcp.dev/v1alpha1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">kind: APIBinding
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">metadata:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> name: cowboys
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">spec:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> reference:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> workspace:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> path: root:wildwest:cowboys-service
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> exportName: wildwest.dev
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apibinding.apis.kcp.dev/cowboys created
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now this resource type is available for use within our workspace, so
let&amp;rsquo;s create an instance!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ kubectl api-resources | grep wildwest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cowboys wildwest.dev/v1alpha1 true Cowboy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ kubectl apply -f - &lt;span style="color:#e6db74">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">apiVersion: wildwest.dev/v1alpha1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">kind: Cowboy
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">metadata:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> name: one
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">spec:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> intent: one
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cowboy.wildwest.dev/one created
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="dig-deeper-into-apiexports">Dig deeper into &lt;code>APIExports&lt;/code>&lt;/h2>
&lt;p>Switching back to the service provider persona:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ kubectl ws root:wildwest:cowboys-service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Current workspace is &lt;span style="color:#e6db74">&amp;#34;root:wildwest:cowboys-service&amp;#34;&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ kubectl get apiexport/wildwest.dev -o yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: apis.kcp.dev/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: APIExport
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: wildwest.dev
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>status:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> identityHash: a6a0cc778bec8c4b844e6326965fbb740b6a9590963578afe07276e6a0d41e20
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> virtualWorkspaces:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - url: https://myhost:6443/services/apiexport/root:wildwest:cowboys-service/wildwest.dev
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can see that our &lt;code>APIExport&lt;/code> has two key attributes in its status - its identity (more on this below) and a &amp;ldquo;virtual
workspace&amp;rdquo; URL. You can think of this virtual workspace as behaving just like a workspace or cluster, except it searches
across all true workspaces for instances of the resource types provided by the &lt;code>APIExport&lt;/code>. We can use API discovery to
see what resource types are available via this virtual workspace:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ kubectl --server&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;https://myhost:6443/services/apiexport/root:wildwest:cowboys-service/wildwest.dev/clusters/*/&amp;#39;&lt;/span> api-resources
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME SHORTNAMES APIVERSION NAMESPACED KIND
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cowboys wildwest.dev/v1alpha1 true Cowboy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The question is &amp;hellip; can we see the instance created by the consumer?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ kubectl --server&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;https://myhost:6443/services/apiexport/root:wildwest:cowboys-service/wildwest.dev/clusters/*/&amp;#39;&lt;/span> get -A cowboys &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -o custom-columns&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;WORKSPACE:.metadata.annotations.kcp\.dev/cluster,NAME:.metadata.name&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>WORKSPACE NAME
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root:users:zu:yc:kcp-admin:test-consumer one
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Yay!&lt;/p>
&lt;h2 id="apis-faq">APIs FAQ&lt;/h2>
&lt;p>Q: Why is there a new &lt;code>APIResourceSchema&lt;/code> resource type that appears to be very similar to &lt;code>CustomResourceDefinition&lt;/code>?&lt;/p>
&lt;p>A: FIXME&lt;/p>
&lt;p>Q: Why do I have to append &lt;code>/clusters/*/&lt;/code> to the &lt;code>APIExport&lt;/code> virtual workspace URL?&lt;/p>
&lt;p>A: The URL represents the base path of a virtual kcp API server. With a standard kcp API server, workspaces live under
the &lt;code>/clusters/&lt;/code> path, so &lt;code>/clusters/*/&lt;/code> represents a wildcard search across all workspaces via this virtual API
server.&lt;/p>
&lt;p>Q: How should we understand an &lt;code>APIExport&lt;/code> &lt;code>identityHash&lt;/code>?&lt;/p>
&lt;p>A: Unlike with CRDs, a kcp instance might have many &lt;code>APIResourceSchemas&lt;/code> of the same Group/Version/Kind, and users need
some way of securely distinguishing them.&lt;/p>
&lt;p>Each &lt;code>APIExport&lt;/code> is allocated a randomized private secret - this is currently just a large random number - and a public
identity - just a SHA256 hash of the private secret - which securely identifies this &lt;code>APIExport&lt;/code> from others.&lt;/p>
&lt;p>This is important because an &lt;code>APIExport&lt;/code> makes a virtual workspace available to interact with all instances of a
particular &lt;code>APIResourceShema&lt;/code>, and we want to make sure that users are clear on which service provider &lt;code>APIExports&lt;/code> they
are trusting and only the owners of those &lt;code>APIExport&lt;/code> have access to their resources via virtual workspaces.&lt;/p>
&lt;p>Q: Why do you have to use &lt;code>--all-namespaces&lt;/code> with the apiexport virtual workspace?&lt;/p>
&lt;p>A: Think of this virtual workspace as representing a wildcard listing across all workspaces. It doesn&amp;rsquo;t make sense to
look at a specific namespace across all workspaces, so you have to list across all namespaces too.&lt;/p>
&lt;p>Q: If I attempt to use an &lt;code>APIExport&lt;/code> virtual workspace before there are any &lt;code>APIBindings&lt;/code> I get the &amp;ldquo;Error from server
(NotFound): Unable to list &amp;hellip;: the server could not find the requested resource&amp;rdquo;. Is this a bug?&lt;/p>
&lt;p>A: It is a bug. See &lt;a href="">https://github.com/kcp-dev/kcp/issues/1183&lt;/a>&lt;/p>
&lt;p>When fixed, we expect the &lt;code>APIExport&lt;/code> behavior will change such that there will be no virtual workspace URLs until an
&lt;code>APIBinding&lt;/code> is created.&lt;/p></description></item><item><title>Docs: Terminology for control plane</title><link>http://kcp-dev.github.io/docs/kcp-core/concepts/concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kcp-dev.github.io/docs/kcp-core/concepts/concepts/</guid><description>
&lt;p>Contains the definitions shared across design documents around prototyping a kube-like control plane (in KCP). This is
a derivative work of other design documents intended to frame terminology. All future statements that may be changed by
designs is covered by those designs, and not duplicated here.&lt;/p>
&lt;h2 id="logical-cluster">Logical cluster&lt;/h2>
&lt;p>A logical cluster is a way to subdivide a single kube-apiserver + etcd storage into multiple clusters (different APIs,
separate semantics for access, policy, and control) without requiring multiple instances. A logical cluster is a
mechanism for achieving separation, but may be modelled differently in different use cases. A logical cluster is
similar to a virtual cluster as defined by sig-multicluster, but is able to amortize the cost of a new cluster to be
zero or near-zero memory and storage so that we can create tens of millions of empty clusters cheaply.&lt;/p>
&lt;p>A logical cluster is a storage level concept that adds an additional attribute to an object’s identifier on a
kube-apiserver. Regular servers identify objects by (group, version, resource, optional namespace, name). A logical
cluster enriches an identifier: (group, version, resource, &lt;strong>logical cluster name&lt;/strong>, optional namespace, name).&lt;/p>
&lt;h2 id="workload-cluster">Workload Cluster&lt;/h2>
&lt;p>A physical cluster is a “real Kubernetes cluster”, i.e. one that can run Kubernetes workloads and accepts standard
Kubernetes API objects. For the near term, it is assumed that a physical cluster is a distribution of Kubernetes and
passes the conformance tests and exposes the behavior a regular Kubernetes admin or user expects.&lt;/p>
&lt;h2 id="workspace">Workspace&lt;/h2>
&lt;p>A workspace models a set of user-facing APIs for CRUD. Each workspace is backed by a logical cluster, but not all
logical clusters may be exposed as workspaces. Creating a Workspace object results in a logical cluster being available
via a URL for the client to connect and create resources supported by the APIs in that workspace. There could be
multiple different models that result in logical clusters being created, with different policies or lifecycles, but
Workspace is intended to be the most generic representation of the concept with the broadest possible utility to anyone
building control planes.&lt;/p>
&lt;p>A workspace binds APIs and makes them accessible inside the logical cluster, allocates capacity for creating instances
of those APIs (quota), and defines how multi-workspace operations can be performed by users, clients, and controller
integrations.&lt;/p>
&lt;p>To a user, a workspace appears to be a Kubernetes cluster minus all the container orchestration specific resources. It
has its own discovery, its own OpenAPI spec, and follows the kube-like constraints about uniqueness of
Group-Version-Resource and its behaviour (no two GVRs with different schemas can exist per workspace, but workspaces can
have different schemas). A user can define a workspace as a context in a kubeconfig file and &lt;code>kubectl get all -A&lt;/code> would
return all objects in all namespaces of that workspace.&lt;/p>
&lt;p>Workspace naming is chosen to be aligned with the Kubernetes Namespace object - a Namespace subdivides a workspace by
name, a workspace subdivides the universe into chunks of meaningful work.&lt;/p>
&lt;p>Workspaces are the containers for all API objects, so users orient by viewing lists of workspaces from APIs.&lt;/p>
&lt;h2 id="workspace-type">Workspace type&lt;/h2>
&lt;p>Workspaces have types, which are mostly oriented around a set of default or optional APIs exposed. For instance, a
workspace intended for use deploying Kube applications might expose the same API objects a user would encounter on a
physical cluster. A workspace intended for building functions might expose only the knative serving APIs, config maps
and secrets, and optionally enable knative eventing APIs.&lt;/p>
&lt;p>At the current time there is no decision on whether a workspace type represents an inheritance or composition model,
although in general we prefer composition approaches. We also do not have a fully resolved design.&lt;/p>
&lt;h2 id="virtual-workspace">Virtual Workspace&lt;/h2>
&lt;p>An API object has one source of truth (is stored transactionally in one system), but may be exposed to different use
cases with different fields or schemas. Since a workspace is the user facing interaction with an API object, if we want
to deal with Workspaces in aggregate, we need to be able to list them. Since a user may have access to workspaces in
multiple different contexts, or for different use cases (a workspace that belongs to the user personally, or one that
belongs to a business organization), the list of “all workspaces” itself needs to be exposed as an API object to an end
user inside a workspace. That workspace is “virtual” - it adapts or transforms the underlying source of truth for the
object and potentially the schema the user sees.&lt;/p>
&lt;h2 id="index-eg-workspace-index">Index (e.g. Workspace Index)&lt;/h2>
&lt;p>An index is the authoritative list of a particular API in their source of truth across the system. For instance, in
order for a user to see all the workspaces they have available, they must consult the workspace index to return a list
of their workspaces. It is expected that indices are suitable for consistent LIST/WATCHing (in the kubernetes sense) so
that integrations can be built to view the list of those objects.&lt;/p>
&lt;p>Index in the control plane sense should not be confused with secondary indices (in the database sense), which may be
used to enable a particular index.&lt;/p>
&lt;h2 id="shard">Shard&lt;/h2>
&lt;p>A failure domain within the larger control plane service that cuts across the primary functionality. Most distributed
systems must separate functionality across shards to mitigate failures, and typically users interact with shards through
some transparent serving infrastructure. Since the primary problem of building distributed systems is reasoning about
failure domains and dependencies across them, it is critical to allow operators to effectively match shards, understand
dependencies, and bring them together.&lt;/p>
&lt;p>A control plane should be shardable in a way that maximizes application SLO - gives users a tool that allows them to
better define their applications not to fail.&lt;/p>
&lt;h2 id="api-binding">API Binding&lt;/h2>
&lt;p>The act of associating a set of APIs with a given logical cluster. The Workspace model defines one particular
implementation of the lifecycle of a logical cluster and the APIs within it. Because APIs and the implementations that
back an API evolve over time, it is important that the binding be introspectable and orchestrate-able - that a consumer
can provide a rolling deployment of a new API or new implementation across hundreds or thousands of workspaces.&lt;/p>
&lt;p>There are likely a few objects involved in defining the APIs exposed within a workspace, but in general they probably
define a spec (which APIs / implementations to associate with) and a status (the chosen APIs / implementations that are
currently bound), allow a user to bulk associate APIs (i.e. multiple APIs at the same time, like “all knative serving
APIs”), and may be defaulted based on some attributes of a workspace type (all workspaces of this “type” get the default
Kube APIs, this other “type” get the knative apis).&lt;/p>
&lt;p>The evolution of an API within a workspace and across workspaces is of key importance.&lt;/p>
&lt;h2 id="syncer">Syncer&lt;/h2>
&lt;p>A syncer is installed on a SyncTarget and is responsible for synchronizing data between kcp and that cluster.&lt;/p>
&lt;h2 id="location">Location&lt;/h2>
&lt;p>A collection of SyncTargets that describe runtime characteristics that allow placement of applications.
Characteristics are not limited but could describe things like GPU, supported storage, compliance or
regulatory fulfillment, or geographical placement.&lt;/p></description></item><item><title>Docs: Transparent multi-cluster</title><link>http://kcp-dev.github.io/docs/kcp-core/concepts/investigations/transparent-multi-cluster/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kcp-dev.github.io/docs/kcp-core/concepts/investigations/transparent-multi-cluster/</guid><description>
&lt;p>A key tenet of Kubernetes is that workload placement is node-agnostic until the user needs it to be - Kube offers a homogeneous compute surface that admins or app devs can &amp;ldquo;break-glass&amp;rdquo; and set constraints all the way down to writing software that deeply integrates with nodes. But for the majority of workloads a cluster is no more important than a node - it&amp;rsquo;s a detail determined by some human or automated process.&lt;/p>
&lt;p>A key area of investigation for &lt;code>kcp&lt;/code> is exploring transparency of workloads to clusters. Aspirationally we want Kube workloads to be resilient to the operational characteristics of the underlying infrastructure and clusters orthogonally to the workload, by isolating the user from knowing of the details of the infrastructure. If workload APIs are more consistently &amp;ldquo;node-less&amp;rdquo; and &amp;ldquo;cluster-agnostic&amp;rdquo; that opens up ways to drive workload consistency across a large swathe of the compute landscape.&lt;/p>
&lt;h2 id="goal-the-majority-of-applications-and-teams-should-have-workflows-where-cluster-is-a-detail">Goal: The majority of applications and teams should have workflows where cluster is a detail&lt;/h2>
&lt;p>A number of projects have explored this since the beginning of Kubernetes - this prototype should explore in detail how we can make a normal Kubernetes flow for most users be cluster-independent but still &amp;ldquo;break-glass&amp;rdquo; and describe placement in detail. Since this is a broad topic and we want to benefit the majority of users, we need to also add constraints that maximize the chance of these approaches being adopted.&lt;/p>
&lt;h3 id="constraint-the-workflows-and-practices-teams-use-today-should-be-minimally-disrupted">Constraint: The workflows and practices teams use today should be minimally disrupted&lt;/h3>
&lt;p>Users typically only change their workflows when an improvement offers a significant multiplier. To be effective we must reduce friction (which reduces multipliers) and offer significant advantages to that workflow.&lt;/p>
&lt;p>Tools, practices, user experiences, and automation should &amp;ldquo;just work&amp;rdquo; when applied to cluster-agnostic or cluster-aware workloads. This includes gitops, rich web interfaces, &lt;code>kubectl&lt;/code>, etc. That implies that a &amp;ldquo;cluster&amp;rdquo; and a &amp;ldquo;Kube API&amp;rdquo; is our key target, and that we must preserve a majority of semantic meaning of existing APIs.&lt;/p>
&lt;h3 id="constraint-95-of-workloads-should-just-work-when-kubectl-applyd-to-kcp">Constraint: 95% of workloads should &amp;ldquo;just work&amp;rdquo; when &lt;code>kubectl apply&lt;/code>d to &lt;code>kcp&lt;/code>&lt;/h3>
&lt;p>It continues to be possible to build different abstractions on top of Kube, but existing workloads are what really benefit users. They have chosen the Kube abstractions deliberately because they are general purpose - rather than describe a completely new system we believe it is more effective to uplevel these existing apps. That means that existing primitives like Service, Deployment, PersistentVolumeClaim, StatefulSet must all require no changes to move from single-cluster to multi-cluster&lt;/p>
&lt;p>By choosing this constraint, we also accept that we will have to be opinionated on making the underlying clusters consistent, and we will have to limit / constrain certain behaviors. Ideally, we focus on preserving the user&amp;rsquo;s view of the changes on a logical cluster, while making the workloads on a physical cluster look more consistent for infrastructure admins. This implies we need to explore both what these workloads might look like (a review of applications) and describe the points of control / abstraction between levels.&lt;/p>
&lt;h3 id="constraint-90-of-application-infrastructure-controllers-should-be-useful-against-kcp">Constraint: 90% of application infrastructure controllers should be useful against &lt;code>kcp&lt;/code>&lt;/h3>
&lt;p>A controller that performs app infra related functions should be useful without change against &lt;code>kcp&lt;/code>. For instance, the etcd operator takes an &lt;code>Etcd&lt;/code> cluster CRD and creates pods. It should be possible for that controller to target a &lt;code>kcp&lt;/code> logical cluster with the CRD and create pods on the logical cluster that are transparently placed onto a cluster.&lt;/p>
&lt;h2 id="areas-of-investigation">Areas of investigation&lt;/h2>
&lt;ol>
&lt;li>Define high level user use cases&lt;/li>
&lt;li>Study approaches from the ecosystem that do not require workloads to change significantly to spread&lt;/li>
&lt;li>Explore characteristics of most common Kube workload objects that could allow them to be transparently placed&lt;/li>
&lt;li>Identify the control points and data flow between workload and physical cluster that would be generally useful across a wide range of approaches - such as:
&lt;ol>
&lt;li>How placement is assigned, altered, and removed (&amp;ldquo;scheduling&amp;rdquo; or &amp;ldquo;placement&amp;rdquo;)&lt;/li>
&lt;li>How workloads are transformed from high level to low level and then summarized back&lt;/li>
&lt;li>Categorize approaches in the ecosystem and gaps where collaboration could improve velocity&lt;/li>
&lt;li>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Identify key infrastructure characteristics for multi-cluster
&lt;ol>
&lt;li>Networking between components and transparency of location to movement&lt;/li>
&lt;li>Data movement, placement, and replication&lt;/li>
&lt;li>Abstraction/interception of off-cluster dependencies (external to the system)&lt;/li>
&lt;li>Consistency of infrastructure (where does Kube not sufficiently drive operational consistency)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Seek consensus in user communities on whether the abstractions are practical&lt;/li>
&lt;li>Invest in key technologies in the appropriate projects&lt;/li>
&lt;li>Formalize parts of the prototype into project(s) drawing on the elements above if successful!&lt;/li>
&lt;/ol>
&lt;h2 id="use-cases">Use cases&lt;/h2>
&lt;p>Representing feedback from a number of multi-cluster users with a diverse set of technologies in play:&lt;/p>
&lt;h3 id="as-a-user">As a user&lt;/h3>
&lt;ol>
&lt;li>I can &lt;code>kubectl apply&lt;/code> a workload that is agnostic to node placement to &lt;code>kcp&lt;/code> and see the workload assigned to real resources and start running and the status summarized back to me.&lt;/li>
&lt;li>I can move an application (defined in 1) between two physical clusters by changing a single high level attribute&lt;/li>
&lt;li>As a user when I move an application (as defined in 2) no disruption of internal or external traffic is visible to my consumers&lt;/li>
&lt;li>As a user I can debug my application in a familiar manner regardless of cluster&lt;/li>
&lt;li>As a user with a stateful application by persistent volumes can move / replicate / be shared across clusters in a manner consistent with my storage type (read-write-one / read-write-many).&lt;/li>
&lt;/ol>
&lt;h3 id="as-an-infrastructure-admin">As an infrastructure admin&lt;/h3>
&lt;ol>
&lt;li>I can decommision an physical cluster and see workloads moved without disruption&lt;/li>
&lt;li>I can set capacity bounds that control admission to a particular cluster and react to workload growth organically&lt;/li>
&lt;/ol>
&lt;h2 id="progress">Progress&lt;/h2>
&lt;p>In the early prototype stage &lt;code>kcp&lt;/code> uses the &lt;code>syncer&lt;/code> and the &lt;code>deployment-splitter&lt;/code> as stand-ins for more complex scheduling and transformation. This section should see more updates in the near term as we move beyond areas 1-2 (use cases and ecosystem research)&lt;/p>
&lt;h3 id="possible-design-simplifications">Possible design simplifications&lt;/h3>
&lt;ol>
&lt;li>Focus on every object having an annotation saying which clusters it is targeted at
&lt;ul>
&lt;li>We can control the annotation via admission eventually, works for all objects&lt;/li>
&lt;li>Tracking declarative and atomic state change (NONE -&amp;gt; A, A-&amp;gt;(A,B), A-&amp;gt;NONE) on
objects&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>RBAC stays at the higher level and applies to the logical clusters, is not synced
&lt;ul>
&lt;li>Implication is that controllers won&amp;rsquo;t be syncable today, BUT that&amp;rsquo;s ok because it&amp;rsquo;s likely giving workloads control over the underlying cluster is a non-goal to start and would have to be explicit opt-in by admin&lt;/li>
&lt;li>Controllers already need to separate input from output - most controllers assume they&amp;rsquo;re the same (but things like service load balancer)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Think of scheduling as a policy at global, per logical cluster, and optionally the namespace (policy of object type -&amp;gt; 0..N clusters)
&lt;ul>
&lt;li>Simplification over doing a bunch of per object work, since we want to be transparent (per object is a future optimization with some limits)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol></description></item><item><title>Docs: Virtual Workspaces</title><link>http://kcp-dev.github.io/docs/kcp-core/concepts/virtual-workspaces/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kcp-dev.github.io/docs/kcp-core/concepts/virtual-workspaces/</guid><description>
&lt;p>Virtual workspaces are proxy-like apiservers under a custom URL that provide some computed view of real workspaces.&lt;/p>
&lt;h2 id="examples">Examples&lt;/h2>
&lt;ol>
&lt;li>when the user does &lt;code>kubectl get workspaces&lt;/code> only workspaces are shown that the user has access to. That resource is implemented through a virtual workspace under &lt;code>/services/workspaces/&amp;lt;org&amp;gt;/personal/apis/tenancy.kcp.dev/v1beta1/workspaces&lt;/code>.&lt;/li>
&lt;li>controllers should not be able to directly access customer workspaces. They should only be able to access the objects that are connected to their provided APIs. In &lt;a href="">April 19&amp;rsquo;s community call this virtual workspace was showcased&lt;/a>, developed during v0.4 phase.&lt;/li>
&lt;li>if we keep the initializer model with &lt;code>ClusterWorkspaceTypes&lt;/code>, there must be a virtual workspace for the &amp;ldquo;workspace type owner&amp;rdquo; that gives access to initializing workspaces.&lt;/li>
&lt;li>the syncer will get a virtual workspace view of the workspaces it syncs to physical clusters. That view will have transformed objects potentially, especially deployment-splitter-like transformations will be implemented within a virtual workspace, transparently applied from the point of view of the syncer.&lt;/li>
&lt;/ol>
&lt;h2 id="faq">FAQ&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>Can we use go clients to watch resources on a virtual workspace?&lt;/strong> Absolutely. From the point of view of the controllers it is just a normal (client) URL. So one can use client-go informers (or controller-runtime) to watch the objects in a virtual workspace.&lt;/li>
&lt;/ul>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
A normal service account lives in just ONE workspace and can only access its own workspace. So in order to use a service account for accessing cross-workspace data (and that&amp;rsquo;s what is necessary in example 2 and 3 at least), we need a virtual workspace to add the necessary authz.
&lt;/div>
&lt;ul>
&lt;li>&lt;strong>Are virtual workspaces read-only?&lt;/strong> No, they are not necessarily. Some are, some are not. The controller view virtual workspace will be writable, as well as the syncer virtual workspace.&lt;/li>
&lt;li>&lt;strong>Do service teams have to write their own virtual workspace?&lt;/strong> Not for the standard cases as described above. There might be cases in the future where service teams provide their own virtual workspace for some very special purpose access patterns. But we are not there yet.&lt;/li>
&lt;li>&lt;strong>Where does the developer get the URL from of the virtual workspace?&lt;/strong> The URLs will be &amp;ldquo;published&amp;rdquo; in some object status. E.g. APIExport.status will have a list of URLs that controllers have to connect to (example 2). Similarly, SyncTarget.status will have URLs for the syncer virtual workspaces, etc. We might do the same in ClusterWorkspaceType.status (example 3).&lt;/li>
&lt;li>&lt;strong>Will there be multiple virtual workspace URLs my controller has to watch?&lt;/strong> Yes, as soon as we add sharding, it will become a list. So it might be that 1000 tenants are accessible under one URL, the next 1000 under another one, and so on. The controllers have to watch the mentioned URL lists in status of objects and start new instances (either with their own controller sharding eventually, or just in process with another go routine).&lt;/li>
&lt;li>&lt;strong>Show me the code.&lt;/strong> The stock kcp virtual workspaces are in &lt;a href="">&lt;code>pkg/virtual&lt;/code>&lt;/a>.&lt;/li>
&lt;li>&lt;strong>Who runs the virtual workspaces?&lt;/strong> The stock kcp virtual workspaces will be run through &lt;code>kcp start&lt;/code> in-process. The personal workspace one (example 1) can also be run as its own process and the kcp apiserver will forward traffic to the external address. There might be reasons in the future like scalability that the later model is preferred. For the clients of virtual workspaces that has no impact. They are supposed to &amp;ldquo;blindly&amp;rdquo; use the URLs published in the API objects&amp;rsquo; status. Those URLs might point to in-process instances or external addresses depending on deployment topology.&lt;/li>
&lt;/ul></description></item><item><title>Docs: Workspaces</title><link>http://kcp-dev.github.io/docs/kcp-core/concepts/workspaces/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kcp-dev.github.io/docs/kcp-core/concepts/workspaces/</guid><description>
&lt;p>Multi-tenancy is implemented through workspaces. A workspace is a Kubernetes-cluster-like
HTTPS endpoint, i.e. an endpoint usual Kubernetes client tooling (client-go, controller-runtime
and others) and user interfaces (kubectl, helm, web console, &amp;hellip;) can talk to like to a
Kubernetes cluster.&lt;/p>
&lt;p>Workspaces can be backed by a traditional REST store implementation through CRDs
or native resources persisted in etcd. But there can be alternative implementations
for special access patterns, e.g. a virtual workspace apiserver that transforms
other APIs e.g. by projections (Workspace in kcp is a projection of ClusterWorkspace)
or by applying visibility filters (e.g. showing all workspaces or all namespaces
the current user has access to).&lt;/p>
&lt;p>Workspaces are represented to the user via the Workspace kind, e.g.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Workspace&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">tenancy.kcp.dev/v1beta1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">Universal&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">status&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">url&lt;/span>: &lt;span style="color:#ae81ff">https://kcp.example.com/clusters/myapp&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There is a 3-level hierarchy of workspaces:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Enduser Workspaces&lt;/strong> are workspaces holding enduser resources, e.g.
applications with services, secrets, configmaps, deployments, etc.&lt;/li>
&lt;li>&lt;strong>Organization Workspaces&lt;/strong> are workspaces holding organizational data,
e.g. definitions of enduser workspaces, roles, policies, accounting data.&lt;/li>
&lt;li>&lt;strong>Root Workspace&lt;/strong> is a singleton holding cross-organizational data and
the definition of the organizations.&lt;/li>
&lt;/ul>
&lt;h2 id="clusterworkspaces">ClusterWorkspaces&lt;/h2>
&lt;p>ClusterWorkspaces define traditional etcd-based, CRD enabled workspaces, available
under &lt;code>/clusters/&amp;lt;parent-workspace-name&amp;gt;:&amp;lt;cluster-workspace-name&amp;gt;&lt;/code>. E.g. organization
workspaces are accessible at &lt;code>/clusters/root:&amp;lt;org-name&amp;gt;&lt;/code>. An enduser workspace is
accessible at &lt;code>/clusters/&amp;lt;org-name&amp;gt;:&amp;lt;enduser-workspace-name&amp;gt;&lt;/code>.&lt;/p>
&lt;p>ClusterWorkspaces have a type. A type is defined by a ClusterWorkspaceType. A type
defines initializers. They are set on new ClusterWorkspace objects and block the
cluster workspace from leaving the initializing phase. Both system components and
3rd party components can use initializers to customize ClusterWorkspaces on creation,
e.g. to bootstrap resources inside the workspace, or to set up permission in its parent.&lt;/p>
&lt;p>A cluster workspace of type &lt;code>Universal&lt;/code> is a workspace without further initialization
or special properties by default, and it can be used without a corresponding
ClusterWorkspaceType object (though one can be added and its initializers will be
applied). ClusterWorkSpaces of type &lt;code>Organization&lt;/code> are described in the next section.&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
In order to create cluster workspaces of a given type (including &lt;code>Universal&lt;/code>)
you must have &lt;code>use&lt;/code> permissions against the &lt;code>clusterworkspacetypes&lt;/code> resources with the
lower-case name of the cluster workspace type (e.g. &lt;code>universal&lt;/code>). All &lt;code>system:authenticated&lt;/code>
users inherit this permission automatically for type &lt;code>Universal&lt;/code>.
&lt;/div>
&lt;p>ClusterWorkspaces persisted in etcd on a shard have disjoint etcd prefix ranges, i.e.
they have independent behaviour and no cluster workspace sees objects from other
cluster workspaces. In contrast to namespace in Kubernetes, this includes non-namespaced
objects, e.g. like CRDs where each workspace can have its own set of CRDs installed.&lt;/p>
&lt;h2 id="user-home-workspaces">User Home Workspaces&lt;/h2>
&lt;p>User home workspaces are an optional feature of kcp. If enabled (through &lt;code>--enable-home-workspaces&lt;/code>), there is a special
virtual &lt;code>Workspace&lt;/code> called &lt;code>~&lt;/code> in the root workspace. It is used by &lt;code>kubectl ws&lt;/code> to derive the full path to the user
home workspace, similar to how Unix &lt;code>cd ~&lt;/code> move the users to their home.&lt;/p>
&lt;p>The full path for a user&amp;rsquo;s home workspace has a number of parts: &lt;code>&amp;lt;prefix&amp;gt;:(&amp;lt;bucket&amp;gt;)+&amp;lt;user-name&amp;gt;&lt;/code>. Buckets are used to
ensure that ~1000 sub-buckets or users exist in any bucket, for scaling reasons. The bucket names are deterministically
derived from the user name (via some hash). Example for user &lt;code>adam&lt;/code> when using default configuration:
&lt;code>root:users:a8:f1:adam&lt;/code>.&lt;/p>
&lt;p>User home workspaces are created on-demand when they are first accessed, but this is not visible to the user, allowing
the system to only incur the cost of these workspaces when they are needed. Only users of the configured
home-creator-groups (default &lt;code>system:authenticated&lt;/code>) will have a home workspace.&lt;/p>
&lt;p>The following cluster workspace types are created internally to support User Home Workspaces:&lt;/p>
&lt;ul>
&lt;li>&lt;code>homeroot&lt;/code>: the workspace that will contain all the Home workspaces, spread across buckets. - Can contain only Homebucket workspaces&lt;/li>
&lt;li>&lt;code>homebucket&lt;/code>: the type of workspaces that will contain a subset of all home workspaces. - Can contain either Homebucket (multi-level bucketing) or Home workspaces&lt;/li>
&lt;li>&lt;code>home&lt;/code>: the ClusterWorkspace of home workspaces - can contain any type of workspaces as children (especially universal workspaces)&lt;/li>
&lt;/ul>
&lt;h3 id="bucket-configuration-options">Bucket configuration options&lt;/h3>
&lt;p>The &lt;code>kcp&lt;/code> administrator can configure:&lt;/p>
&lt;ul>
&lt;li>&lt;code>&amp;lt;prefix&amp;gt;&lt;/code>, which defaults to &lt;code>root:users&lt;/code>&lt;/li>
&lt;li>bucket depth, which defaults to 2&lt;/li>
&lt;li>bucket name length, in characters, which defaults to 2&lt;/li>
&lt;/ul>
&lt;p>The following outlines valid configuration options. With the default setup, ~5 users or ~700 sub-buckets will be in
any bucket.&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Warning&lt;/h4>
DO NOT set the bucket size to be longer than 2, as this will adversely impact performance.
&lt;/div>
&lt;p>User-names have &lt;code>(26 * [(26 + 10 + 2) * 61] * 36 = 2169648)&lt;/code> permutations, and buckets are made up of lowercase-alpha
chars. Invalid configurations break the scale limit in sub-buckets or users. Valid configurations should target
having not more than ~1000 sub-buckets per bucket and at least 5 users per bucket.&lt;/p>
&lt;h3 id="valid-configurations">Valid Configurations&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>length&lt;/th>
&lt;th>depth&lt;/th>
&lt;th>sub-buckets&lt;/th>
&lt;th>users&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>3&lt;/td>
&lt;td>26 * 1 = 26&lt;/td>
&lt;td>2169648 / (26)^3 = 124&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>4&lt;/td>
&lt;td>26 * 1 = 26&lt;/td>
&lt;td>2169648 / (26)^4 = 5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>2&lt;/td>
&lt;td>26 * 26 = 676&lt;/td>
&lt;td>2169648 / (26*26)^2 = 5&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="invalid-configurations">Invalid Configurations&lt;/h3>
&lt;p>These are examples of invalid configurations and are for illustrative purposes only. In nearly all cases, the default values
will be sufficient.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>length&lt;/th>
&lt;th>depth&lt;/th>
&lt;th>sub-buckets&lt;/th>
&lt;th>users&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>26 * 1 = 26&lt;/td>
&lt;td>2169648 / (26) = 83448&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>2&lt;/td>
&lt;td>26 * 1 = 26&lt;/td>
&lt;td>2169648 / (26)^2 = 3209&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>1&lt;/td>
&lt;td>26 * 26 = 676&lt;/td>
&lt;td>2169648 / (26*26) = 3209&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>3&lt;/td>
&lt;td>26 * 26 = 676&lt;/td>
&lt;td>2169648 / (26*26)^3 = .007&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>1&lt;/td>
&lt;td>26 &lt;em>26&lt;/em> 26 = 17576&lt;/td>
&lt;td>2169648 / (26&lt;em>26&lt;/em>26) = 124&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>2&lt;/td>
&lt;td>26 &lt;em>26&lt;/em> 26 = 17576&lt;/td>
&lt;td>2169648 / (26&lt;em>26&lt;/em>26)^2 = .007&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="organization-workspaces">Organization Workspaces&lt;/h2>
&lt;p>Organization workspaces are ClusterWorkspaces of type &lt;code>Organization&lt;/code>, defined in the
root workspace. Organization workspaces are accessible at &lt;code>/clusters/root:&amp;lt;org-name&amp;gt;&lt;/code>.&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
The organization ClusterWorkspaceType can only be created in the root workspace
verified through admission.
&lt;/div>
&lt;p>Organization workspaces have standard resources (on-top of &lt;code>Universal&lt;/code> workspaces)
which include the &lt;code>ClusterWorkspace&lt;/code> API defined through an CRD deployed during
organization workspace initialization.&lt;/p>
&lt;h2 id="root-workspace">Root Workspace&lt;/h2>
&lt;p>The root workspace is a singleton in the system accessible under &lt;code>/clusters/root&lt;/code>.
It is not represented by a ClusterWorkspace anywhere, but shares the same properties.&lt;/p>
&lt;p>Inside the root workspace at least the following resources are bootstrapped on
kcp startup:&lt;/p>
&lt;ul>
&lt;li>ClusterWorkspace CRD&lt;/li>
&lt;li>WorkspaceShard CRD&lt;/li>
&lt;li>Cluster CRD.&lt;/li>
&lt;/ul>
&lt;p>The root workspace is the only one that holds WorkspaceShard objects. WorkspaceShards
are used to schedule a new ClusterWorkspace to, i.e. to select in which etcd the
cluster workspace content is to be persisted.&lt;/p>
&lt;h2 id="system-workspaces">System Workspaces&lt;/h2>
&lt;p>System workspaces are local to a shard and are named in the pattern &lt;code>system:&amp;lt;system-workspace-name&amp;gt;&lt;/code>.&lt;/p>
&lt;p>They are only accessible to a shard-local admin user and there is neither a definition
via a ClusterWorkspace nor any per-request check for workspace existence.&lt;/p>
&lt;p>System workspace are only accessible to a shard-local admin user, and there is
neither a definition via a ClusterWorkspace, nor is there any validation of requests
that the system workspace exists.&lt;/p>
&lt;p>The &lt;code>system:admin&lt;/code> system workspace is special as it is also accessible through &lt;code>/&lt;/code>
of the shard, and at &lt;code>/cluster/system:admin&lt;/code> at the same time.&lt;/p></description></item><item><title>Docs: APIBinding CRD schema reference (group apis.kcp.dev)</title><link>http://kcp-dev.github.io/docs/kcp-core/crd-reference/apibindings.apis.kcp.dev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kcp-dev.github.io/docs/kcp-core/crd-reference/apibindings.apis.kcp.dev/</guid><description>
&lt;h2 id="apibinding">APIBinding&lt;/h2>
&lt;dl class="crd-meta">
&lt;dt class="fullname">Full name:&lt;/dt>
&lt;dd class="fullname">apibindings.apis.kcp.dev&lt;/dd>
&lt;dt class="groupname">Group:&lt;/dt>
&lt;dd class="groupname">apis.kcp.dev&lt;/dd>
&lt;dt class="singularname">Singular name:&lt;/dt>
&lt;dd class="singularname">apibinding&lt;/dd>
&lt;dt class="pluralname">Plural name:&lt;/dt>
&lt;dd class="pluralname">apibindings&lt;/dd>
&lt;dt class="scope">Scope:&lt;/dt>
&lt;dd class="scope">Cluster&lt;/dd>
&lt;dt class="versions">Versions:&lt;/dt>
&lt;dd class="versions">&lt;a class="version" href="#v1alpha1" title="Show schema for version v1alpha1">v1alpha1&lt;/a>&lt;/dd>
&lt;/dl>
&lt;div class="crd-schema-version">
&lt;h2 id="v1alpha1">Version v1alpha1&lt;/h2>
&lt;h3 id="property-details-v1alpha1">Properties&lt;/h3>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.apiVersion">.apiVersion&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: &lt;a href="https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources">https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources&lt;/a>&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.kind">.kind&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: &lt;a href="https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds">https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds&lt;/a>&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.metadata">.metadata&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec">.spec&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Spec holds the desired state.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.permissionClaims">.spec.permissionClaims&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>permissionClaims records decisions about permission claims requested by the API service provider. Individual claims can be accepted or rejected. If accepted, the API service provider gets the requested access to the specified resources in this workspace. Access is granted per GroupResource, identity, and other properties.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.permissionClaims[*]">.spec.permissionClaims[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>AcceptablePermissionClaim is a PermissionClaim that records if the user accepts or rejects it.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.permissionClaims[*].group">.spec.permissionClaims[*].group&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>group is the name of an API group. For core groups this is the empty string &amp;lsquo;&amp;ldquo;&amp;rdquo;&amp;rsquo;.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.permissionClaims[*].identityHash">.spec.permissionClaims[*].identityHash&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>This is the identity for a given APIExport that the APIResourceSchema belongs to. The hash can be found on APIExport and APIResourceSchema&amp;rsquo;s status. It will be empty for core types. Note that one must look this up for a particular KCP instance.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.permissionClaims[*].resource">.spec.permissionClaims[*].resource&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>resource is the name of the resource. Note: it is worth noting that you can not ask for permissions for resource provided by a CRD not provided by an api export.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.permissionClaims[*].state">.spec.permissionClaims[*].state&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.reference">.spec.reference&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>reference uniquely identifies an API to bind to.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.reference.workspace">.spec.reference.workspace&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>workspace is a reference to an APIExport in the same organization. The creator of the APIBinding needs to have access to the APIExport with the verb &lt;code>bind&lt;/code> in order to bind to it.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.reference.workspace.exportName">.spec.reference.workspace.exportName&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Name of the APIExport that describes the API.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.reference.workspace.path">.spec.reference.workspace.path&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>path is an absolute reference to a workspace, e.g. root:org:ws. The workspace must be some ancestor or a child of some ancestor. If it is unset, the path of the APIBinding is used.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status">.status&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Status communicates the observed state.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.appliedPermissionClaims">.status.appliedPermissionClaims&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>appliedPermissionClaims is a list of the permission claims the system has seen and applied, according to the requests of the API service provider in the APIExport and the acceptance state in spec.permissionClaims.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.appliedPermissionClaims[*]">.status.appliedPermissionClaims[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>PermissionClaim identifies an object by GR and identity hash. It&amp;rsquo;s purpose is to determine the added permisions that a service provider may request and that a consumer may accept and alllow the service provider access to.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.appliedPermissionClaims[*].group">.status.appliedPermissionClaims[*].group&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>group is the name of an API group. For core groups this is the empty string &amp;lsquo;&amp;ldquo;&amp;rdquo;&amp;rsquo;.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.appliedPermissionClaims[*].identityHash">.status.appliedPermissionClaims[*].identityHash&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>This is the identity for a given APIExport that the APIResourceSchema belongs to. The hash can be found on APIExport and APIResourceSchema&amp;rsquo;s status. It will be empty for core types. Note that one must look this up for a particular KCP instance.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.appliedPermissionClaims[*].resource">.status.appliedPermissionClaims[*].resource&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>resource is the name of the resource. Note: it is worth noting that you can not ask for permissions for resource provided by a CRD not provided by an api export.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.boundExport">.status.boundExport&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>boundExport records the export this binding is bound to currently. It can differ from the export that was specified in the spec while rebinding to a different APIExport.
This field is what gives the APIExport visibility into the objects in this workspace.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.boundExport.workspace">.status.boundExport.workspace&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>workspace is a reference to an APIExport in the same organization. The creator of the APIBinding needs to have access to the APIExport with the verb &lt;code>bind&lt;/code> in order to bind to it.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.boundExport.workspace.exportName">.status.boundExport.workspace.exportName&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Name of the APIExport that describes the API.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.boundExport.workspace.path">.status.boundExport.workspace.path&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>path is an absolute reference to a workspace, e.g. root:org:ws. The workspace must be some ancestor or a child of some ancestor. If it is unset, the path of the APIBinding is used.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.boundResources">.status.boundResources&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>boundResources records the state of bound APIs.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.boundResources[*]">.status.boundResources[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>BoundAPIResource describes a bound GroupVersionResource through an APIResourceSchema of an APIExport..&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.boundResources[*].group">.status.boundResources[*].group&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>group is the group of the bound API. Empty string for the core API group.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.boundResources[*].resource">.status.boundResources[*].resource&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>resource is the resource of the bound API.
kubebuilder:validation:MinLength=1&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.boundResources[*].schema">.status.boundResources[*].schema&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Schema references the APIResourceSchema that is bound to this API.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-4">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.boundResources[*].schema.UID">.status.boundResources[*].schema.UID&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>UID is the UID of the APIResourceSchema that is bound to this API.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-4">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.boundResources[*].schema.identityHash">.status.boundResources[*].schema.identityHash&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>identityHash is the hash of the API identity that this schema is bound to. The API identity determines the etcd prefix used to persist the object. Different identity means that the objects are effectively served and stored under a distinct resource. A CRD of the same GroupVersionResource uses a different identity and hence a separate etcd prefix.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-4">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.boundResources[*].schema.name">.status.boundResources[*].schema.name&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>name is the bound APIResourceSchema name.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.boundResources[*].storageVersions">.status.boundResources[*].storageVersions&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>storageVersions lists all versions of a resource that were ever persisted. Tracking these versions allows a migration path for stored versions in etcd. The field is mutable so a migration controller can finish a migration to another version (ensuring no old objects are left in storage), and then remove the rest of the versions from this list.
Versions may not be removed while they exist in this list.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-4">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.boundResources[*].storageVersions[*]">.status.boundResources[*].storageVersions[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions">.status.conditions&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>conditions is a list of conditions that apply to the APIBinding.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*]">.status.conditions[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Condition defines an observation of a object operational state.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].lastTransitionTime">.status.conditions[*].lastTransitionTime&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].message">.status.conditions[*].message&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>A human readable message indicating details about the transition. This field may be empty.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].reason">.status.conditions[*].reason&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>The reason for the condition&amp;rsquo;s last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].severity">.status.conditions[*].severity&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].status">.status.conditions[*].status&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Status of the condition, one of True, False, Unknown.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].type">.status.conditions[*].type&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.exportPermissionClaims">.status.exportPermissionClaims&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>exportPermissionClaims records the permissions that the export provider is asking for the binding to grant.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.exportPermissionClaims[*]">.status.exportPermissionClaims[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>PermissionClaim identifies an object by GR and identity hash. It&amp;rsquo;s purpose is to determine the added permisions that a service provider may request and that a consumer may accept and alllow the service provider access to.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.exportPermissionClaims[*].group">.status.exportPermissionClaims[*].group&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>group is the name of an API group. For core groups this is the empty string &amp;lsquo;&amp;ldquo;&amp;rdquo;&amp;rsquo;.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.exportPermissionClaims[*].identityHash">.status.exportPermissionClaims[*].identityHash&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>This is the identity for a given APIExport that the APIResourceSchema belongs to. The hash can be found on APIExport and APIResourceSchema&amp;rsquo;s status. It will be empty for core types. Note that one must look this up for a particular KCP instance.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.exportPermissionClaims[*].resource">.status.exportPermissionClaims[*].resource&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>resource is the name of the resource. Note: it is worth noting that you can not ask for permissions for resource provided by a CRD not provided by an api export.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.phase">.status.phase&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>phase is the current phase of the APIBinding: - &amp;ldquo;&amp;rdquo;: the APIBinding has just been created, waiting to be bound. - Binding: the APIBinding is being bound. - Bound: the APIBinding is bound and the referenced APIs are available in the workspace.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div></description></item><item><title>Docs: APIExport CRD schema reference (group apis.kcp.dev)</title><link>http://kcp-dev.github.io/docs/kcp-core/crd-reference/apiexports.apis.kcp.dev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kcp-dev.github.io/docs/kcp-core/crd-reference/apiexports.apis.kcp.dev/</guid><description>
&lt;h2 id="apiexport">APIExport&lt;/h2>
&lt;dl class="crd-meta">
&lt;dt class="fullname">Full name:&lt;/dt>
&lt;dd class="fullname">apiexports.apis.kcp.dev&lt;/dd>
&lt;dt class="groupname">Group:&lt;/dt>
&lt;dd class="groupname">apis.kcp.dev&lt;/dd>
&lt;dt class="singularname">Singular name:&lt;/dt>
&lt;dd class="singularname">apiexport&lt;/dd>
&lt;dt class="pluralname">Plural name:&lt;/dt>
&lt;dd class="pluralname">apiexports&lt;/dd>
&lt;dt class="scope">Scope:&lt;/dt>
&lt;dd class="scope">Cluster&lt;/dd>
&lt;dt class="versions">Versions:&lt;/dt>
&lt;dd class="versions">&lt;a class="version" href="#v1alpha1" title="Show schema for version v1alpha1">v1alpha1&lt;/a>&lt;/dd>
&lt;/dl>
&lt;div class="crd-schema-version">
&lt;h2 id="v1alpha1">Version v1alpha1&lt;/h2>
&lt;h3 id="property-details-v1alpha1">Properties&lt;/h3>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.apiVersion">.apiVersion&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: &lt;a href="https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources">https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources&lt;/a>&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.kind">.kind&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: &lt;a href="https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds">https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds&lt;/a>&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.metadata">.metadata&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec">.spec&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Spec holds the desired state.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.identity">.spec.identity&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>identity points to a secret that contains the API identity in the &amp;lsquo;key&amp;rsquo; file. The API identity determines an unique etcd prefix for objects stored via this APIExport.
Different APIExport in a workspace can share a common identity, or have different ones. The identity (the secret) can also be transferred to another workspace when the APIExport is moved.
The identity is a secret of the API provider. The APIBindings referencing this APIExport will store a derived, non-sensitive value of this identity.
The identity of an APIExport cannot be changed. A derived, non-sensitive value of the identity key is stored in the APIExport status and this value is immutable.
The identity is defaulted. A secret with the name of the APIExport is automatically created.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.identity.secretRef">.spec.identity.secretRef&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>secretRef is a reference to a secret that contains the API identity in the &amp;lsquo;key&amp;rsquo; file.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.identity.secretRef.name">.spec.identity.secretRef.name&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>name is unique within a namespace to reference a secret resource.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.identity.secretRef.namespace">.spec.identity.secretRef.namespace&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>namespace defines the space within which the secret name must be unique.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.latestResourceSchemas">.spec.latestResourceSchemas&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>latestResourceSchemas records the latest APIResourceSchemas that are exposed with this APIExport.
The schemas can be changed in the life-cycle of the APIExport. These changes have no effect on existing APIBindings, but only on newly bound ones.
For updating existing APIBindings, use an APIDeployment keeping bound workspaces up-to-date.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.latestResourceSchemas[*]">.spec.latestResourceSchemas[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.maximalPermissionPolicy">.spec.maximalPermissionPolicy&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>maximalPermissionPolicy will allow for a service provider to set an upper bound on what is allowed for a consumer of this API. If the policy is not set, no upper bound is applied, i.e the consuming users can do whatever the user workspace allows the user to do.
The policy consists of RBAC (Cluster)Roles and (Cluster)Bindings. A request of a user in a workspace that binds to this APIExport via an APIBinding is additionally checked against these rules, with the user name and the groups prefixed with &lt;code>apis.kcp.dev:binding:&lt;/code>.
For example: assume a user &lt;code>adam&lt;/code> with groups &lt;code>system:authenticated&lt;/code> and &lt;code>a-team&lt;/code> binds to this APIExport in another workspace root:org:ws. Then a request in that workspace against a resource of this APIExport is authorized as every other request in that workspace, but in addition the RBAC policy here in the APIExport workspace has to grant access to the user &lt;code>apis.kcp.dev:binding:adam&lt;/code> with the groups &lt;code>apis.kcp.dev:binding:system:authenticated&lt;/code> and &lt;code>apis.kcp.dev:binding:a-team&lt;/code>.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.maximalPermissionPolicy.local">.spec.maximalPermissionPolicy.local&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>local is policy that is defined in same namespace as API Export.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.permissionClaims">.spec.permissionClaims&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>permissionClaims make resources available in APIExport&amp;rsquo;s virtual workspace that are not part of the actual APIExport resources.
PermissionClaims are optional and should be the least access necessary to complete the functions that the service provider needs. Access is asked for on a GroupResource + identity basis.
PermissionClaims must be accepted by the user&amp;rsquo;s explicit acknowledgement. Hence, when claims change, the respecting objects are not visible immediately.
PermissionClaims overlapping with the APIExport resources are ignored.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.permissionClaims[*]">.spec.permissionClaims[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>PermissionClaim identifies an object by GR and identity hash. It&amp;rsquo;s purpose is to determine the added permisions that a service provider may request and that a consumer may accept and alllow the service provider access to.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.permissionClaims[*].group">.spec.permissionClaims[*].group&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>group is the name of an API group. For core groups this is the empty string &amp;lsquo;&amp;ldquo;&amp;rdquo;&amp;rsquo;.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.permissionClaims[*].identityHash">.spec.permissionClaims[*].identityHash&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>This is the identity for a given APIExport that the APIResourceSchema belongs to. The hash can be found on APIExport and APIResourceSchema&amp;rsquo;s status. It will be empty for core types. Note that one must look this up for a particular KCP instance.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.permissionClaims[*].resource">.spec.permissionClaims[*].resource&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>resource is the name of the resource. Note: it is worth noting that you can not ask for permissions for resource provided by a CRD not provided by an api export.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status">.status&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Status communicates the observed state.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions">.status.conditions&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>conditions is a list of conditions that apply to the APIExport.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*]">.status.conditions[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Condition defines an observation of a object operational state.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].lastTransitionTime">.status.conditions[*].lastTransitionTime&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].message">.status.conditions[*].message&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>A human readable message indicating details about the transition. This field may be empty.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].reason">.status.conditions[*].reason&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>The reason for the condition&amp;rsquo;s last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].severity">.status.conditions[*].severity&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].status">.status.conditions[*].status&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Status of the condition, one of True, False, Unknown.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].type">.status.conditions[*].type&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.identityHash">.status.identityHash&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>identityHash is the hash of the API identity key of this APIExport. This value is immutable as soon as it is set.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.virtualWorkspaces">.status.virtualWorkspaces&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>virtualWorkspaces contains all APIExport virtual workspace URLs.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.virtualWorkspaces[*]">.status.virtualWorkspaces[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.virtualWorkspaces[*].url">.status.virtualWorkspaces[*].url&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>url is an APIExport virtual workspace URL.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div></description></item><item><title>Docs: APIResourceImport CRD schema reference (group apiresource.kcp.dev)</title><link>http://kcp-dev.github.io/docs/kcp-core/crd-reference/apiresourceimports.apiresource.kcp.dev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kcp-dev.github.io/docs/kcp-core/crd-reference/apiresourceimports.apiresource.kcp.dev/</guid><description>
&lt;h2 id="apiresourceimport">APIResourceImport&lt;/h2>
&lt;dl class="crd-meta">
&lt;dt class="fullname">Full name:&lt;/dt>
&lt;dd class="fullname">apiresourceimports.apiresource.kcp.dev&lt;/dd>
&lt;dt class="groupname">Group:&lt;/dt>
&lt;dd class="groupname">apiresource.kcp.dev&lt;/dd>
&lt;dt class="singularname">Singular name:&lt;/dt>
&lt;dd class="singularname">apiresourceimport&lt;/dd>
&lt;dt class="pluralname">Plural name:&lt;/dt>
&lt;dd class="pluralname">apiresourceimports&lt;/dd>
&lt;dt class="scope">Scope:&lt;/dt>
&lt;dd class="scope">Cluster&lt;/dd>
&lt;dt class="versions">Versions:&lt;/dt>
&lt;dd class="versions">&lt;a class="version" href="#v1alpha1" title="Show schema for version v1alpha1">v1alpha1&lt;/a>&lt;/dd>
&lt;/dl>
&lt;div class="crd-schema-version">
&lt;h2 id="v1alpha1">Version v1alpha1&lt;/h2>
&lt;h3 id="property-details-v1alpha1">Properties&lt;/h3>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.apiVersion">.apiVersion&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: &lt;a href="https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources">https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources&lt;/a>&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.kind">.kind&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: &lt;a href="https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds">https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds&lt;/a>&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.metadata">.metadata&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec">.spec&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>APIResourceImportSpec holds the desired state of the APIResourceImport (from the client).&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.categories">.spec.categories&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>categories is a list of grouped resources this custom resource belongs to (e.g. &amp;lsquo;all&amp;rsquo;). This is published in API discovery documents, and used by clients to support invocations like &lt;code>kubectl get all&lt;/code>.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.categories[*]">.spec.categories[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.columnDefinitions">.spec.columnDefinitions&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.columnDefinitions[*]">.spec.columnDefinitions[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.columnDefinitions[*].description">.spec.columnDefinitions[*].description&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>description is a human readable description of this column.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.columnDefinitions[*].format">.spec.columnDefinitions[*].format&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>format is an optional OpenAPI type modifier for this column. A format modifies the type and imposes additional rules, like date or time formatting for a string. The &amp;lsquo;name&amp;rsquo; format is applied to the primary identifier column which has type &amp;lsquo;string&amp;rsquo; to assist in clients identifying column is the resource name. See &lt;a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types">https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types&lt;/a> for more.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.columnDefinitions[*].jsonPath">.spec.columnDefinitions[*].jsonPath&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.columnDefinitions[*].name">.spec.columnDefinitions[*].name&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>name is a human readable name for the column.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.columnDefinitions[*].priority">.spec.columnDefinitions[*].priority&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">integer&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>priority is an integer defining the relative importance of this column compared to others. Lower numbers are considered higher priority. Columns that may be omitted in limited space scenarios should be given a higher priority.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.columnDefinitions[*].type">.spec.columnDefinitions[*].type&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>type is an OpenAPI type definition for this column, such as number, integer, string, or array. See &lt;a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types">https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types&lt;/a> for more.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.groupVersion">.spec.groupVersion&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.groupVersion.group">.spec.groupVersion.group&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.groupVersion.version">.spec.groupVersion.version&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.kind">.spec.kind&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom resource instances will use this value as the &lt;code>kind&lt;/code> attribute in API calls.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.listKind">.spec.listKind&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>listKind is the serialized kind of the list for this resource. Defaults to &amp;ldquo;&lt;code>kind&lt;/code>List&amp;rdquo;.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.location">.spec.location&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Locaton the API resource is imported from This field is required&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.openAPIV3Schema">.spec.openAPIV3Schema&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.plural">.spec.plural&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>plural is the plural name of the resource to serve. The custom resources are served under &lt;code>/apis/&amp;lt;group&amp;gt;/&amp;lt;version&amp;gt;/.../&amp;lt;plural&amp;gt;&lt;/code>. Must match the name of the CustomResourceDefinition (in the form &lt;code>&amp;lt;names.plural&amp;gt;.&amp;lt;group&amp;gt;&lt;/code>). Must be all lowercase.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.schemaUpdateStrategy">.spec.schemaUpdateStrategy&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>SchemaUpdateStrategy defines the schema update strategy for this API Resource import. Default value is UpdateUnpublished&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.scope">.spec.scope&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>ResourceScope is an enum defining the different scopes available to a custom resource&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.shortNames">.spec.shortNames&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like &lt;code>kubectl get &amp;lt;shortname&amp;gt;&lt;/code>. It must be all lowercase.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.shortNames[*]">.spec.shortNames[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.singular">.spec.singular&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased &lt;code>kind&lt;/code>.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.subResources">.spec.subResources&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.subResources[*]">.spec.subResources[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.subResources[*].name">.spec.subResources[*].name&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status">.status&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>APIResourceImportStatus communicates the observed state of the APIResourceImport (from the controller).&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions">.status.conditions&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*]">.status.conditions[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>APIResourceImportCondition contains details for the current condition of this negotiated api resource.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].lastTransitionTime">.status.conditions[*].lastTransitionTime&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Last time the condition transitioned from one status to another.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].message">.status.conditions[*].message&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Human-readable message indicating details about last transition.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].reason">.status.conditions[*].reason&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Unique, one-word, CamelCase reason for the condition&amp;rsquo;s last transition.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].status">.status.conditions[*].status&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Status is the status of the condition. Can be True, False, Unknown.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].type">.status.conditions[*].type&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Type is the type of the condition. Types include Compatible.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div></description></item><item><title>Docs: APIResourceSchema CRD schema reference (group apis.kcp.dev)</title><link>http://kcp-dev.github.io/docs/kcp-core/crd-reference/apiresourceschemas.apis.kcp.dev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kcp-dev.github.io/docs/kcp-core/crd-reference/apiresourceschemas.apis.kcp.dev/</guid><description>
&lt;h2 id="apiresourceschema">APIResourceSchema&lt;/h2>
&lt;dl class="crd-meta">
&lt;dt class="fullname">Full name:&lt;/dt>
&lt;dd class="fullname">apiresourceschemas.apis.kcp.dev&lt;/dd>
&lt;dt class="groupname">Group:&lt;/dt>
&lt;dd class="groupname">apis.kcp.dev&lt;/dd>
&lt;dt class="singularname">Singular name:&lt;/dt>
&lt;dd class="singularname">apiresourceschema&lt;/dd>
&lt;dt class="pluralname">Plural name:&lt;/dt>
&lt;dd class="pluralname">apiresourceschemas&lt;/dd>
&lt;dt class="scope">Scope:&lt;/dt>
&lt;dd class="scope">Cluster&lt;/dd>
&lt;dt class="versions">Versions:&lt;/dt>
&lt;dd class="versions">&lt;a class="version" href="#v1alpha1" title="Show schema for version v1alpha1">v1alpha1&lt;/a>&lt;/dd>
&lt;/dl>
&lt;div class="crd-schema-version">
&lt;h2 id="v1alpha1">Version v1alpha1&lt;/h2>
&lt;h3 id="property-details-v1alpha1">Properties&lt;/h3>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.apiVersion">.apiVersion&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: &lt;a href="https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources">https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources&lt;/a>&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.kind">.kind&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: &lt;a href="https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds">https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds&lt;/a>&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.metadata">.metadata&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec">.spec&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Spec holds the desired state.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.group">.spec.group&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>group is the API group of the defined custom resource. Empty string means the core API group. The resources are served under &lt;code>/apis/&amp;lt;group&amp;gt;/...&lt;/code> or &lt;code>/api&lt;/code> for the core group.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.names">.spec.names&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>names specify the resource and kind names for the custom resource.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.names.categories">.spec.names.categories&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>categories is a list of grouped resources this custom resource belongs to (e.g. &amp;lsquo;all&amp;rsquo;). This is published in API discovery documents, and used by clients to support invocations like &lt;code>kubectl get all&lt;/code>.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.names.categories[*]">.spec.names.categories[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.names.kind">.spec.names.kind&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom resource instances will use this value as the &lt;code>kind&lt;/code> attribute in API calls.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.names.listKind">.spec.names.listKind&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>listKind is the serialized kind of the list for this resource. Defaults to &amp;ldquo;&lt;code>kind&lt;/code>List&amp;rdquo;.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.names.plural">.spec.names.plural&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>plural is the plural name of the resource to serve. The custom resources are served under &lt;code>/apis/&amp;lt;group&amp;gt;/&amp;lt;version&amp;gt;/.../&amp;lt;plural&amp;gt;&lt;/code>. Must match the name of the CustomResourceDefinition (in the form &lt;code>&amp;lt;names.plural&amp;gt;.&amp;lt;group&amp;gt;&lt;/code>). Must be all lowercase.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.names.shortNames">.spec.names.shortNames&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like &lt;code>kubectl get &amp;lt;shortname&amp;gt;&lt;/code>. It must be all lowercase.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.names.shortNames[*]">.spec.names.shortNames[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.names.singular">.spec.names.singular&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased &lt;code>kind&lt;/code>.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.scope">.spec.scope&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>scope indicates whether the defined custom resource is cluster- or namespace-scoped. Allowed values are &lt;code>Cluster&lt;/code> and &lt;code>Namespaced&lt;/code>.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.versions">.spec.versions&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>versions is the API version of the defined custom resource.
Note: the OpenAPI v3 schemas must be equal for all versions until CEL version migration is supported.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.versions[*]">.spec.versions[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>APIResourceVersion describes one API version of a resource.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.versions[*].additionalPrinterColumns">.spec.versions[*].additionalPrinterColumns&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>additionalPrinterColumns specifies additional columns returned in Table output. See &lt;a href="https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables">https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables&lt;/a> for details. If no columns are specified, a single column displaying the age of the custom resource is used.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-4">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.versions[*].additionalPrinterColumns[*]">.spec.versions[*].additionalPrinterColumns[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>CustomResourceColumnDefinition specifies a column for server side printing.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-5">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.versions[*].additionalPrinterColumns[*].description">.spec.versions[*].additionalPrinterColumns[*].description&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>description is a human readable description of this column.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-5">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.versions[*].additionalPrinterColumns[*].format">.spec.versions[*].additionalPrinterColumns[*].format&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>format is an optional OpenAPI type definition for this column. The &amp;lsquo;name&amp;rsquo; format is applied to the primary identifier column to assist in clients identifying column is the resource name. See &lt;a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types">https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types&lt;/a> for details.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-5">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.versions[*].additionalPrinterColumns[*].jsonPath">.spec.versions[*].additionalPrinterColumns[*].jsonPath&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>jsonPath is a simple JSON path (i.e. with array notation) which is evaluated against each custom resource to produce the value for this column.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-5">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.versions[*].additionalPrinterColumns[*].name">.spec.versions[*].additionalPrinterColumns[*].name&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>name is a human readable name for the column.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-5">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.versions[*].additionalPrinterColumns[*].priority">.spec.versions[*].additionalPrinterColumns[*].priority&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">integer&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>priority is an integer defining the relative importance of this column compared to others. Lower numbers are considered higher priority. Columns that may be omitted in limited space scenarios should be given a priority greater than 0.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-5">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.versions[*].additionalPrinterColumns[*].type">.spec.versions[*].additionalPrinterColumns[*].type&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>type is an OpenAPI type definition for this column. See &lt;a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types">https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types&lt;/a> for details.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.versions[*].deprecated">.spec.versions[*].deprecated&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">boolean&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>deprecated indicates this version of the custom resource API is deprecated. When set to true, API requests to this version receive a warning header in the server response. Defaults to false.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.versions[*].deprecationWarning">.spec.versions[*].deprecationWarning&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>deprecationWarning overrides the default warning returned to API clients. May only be set when &lt;code>deprecated&lt;/code> is true. The default warning indicates this version is deprecated and recommends use of the newest served version of equal or greater stability, if one exists.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.versions[*].name">.spec.versions[*].name&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>name is the version name, e.g. “v1”, “v2beta1”, etc. The custom resources are served under this version at &lt;code>/apis/&amp;lt;group&amp;gt;/&amp;lt;version&amp;gt;/...&lt;/code> if &lt;code>served&lt;/code> is true.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.versions[*].schema">.spec.versions[*].schema&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>schema describes the structural schema used for validation, pruning, and defaulting of this version of the custom resource.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.versions[*].served">.spec.versions[*].served&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">boolean&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>served is a flag enabling/disabling this version from being served via REST APIs&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.versions[*].storage">.spec.versions[*].storage&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">boolean&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>storage indicates this version should be used when persisting custom resources to storage. There must be exactly one version with storage=true.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.versions[*].subresources">.spec.versions[*].subresources&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>subresources specify what subresources this version of the defined custom resource have.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-4">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.versions[*].subresources.scale">.spec.versions[*].subresources.scale&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>scale indicates the custom resource should serve a &lt;code>/scale&lt;/code> subresource that returns an &lt;code>autoscaling/v1&lt;/code> Scale object.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-5">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.versions[*].subresources.scale.labelSelectorPath">.spec.versions[*].subresources.scale.labelSelectorPath&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>labelSelectorPath defines the JSON path inside of a custom resource that corresponds to Scale &lt;code>status.selector&lt;/code>. Only JSON paths without the array notation are allowed. Must be a JSON Path under &lt;code>.status&lt;/code> or &lt;code>.spec&lt;/code>. Must be set to work with HorizontalPodAutoscaler. The field pointed by this JSON path must be a string field (not a complex selector struct) which contains a serialized label selector in string form. More info: &lt;a href="https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions#scale-subresource">https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions#scale-subresource&lt;/a> If there is no value under the given path in the custom resource, the &lt;code>status.selector&lt;/code> value in the &lt;code>/scale&lt;/code> subresource will default to the empty string.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-5">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.versions[*].subresources.scale.specReplicasPath">.spec.versions[*].subresources.scale.specReplicasPath&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>specReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale &lt;code>spec.replicas&lt;/code>. Only JSON paths without the array notation are allowed. Must be a JSON Path under &lt;code>.spec&lt;/code>. If there is no value under the given path in the custom resource, the &lt;code>/scale&lt;/code> subresource will return an error on GET.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-5">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.versions[*].subresources.scale.statusReplicasPath">.spec.versions[*].subresources.scale.statusReplicasPath&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>statusReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale &lt;code>status.replicas&lt;/code>. Only JSON paths without the array notation are allowed. Must be a JSON Path under &lt;code>.status&lt;/code>. If there is no value under the given path in the custom resource, the &lt;code>status.replicas&lt;/code> value in the &lt;code>/scale&lt;/code> subresource will default to 0.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-4">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.versions[*].subresources.status">.spec.versions[*].subresources.status&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>status indicates the custom resource should serve a &lt;code>/status&lt;/code> subresource. When enabled: 1. requests to the custom resource primary endpoint ignore changes to the &lt;code>status&lt;/code> stanza of the object. 2. requests to the custom resource &lt;code>/status&lt;/code> subresource ignore changes to anything other than the &lt;code>status&lt;/code> stanza of the object.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div></description></item><item><title>Docs: ClusterWorkspace CRD schema reference (group tenancy.kcp.dev)</title><link>http://kcp-dev.github.io/docs/kcp-core/crd-reference/clusterworkspaces.tenancy.kcp.dev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kcp-dev.github.io/docs/kcp-core/crd-reference/clusterworkspaces.tenancy.kcp.dev/</guid><description>
&lt;h2 id="clusterworkspace">ClusterWorkspace&lt;/h2>
&lt;dl class="crd-meta">
&lt;dt class="fullname">Full name:&lt;/dt>
&lt;dd class="fullname">clusterworkspaces.tenancy.kcp.dev&lt;/dd>
&lt;dt class="groupname">Group:&lt;/dt>
&lt;dd class="groupname">tenancy.kcp.dev&lt;/dd>
&lt;dt class="singularname">Singular name:&lt;/dt>
&lt;dd class="singularname">clusterworkspace&lt;/dd>
&lt;dt class="pluralname">Plural name:&lt;/dt>
&lt;dd class="pluralname">clusterworkspaces&lt;/dd>
&lt;dt class="scope">Scope:&lt;/dt>
&lt;dd class="scope">Cluster&lt;/dd>
&lt;dt class="versions">Versions:&lt;/dt>
&lt;dd class="versions">&lt;a class="version" href="#v1alpha1" title="Show schema for version v1alpha1">v1alpha1&lt;/a>&lt;/dd>
&lt;/dl>
&lt;div class="crd-schema-version">
&lt;h2 id="v1alpha1">Version v1alpha1&lt;/h2>
&lt;h3 id="property-details-v1alpha1">Properties&lt;/h3>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.apiVersion">.apiVersion&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: &lt;a href="https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources">https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources&lt;/a>&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.kind">.kind&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: &lt;a href="https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds">https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds&lt;/a>&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.metadata">.metadata&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.metadata.name">.metadata.name&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec">.spec&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>ClusterWorkspaceSpec holds the desired state of the ClusterWorkspace.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.readOnly">.spec.readOnly&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">boolean&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.shard">.spec.shard&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>shard constraints onto which shards this cluster workspace can be scheduled to. if the constraint is not fulfilled by the current location stored in the status, movement will be attempted.
Either shard name or shard selector must be specified.
If the no shard constraints are specified, an aribtrary shard is chosen.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.shard.name">.spec.shard.name&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>name is the name of ClusterWorkspaceShard.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.shard.selector">.spec.shard.selector&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>selector is a label selector that filters shard scheduling targets.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.shard.selector.matchExpressions">.spec.shard.selector.matchExpressions&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>matchExpressions is a list of label selector requirements. The requirements are ANDed.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-4">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.shard.selector.matchExpressions[*]">.spec.shard.selector.matchExpressions[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-5">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.shard.selector.matchExpressions[*].key">.spec.shard.selector.matchExpressions[*].key&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>key is the label key that the selector applies to.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-5">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.shard.selector.matchExpressions[*].operator">.spec.shard.selector.matchExpressions[*].operator&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>operator represents a key&amp;rsquo;s relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-5">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.shard.selector.matchExpressions[*].values">.spec.shard.selector.matchExpressions[*].values&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-6">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.shard.selector.matchExpressions[*].values[*]">.spec.shard.selector.matchExpressions[*].values[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.shard.selector.matchLabels">.spec.shard.selector.matchLabels&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is &amp;ldquo;key&amp;rdquo;, the operator is &amp;ldquo;In&amp;rdquo;, and the values array contains only &amp;ldquo;value&amp;rdquo;. The requirements are ANDed.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.type">.spec.type&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>type defines properties of the workspace both on creation (e.g. initial resources and initially installed APIs) and during runtime (e.g. permissions). If no type is provided, the default type for the workspace in which this workspace is nesting will be used.
The type is a reference to a ClusterWorkspaceType in the listed workspace, but lower-cased. The ClusterWorkspaceType existence is validated at admission during creation. The type is immutable after creation. The use of a type is gated via the RBAC clusterworkspacetypes/use resource permission.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.type.name">.spec.type.name&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>name is the name of the ClusterWorkspaceType&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.type.path">.spec.type.path&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>path is an absolute reference to the workspace that owns this type, e.g. root:org:ws.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status">.status&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>ClusterWorkspaceStatus communicates the observed state of the ClusterWorkspace.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.baseURL">.status.baseURL&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Base URL where this ClusterWorkspace can be targeted. This will generally be of the form: https://&lt;workspace shard server>/cluster/&lt;workspace name>. But a workspace could also be targetable by a unique hostname in the future.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions">.status.conditions&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Current processing state of the ClusterWorkspace.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*]">.status.conditions[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Condition defines an observation of a object operational state.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].lastTransitionTime">.status.conditions[*].lastTransitionTime&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].message">.status.conditions[*].message&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>A human readable message indicating details about the transition. This field may be empty.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].reason">.status.conditions[*].reason&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>The reason for the condition&amp;rsquo;s last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].severity">.status.conditions[*].severity&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].status">.status.conditions[*].status&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Status of the condition, one of True, False, Unknown.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].type">.status.conditions[*].type&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.initializers">.status.initializers&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>initializers are set on creation by the system and must be cleared by a controller before the workspace can be used. The workspace will stay in the phase &amp;ldquo;Initializing&amp;rdquo; state until all initializers are cleared.
A cluster workspace in &amp;ldquo;Initializing&amp;rdquo; state are gated via the RBAC clusterworkspaces/initialize resource permission.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.initializers[*]">.status.initializers[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>ClusterWorkspaceInitializer is a unique string corresponding to a cluster workspace initialization controller for the given type of workspaces.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.location">.status.location&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Contains workspace placement information.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.location.current">.status.location.current&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Current workspace placement (shard).&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.location.target">.status.location.target&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Target workspace placement (shard).&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.phase">.status.phase&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Phase of the workspace (Scheduling / Initializing / Ready)&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div></description></item><item><title>Docs: ClusterWorkspaceShard CRD schema reference (group tenancy.kcp.dev)</title><link>http://kcp-dev.github.io/docs/kcp-core/crd-reference/clusterworkspaceshards.tenancy.kcp.dev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kcp-dev.github.io/docs/kcp-core/crd-reference/clusterworkspaceshards.tenancy.kcp.dev/</guid><description>
&lt;h2 id="clusterworkspaceshard">ClusterWorkspaceShard&lt;/h2>
&lt;dl class="crd-meta">
&lt;dt class="fullname">Full name:&lt;/dt>
&lt;dd class="fullname">clusterworkspaceshards.tenancy.kcp.dev&lt;/dd>
&lt;dt class="groupname">Group:&lt;/dt>
&lt;dd class="groupname">tenancy.kcp.dev&lt;/dd>
&lt;dt class="singularname">Singular name:&lt;/dt>
&lt;dd class="singularname">clusterworkspaceshard&lt;/dd>
&lt;dt class="pluralname">Plural name:&lt;/dt>
&lt;dd class="pluralname">clusterworkspaceshards&lt;/dd>
&lt;dt class="scope">Scope:&lt;/dt>
&lt;dd class="scope">Cluster&lt;/dd>
&lt;dt class="versions">Versions:&lt;/dt>
&lt;dd class="versions">&lt;a class="version" href="#v1alpha1" title="Show schema for version v1alpha1">v1alpha1&lt;/a>&lt;/dd>
&lt;/dl>
&lt;div class="crd-schema-version">
&lt;h2 id="v1alpha1">Version v1alpha1&lt;/h2>
&lt;h3 id="property-details-v1alpha1">Properties&lt;/h3>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.apiVersion">.apiVersion&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: &lt;a href="https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources">https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources&lt;/a>&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.kind">.kind&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: &lt;a href="https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds">https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds&lt;/a>&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.metadata">.metadata&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec">.spec&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>ClusterWorkspaceShardSpec holds the desired state of the ClusterWorkspaceShard.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.baseURL">.spec.baseURL&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>baseURL is the address of the KCP shard for direct connections, e.g. by some front-proxy doing the fan-out to the shards.
This will be defaulted to the shard&amp;rsquo;s external address if not specified. Note that this is only sensible in single-shards setups.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.externalURL">.spec.externalURL&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>externalURL is the externally visible address presented to users in Workspace URLs. Changing this will break all existing workspaces on that shard, i.e. existing kubeconfigs of clients will be invalid. Hence, when changing this value, the old URL used by clients must keep working.
The external address will not be unique if a front-proxy does a fan-out to shards, but all workspace client will talk to the front-proxy. In that case, put the address of the front-proxy here.
Note that movement of shards is only possible (in the future) between shards that share a common external URL.
This will be defaulted to the value of the baseURL.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.virtualWorkspaceURL">.spec.virtualWorkspaceURL&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>virtualWorkspaceURL is the address of the virtual workspace server associated with this shard. It can be a direct address, an address of a front-proxy or even an address of an LB. As of today this address is assigned to APIExports.
This will be defaulted to the shard&amp;rsquo;s base address if not specified.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status">.status&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>ClusterWorkspaceShardStatus communicates the observed state of the ClusterWorkspaceShard.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.capacity">.status.capacity&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Set of integer resources that workspaces can be scheduled into&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions">.status.conditions&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Current processing state of the ClusterWorkspaceShard.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*]">.status.conditions[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Condition defines an observation of a object operational state.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].lastTransitionTime">.status.conditions[*].lastTransitionTime&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].message">.status.conditions[*].message&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>A human readable message indicating details about the transition. This field may be empty.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].reason">.status.conditions[*].reason&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>The reason for the condition&amp;rsquo;s last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].severity">.status.conditions[*].severity&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].status">.status.conditions[*].status&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Status of the condition, one of True, False, Unknown.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].type">.status.conditions[*].type&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div></description></item><item><title>Docs: ClusterWorkspaceType CRD schema reference (group tenancy.kcp.dev)</title><link>http://kcp-dev.github.io/docs/kcp-core/crd-reference/clusterworkspacetypes.tenancy.kcp.dev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kcp-dev.github.io/docs/kcp-core/crd-reference/clusterworkspacetypes.tenancy.kcp.dev/</guid><description>
&lt;h2 id="clusterworkspacetype">ClusterWorkspaceType&lt;/h2>
&lt;dl class="crd-meta">
&lt;dt class="fullname">Full name:&lt;/dt>
&lt;dd class="fullname">clusterworkspacetypes.tenancy.kcp.dev&lt;/dd>
&lt;dt class="groupname">Group:&lt;/dt>
&lt;dd class="groupname">tenancy.kcp.dev&lt;/dd>
&lt;dt class="singularname">Singular name:&lt;/dt>
&lt;dd class="singularname">clusterworkspacetype&lt;/dd>
&lt;dt class="pluralname">Plural name:&lt;/dt>
&lt;dd class="pluralname">clusterworkspacetypes&lt;/dd>
&lt;dt class="scope">Scope:&lt;/dt>
&lt;dd class="scope">Cluster&lt;/dd>
&lt;dt class="versions">Versions:&lt;/dt>
&lt;dd class="versions">&lt;a class="version" href="#v1alpha1" title="Show schema for version v1alpha1">v1alpha1&lt;/a>&lt;/dd>
&lt;/dl>
&lt;div class="crd-schema-version">
&lt;h2 id="v1alpha1">Version v1alpha1&lt;/h2>
&lt;h3 id="property-details-v1alpha1">Properties&lt;/h3>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.apiVersion">.apiVersion&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: &lt;a href="https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources">https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources&lt;/a>&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.kind">.kind&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: &lt;a href="https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds">https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds&lt;/a>&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.metadata">.metadata&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.metadata.name">.metadata.name&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec">.spec&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.additionalWorkspaceLabels">.spec.additionalWorkspaceLabels&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>additionalWorkspaceLabels are a set of labels that will be added to a ClusterWorkspace on creation.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.defaultChildWorkspaceType">.spec.defaultChildWorkspaceType&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>defaultChildWorkspaceType is the ClusterWorkspaceType that will be used by default if another, nested ClusterWorkspace is created in a workspace of this type. When this field is unset, the user must specify a type when creating nested workspaces. Extending another ClusterWorkspaceType does not inherit its defaultChildWorkspaceType.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.defaultChildWorkspaceType.name">.spec.defaultChildWorkspaceType.name&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>name is the name of the ClusterWorkspaceType&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.defaultChildWorkspaceType.path">.spec.defaultChildWorkspaceType.path&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>path is an absolute reference to the workspace that owns this type, e.g. root:org:ws.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.extend">.spec.extend&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>extend is a list of other ClusterWorkspaceTypes whose initializers and limitAllowedChildren and limitAllowedParents this ClusterWorkspaceType is inheriting. By (transitively) extending another ClusterWorkspaceType, this ClusterWorkspaceType will be considered as that other type in evaluation of limitAllowedChildren and limitAllowedParents constraints.
A dependency cycle stop this ClusterWorkspaceType from being admitted as the type of a ClusterWorkspace.
A non-existing dependency stop this ClusterWorkspaceType from being admitted as the type of a ClusterWorkspace.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.extend.with">.spec.extend.with&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>with are ClusterWorkspaceTypes whose initializers are added to the list for the owning type, and for whom the owning type becomes an alias, as long as all of their required types are not mentioned in without.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.extend.with[*]">.spec.extend.with[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>ClusterWorkspaceTypeReference is a globally unique, fully qualified reference to a cluster workspace type.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-4">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.extend.with[*].name">.spec.extend.with[*].name&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>name is the name of the ClusterWorkspaceType&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-4">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.extend.with[*].path">.spec.extend.with[*].path&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>path is an absolute reference to the workspace that owns this type, e.g. root:org:ws.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.initializer">.spec.initializer&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">boolean&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>initializer determines if this ClusterWorkspaceType has an associated initializing controller. These controllers are used to add functionality to a ClusterWorkspace; all controllers must finish their work before the ClusterWorkspace becomes ready for use.
One initializing controller is supported per ClusterWorkspaceType; the identifier for this initializer will be a colon-delimited string using the workspace in which the ClusterWorkspaceType is defined, and the type&amp;rsquo;s name. For example, if a ClusterWorkspaceType &lt;code>example&lt;/code> is created in the &lt;code>root:org&lt;/code> workspace, the implicit initializer name is &lt;code>root:org:Example&lt;/code>.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.limitAllowedChildren">.spec.limitAllowedChildren&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>limitAllowedChildren specifies constraints for sub-workspaces created in workspaces of this type. These are in addition to child constraints of types this one extends.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.limitAllowedChildren.none">.spec.limitAllowedChildren.none&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">boolean&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>none means that no type matches.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.limitAllowedChildren.types">.spec.limitAllowedChildren.types&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>types is a list of ClusterWorkspaceTypes that match. A workspace type extending another workspace type automatically is considered as that extended type as well (even transitively).
An empty list matches all types.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.limitAllowedChildren.types[*]">.spec.limitAllowedChildren.types[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>ClusterWorkspaceTypeReference is a globally unique, fully qualified reference to a cluster workspace type.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-4">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.limitAllowedChildren.types[*].name">.spec.limitAllowedChildren.types[*].name&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>name is the name of the ClusterWorkspaceType&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-4">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.limitAllowedChildren.types[*].path">.spec.limitAllowedChildren.types[*].path&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>path is an absolute reference to the workspace that owns this type, e.g. root:org:ws.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.limitAllowedParents">.spec.limitAllowedParents&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>limitAllowedParents specifies constraints for the parent workspace that workspaces of this type are created in. These are in addition to parent constraints of types this one extends.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.limitAllowedParents.none">.spec.limitAllowedParents.none&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">boolean&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>none means that no type matches.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.limitAllowedParents.types">.spec.limitAllowedParents.types&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>types is a list of ClusterWorkspaceTypes that match. A workspace type extending another workspace type automatically is considered as that extended type as well (even transitively).
An empty list matches all types.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.limitAllowedParents.types[*]">.spec.limitAllowedParents.types[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>ClusterWorkspaceTypeReference is a globally unique, fully qualified reference to a cluster workspace type.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-4">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.limitAllowedParents.types[*].name">.spec.limitAllowedParents.types[*].name&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>name is the name of the ClusterWorkspaceType&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-4">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.limitAllowedParents.types[*].path">.spec.limitAllowedParents.types[*].path&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>path is an absolute reference to the workspace that owns this type, e.g. root:org:ws.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status">.status&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>ClusterWorkspaceTypeStatus defines the observed state of ClusterWorkspaceType.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions">.status.conditions&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>conditions is a list of conditions that apply to the APIExport.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*]">.status.conditions[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Condition defines an observation of a object operational state.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].lastTransitionTime">.status.conditions[*].lastTransitionTime&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].message">.status.conditions[*].message&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>A human readable message indicating details about the transition. This field may be empty.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].reason">.status.conditions[*].reason&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>The reason for the condition&amp;rsquo;s last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].severity">.status.conditions[*].severity&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].status">.status.conditions[*].status&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Status of the condition, one of True, False, Unknown.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].type">.status.conditions[*].type&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.virtualWorkspaces">.status.virtualWorkspaces&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>virtualWorkspaces contains all APIExport virtual workspace URLs.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.virtualWorkspaces[*]">.status.virtualWorkspaces[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.virtualWorkspaces[*].url">.status.virtualWorkspaces[*].url&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>url is a ClusterWorkspaceType initialization virtual workspace URL.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div></description></item><item><title>Docs: Location CRD schema reference (group scheduling.kcp.dev)</title><link>http://kcp-dev.github.io/docs/kcp-core/crd-reference/locations.scheduling.kcp.dev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kcp-dev.github.io/docs/kcp-core/crd-reference/locations.scheduling.kcp.dev/</guid><description>
&lt;h2 id="location">Location&lt;/h2>
&lt;dl class="crd-meta">
&lt;dt class="fullname">Full name:&lt;/dt>
&lt;dd class="fullname">locations.scheduling.kcp.dev&lt;/dd>
&lt;dt class="groupname">Group:&lt;/dt>
&lt;dd class="groupname">scheduling.kcp.dev&lt;/dd>
&lt;dt class="singularname">Singular name:&lt;/dt>
&lt;dd class="singularname">location&lt;/dd>
&lt;dt class="pluralname">Plural name:&lt;/dt>
&lt;dd class="pluralname">locations&lt;/dd>
&lt;dt class="scope">Scope:&lt;/dt>
&lt;dd class="scope">Cluster&lt;/dd>
&lt;dt class="versions">Versions:&lt;/dt>
&lt;dd class="versions">&lt;a class="version" href="#v1alpha1" title="Show schema for version v1alpha1">v1alpha1&lt;/a>&lt;/dd>
&lt;/dl>
&lt;div class="crd-schema-version">
&lt;h2 id="v1alpha1">Version v1alpha1&lt;/h2>
&lt;h3 id="property-details-v1alpha1">Properties&lt;/h3>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.apiVersion">.apiVersion&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: &lt;a href="https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources">https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources&lt;/a>&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.kind">.kind&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: &lt;a href="https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds">https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds&lt;/a>&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.metadata">.metadata&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec">.spec&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>LocationSpec holds the desired state of the Location.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.availableSelectorLabels">.spec.availableSelectorLabels&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>availableSelectorLabels is a list of labels that can be used to select an instance at this location in a placement object.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.availableSelectorLabels[*]">.spec.availableSelectorLabels[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>AvailableSelectorLabel specifies a label with key name and possible values.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.availableSelectorLabels[*].description">.spec.availableSelectorLabels[*].description&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>description is a human readable description of the label.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.availableSelectorLabels[*].key">.spec.availableSelectorLabels[*].key&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>key is the name of the label.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.availableSelectorLabels[*].values">.spec.availableSelectorLabels[*].values&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>values are the possible values for this labels.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-4">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.availableSelectorLabels[*].values[*]">.spec.availableSelectorLabels[*].values[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>LabelValue specifies a value of a label.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.description">.spec.description&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>description is a human-readable description of the location.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.instanceSelector">.spec.instanceSelector&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>instanceSelector chooses the instances that will be part of this location.
Note that these labels are not what is shown in the Location objects to the user. Depending on context, both will match or won&amp;rsquo;t match.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.instanceSelector.matchExpressions">.spec.instanceSelector.matchExpressions&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>matchExpressions is a list of label selector requirements. The requirements are ANDed.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.instanceSelector.matchExpressions[*]">.spec.instanceSelector.matchExpressions[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-4">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.instanceSelector.matchExpressions[*].key">.spec.instanceSelector.matchExpressions[*].key&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>key is the label key that the selector applies to.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-4">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.instanceSelector.matchExpressions[*].operator">.spec.instanceSelector.matchExpressions[*].operator&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>operator represents a key&amp;rsquo;s relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-4">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.instanceSelector.matchExpressions[*].values">.spec.instanceSelector.matchExpressions[*].values&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-5">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.instanceSelector.matchExpressions[*].values[*]">.spec.instanceSelector.matchExpressions[*].values[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.instanceSelector.matchLabels">.spec.instanceSelector.matchLabels&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is &amp;ldquo;key&amp;rdquo;, the operator is &amp;ldquo;In&amp;rdquo;, and the values array contains only &amp;ldquo;value&amp;rdquo;. The requirements are ANDed.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.resource">.spec.resource&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>resource is the group-version-resource of the instances that are subject to this location.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.resource.group">.spec.resource.group&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>group is the name of an API group.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.resource.resource">.spec.resource.resource&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>resource is the name of the resource.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.resource.version">.spec.resource.version&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>version is the version of the API.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status">.status&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>LocationStatus defines the observed state of Location.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.availableInstances">.status.availableInstances&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">integer&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>available is the number of actual instances that are available at this location.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.instances">.status.instances&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">integer&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>instances is the number of actual instances at this location.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div></description></item><item><title>Docs: NegotiatedAPIResource CRD schema reference (group apiresource.kcp.dev)</title><link>http://kcp-dev.github.io/docs/kcp-core/crd-reference/negotiatedapiresources.apiresource.kcp.dev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kcp-dev.github.io/docs/kcp-core/crd-reference/negotiatedapiresources.apiresource.kcp.dev/</guid><description>
&lt;h2 id="negotiatedapiresource">NegotiatedAPIResource&lt;/h2>
&lt;dl class="crd-meta">
&lt;dt class="fullname">Full name:&lt;/dt>
&lt;dd class="fullname">negotiatedapiresources.apiresource.kcp.dev&lt;/dd>
&lt;dt class="groupname">Group:&lt;/dt>
&lt;dd class="groupname">apiresource.kcp.dev&lt;/dd>
&lt;dt class="singularname">Singular name:&lt;/dt>
&lt;dd class="singularname">negotiatedapiresource&lt;/dd>
&lt;dt class="pluralname">Plural name:&lt;/dt>
&lt;dd class="pluralname">negotiatedapiresources&lt;/dd>
&lt;dt class="scope">Scope:&lt;/dt>
&lt;dd class="scope">Cluster&lt;/dd>
&lt;dt class="versions">Versions:&lt;/dt>
&lt;dd class="versions">&lt;a class="version" href="#v1alpha1" title="Show schema for version v1alpha1">v1alpha1&lt;/a>&lt;/dd>
&lt;/dl>
&lt;div class="crd-schema-version">
&lt;h2 id="v1alpha1">Version v1alpha1&lt;/h2>
&lt;h3 id="property-details-v1alpha1">Properties&lt;/h3>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.apiVersion">.apiVersion&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: &lt;a href="https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources">https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources&lt;/a>&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.kind">.kind&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: &lt;a href="https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds">https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds&lt;/a>&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.metadata">.metadata&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec">.spec&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>NegotiatedAPIResourceSpec holds the desired state of the NegotiatedAPIResource (from the client).&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.categories">.spec.categories&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>categories is a list of grouped resources this custom resource belongs to (e.g. &amp;lsquo;all&amp;rsquo;). This is published in API discovery documents, and used by clients to support invocations like &lt;code>kubectl get all&lt;/code>.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.categories[*]">.spec.categories[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.columnDefinitions">.spec.columnDefinitions&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.columnDefinitions[*]">.spec.columnDefinitions[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.columnDefinitions[*].description">.spec.columnDefinitions[*].description&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>description is a human readable description of this column.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.columnDefinitions[*].format">.spec.columnDefinitions[*].format&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>format is an optional OpenAPI type modifier for this column. A format modifies the type and imposes additional rules, like date or time formatting for a string. The &amp;lsquo;name&amp;rsquo; format is applied to the primary identifier column which has type &amp;lsquo;string&amp;rsquo; to assist in clients identifying column is the resource name. See &lt;a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types">https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types&lt;/a> for more.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.columnDefinitions[*].jsonPath">.spec.columnDefinitions[*].jsonPath&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.columnDefinitions[*].name">.spec.columnDefinitions[*].name&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>name is a human readable name for the column.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.columnDefinitions[*].priority">.spec.columnDefinitions[*].priority&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">integer&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>priority is an integer defining the relative importance of this column compared to others. Lower numbers are considered higher priority. Columns that may be omitted in limited space scenarios should be given a higher priority.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.columnDefinitions[*].type">.spec.columnDefinitions[*].type&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>type is an OpenAPI type definition for this column, such as number, integer, string, or array. See &lt;a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types">https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types&lt;/a> for more.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.groupVersion">.spec.groupVersion&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.groupVersion.group">.spec.groupVersion.group&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.groupVersion.version">.spec.groupVersion.version&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.kind">.spec.kind&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom resource instances will use this value as the &lt;code>kind&lt;/code> attribute in API calls.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.listKind">.spec.listKind&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>listKind is the serialized kind of the list for this resource. Defaults to &amp;ldquo;&lt;code>kind&lt;/code>List&amp;rdquo;.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.openAPIV3Schema">.spec.openAPIV3Schema&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.plural">.spec.plural&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>plural is the plural name of the resource to serve. The custom resources are served under &lt;code>/apis/&amp;lt;group&amp;gt;/&amp;lt;version&amp;gt;/.../&amp;lt;plural&amp;gt;&lt;/code>. Must match the name of the CustomResourceDefinition (in the form &lt;code>&amp;lt;names.plural&amp;gt;.&amp;lt;group&amp;gt;&lt;/code>). Must be all lowercase.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.publish">.spec.publish&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">boolean&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.scope">.spec.scope&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>ResourceScope is an enum defining the different scopes available to a custom resource&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.shortNames">.spec.shortNames&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like &lt;code>kubectl get &amp;lt;shortname&amp;gt;&lt;/code>. It must be all lowercase.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.shortNames[*]">.spec.shortNames[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.singular">.spec.singular&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased &lt;code>kind&lt;/code>.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.subResources">.spec.subResources&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.subResources[*]">.spec.subResources[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.subResources[*].name">.spec.subResources[*].name&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status">.status&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>NegotiatedAPIResourceStatus communicates the observed state of the NegotiatedAPIResource (from the controller).&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions">.status.conditions&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*]">.status.conditions[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>NegotiatedAPIResourceCondition contains details for the current condition of this negotiated api resource.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].lastTransitionTime">.status.conditions[*].lastTransitionTime&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Last time the condition transitioned from one status to another.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].message">.status.conditions[*].message&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Human-readable message indicating details about last transition.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].reason">.status.conditions[*].reason&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Unique, one-word, CamelCase reason for the condition&amp;rsquo;s last transition.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].status">.status.conditions[*].status&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Status is the status of the condition. Can be True, False, Unknown.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].type">.status.conditions[*].type&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Type is the type of the condition. Types include Submitted, Published, Refused and Enforced.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div></description></item><item><title>Docs: Placement CRD schema reference (group scheduling.kcp.dev)</title><link>http://kcp-dev.github.io/docs/kcp-core/crd-reference/placements.scheduling.kcp.dev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kcp-dev.github.io/docs/kcp-core/crd-reference/placements.scheduling.kcp.dev/</guid><description>
&lt;h2 id="placement">Placement&lt;/h2>
&lt;dl class="crd-meta">
&lt;dt class="fullname">Full name:&lt;/dt>
&lt;dd class="fullname">placements.scheduling.kcp.dev&lt;/dd>
&lt;dt class="groupname">Group:&lt;/dt>
&lt;dd class="groupname">scheduling.kcp.dev&lt;/dd>
&lt;dt class="singularname">Singular name:&lt;/dt>
&lt;dd class="singularname">placement&lt;/dd>
&lt;dt class="pluralname">Plural name:&lt;/dt>
&lt;dd class="pluralname">placements&lt;/dd>
&lt;dt class="scope">Scope:&lt;/dt>
&lt;dd class="scope">Cluster&lt;/dd>
&lt;dt class="versions">Versions:&lt;/dt>
&lt;dd class="versions">&lt;a class="version" href="#v1alpha1" title="Show schema for version v1alpha1">v1alpha1&lt;/a>&lt;/dd>
&lt;/dl>
&lt;div class="crd-schema-version">
&lt;h2 id="v1alpha1">Version v1alpha1&lt;/h2>
&lt;h3 id="property-details-v1alpha1">Properties&lt;/h3>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.apiVersion">.apiVersion&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: &lt;a href="https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources">https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources&lt;/a>&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.kind">.kind&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: &lt;a href="https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds">https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds&lt;/a>&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.metadata">.metadata&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec">.spec&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.locationResource">.spec.locationResource&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>locationResource is the group-version-resource of the instances that are subject to the locations to select.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.locationResource.group">.spec.locationResource.group&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>group is the name of an API group.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.locationResource.resource">.spec.locationResource.resource&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>resource is the name of the resource.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.locationResource.version">.spec.locationResource.version&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>version is the version of the API.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.locationSelectors">.spec.locationSelectors&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>loacationSelectors represents a slice of label selector to select a location, these label selectors are logically ORed.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.locationSelectors[*]">.spec.locationSelectors[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.locationSelectors[*].matchExpressions">.spec.locationSelectors[*].matchExpressions&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>matchExpressions is a list of label selector requirements. The requirements are ANDed.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-4">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.locationSelectors[*].matchExpressions[*]">.spec.locationSelectors[*].matchExpressions[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-5">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.locationSelectors[*].matchExpressions[*].key">.spec.locationSelectors[*].matchExpressions[*].key&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>key is the label key that the selector applies to.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-5">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.locationSelectors[*].matchExpressions[*].operator">.spec.locationSelectors[*].matchExpressions[*].operator&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>operator represents a key&amp;rsquo;s relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-5">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.locationSelectors[*].matchExpressions[*].values">.spec.locationSelectors[*].matchExpressions[*].values&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-6">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.locationSelectors[*].matchExpressions[*].values[*]">.spec.locationSelectors[*].matchExpressions[*].values[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.locationSelectors[*].matchLabels">.spec.locationSelectors[*].matchLabels&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is &amp;ldquo;key&amp;rdquo;, the operator is &amp;ldquo;In&amp;rdquo;, and the values array contains only &amp;ldquo;value&amp;rdquo;. The requirements are ANDed.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.locationWorkspace">.spec.locationWorkspace&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>locationWorkspace is an absolute reference to a workspace for the location. If it is not set, the workspace of APIBinding will be used.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.namespaceSelector">.spec.namespaceSelector&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>namespaceSelector is a label selector to select ns. It match all ns by default, but can be specified to a certain set of ns.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.namespaceSelector.matchExpressions">.spec.namespaceSelector.matchExpressions&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>matchExpressions is a list of label selector requirements. The requirements are ANDed.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.namespaceSelector.matchExpressions[*]">.spec.namespaceSelector.matchExpressions[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-4">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.namespaceSelector.matchExpressions[*].key">.spec.namespaceSelector.matchExpressions[*].key&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>key is the label key that the selector applies to.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-4">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.namespaceSelector.matchExpressions[*].operator">.spec.namespaceSelector.matchExpressions[*].operator&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>operator represents a key&amp;rsquo;s relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-4">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.namespaceSelector.matchExpressions[*].values">.spec.namespaceSelector.matchExpressions[*].values&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-5">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.namespaceSelector.matchExpressions[*].values[*]">.spec.namespaceSelector.matchExpressions[*].values[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.namespaceSelector.matchLabels">.spec.namespaceSelector.matchLabels&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is &amp;ldquo;key&amp;rdquo;, the operator is &amp;ldquo;In&amp;rdquo;, and the values array contains only &amp;ldquo;value&amp;rdquo;. The requirements are ANDed.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status">.status&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions">.status.conditions&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Current processing state of the Placement.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*]">.status.conditions[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Condition defines an observation of a object operational state.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].lastTransitionTime">.status.conditions[*].lastTransitionTime&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].message">.status.conditions[*].message&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>A human readable message indicating details about the transition. This field may be empty.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].reason">.status.conditions[*].reason&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>The reason for the condition&amp;rsquo;s last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].severity">.status.conditions[*].severity&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].status">.status.conditions[*].status&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Status of the condition, one of True, False, Unknown.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].type">.status.conditions[*].type&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.phase">.status.phase&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>phase is the current phase of the placement&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.selectedLocation">.status.selectedLocation&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>selectedLocation is the location that a picked by this placement.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.selectedLocation.locationName">.status.selectedLocation.locationName&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Name of the Location.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.selectedLocation.path">.status.selectedLocation.path&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>path is an absolute reference to a workspace, e.g. root:org:ws. The workspace must be some ancestor or a child of some ancestor.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div></description></item><item><title>Docs: SyncTarget CRD schema reference (group workload.kcp.dev)</title><link>http://kcp-dev.github.io/docs/kcp-core/crd-reference/synctargets.workload.kcp.dev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kcp-dev.github.io/docs/kcp-core/crd-reference/synctargets.workload.kcp.dev/</guid><description>
&lt;h2 id="synctarget">SyncTarget&lt;/h2>
&lt;dl class="crd-meta">
&lt;dt class="fullname">Full name:&lt;/dt>
&lt;dd class="fullname">synctargets.workload.kcp.dev&lt;/dd>
&lt;dt class="groupname">Group:&lt;/dt>
&lt;dd class="groupname">workload.kcp.dev&lt;/dd>
&lt;dt class="singularname">Singular name:&lt;/dt>
&lt;dd class="singularname">synctarget&lt;/dd>
&lt;dt class="pluralname">Plural name:&lt;/dt>
&lt;dd class="pluralname">synctargets&lt;/dd>
&lt;dt class="scope">Scope:&lt;/dt>
&lt;dd class="scope">Cluster&lt;/dd>
&lt;dt class="versions">Versions:&lt;/dt>
&lt;dd class="versions">&lt;a class="version" href="#v1alpha1" title="Show schema for version v1alpha1">v1alpha1&lt;/a>&lt;/dd>
&lt;/dl>
&lt;div class="crd-schema-version">
&lt;h2 id="v1alpha1">Version v1alpha1&lt;/h2>
&lt;h3 id="property-details-v1alpha1">Properties&lt;/h3>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.apiVersion">.apiVersion&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: &lt;a href="https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources">https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources&lt;/a>&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.kind">.kind&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: &lt;a href="https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds">https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds&lt;/a>&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.metadata">.metadata&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.metadata.name">.metadata.name&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec">.spec&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Spec holds the desired state.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.cells">.spec.cells&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Cells is a set of labels to identify the cells the SyncTarget belongs to. SyncTargets with the same cells run as they are in the same physical cluster. Each key/value pair in the cells should be added and updated by service providers (i.e. a network provider updates one key/value, while the storage provider updates another.)&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.evictAfter">.spec.evictAfter&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>EvictAfter controls cluster schedulability of new and existing workloads. After the EvictAfter time, any workload scheduled to the cluster will be unassigned from the cluster. By default, workloads scheduled to the cluster are not evicted.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.supportedAPIExports">.spec.supportedAPIExports&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>SupportedAPIExports defines a set of APIExports supposed to be supported by this SyncTarget. The SyncTarget will be selected to deploy the workload only when the resource schema on the SyncTarget is compatible with the resource schema included in the exports. If it is not set, the kubernetes export in the same workspace will be used by default.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.supportedAPIExports[*]">.spec.supportedAPIExports[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>ExportReference describes a reference to an APIExport. Exactly one of the fields must be set.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.supportedAPIExports[*].workspace">.spec.supportedAPIExports[*].workspace&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>workspace is a reference to an APIExport in the same organization. The creator of the APIBinding needs to have access to the APIExport with the verb &lt;code>bind&lt;/code> in order to bind to it.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-4">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.supportedAPIExports[*].workspace.exportName">.spec.supportedAPIExports[*].workspace.exportName&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Name of the APIExport that describes the API.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-4">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.supportedAPIExports[*].workspace.path">.spec.supportedAPIExports[*].workspace.path&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>path is an absolute reference to a workspace, e.g. root:org:ws. The workspace must be some ancestor or a child of some ancestor. If it is unset, the path of the APIBinding is used.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.spec.unschedulable">.spec.unschedulable&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">boolean&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Unschedulable controls cluster schedulability of new workloads. By default, cluster is schedulable.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status">.status&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Status communicates the observed state.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.allocatable">.status.allocatable&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Allocatable represents the resources that are available for scheduling.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.capacity">.status.capacity&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Capacity represents the total resources of the cluster.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions">.status.conditions&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Current processing state of the SyncTarget.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*]">.status.conditions[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Condition defines an observation of a object operational state.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].lastTransitionTime">.status.conditions[*].lastTransitionTime&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].message">.status.conditions[*].message&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>A human readable message indicating details about the transition. This field may be empty.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].reason">.status.conditions[*].reason&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>The reason for the condition&amp;rsquo;s last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].severity">.status.conditions[*].severity&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].status">.status.conditions[*].status&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Status of the condition, one of True, False, Unknown.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.conditions[*].type">.status.conditions[*].type&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.lastSyncerHeartbeatTime">.status.lastSyncerHeartbeatTime&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>A timestamp indicating when the syncer last reported status.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.syncedResources">.status.syncedResources&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>SyncedResources represents the resources that the syncer of the SyncTarget can sync. It MUST be updated by kcp server.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.syncedResources[*]">.status.syncedResources[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.syncedResources[*].group">.status.syncedResources[*].group&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>group is the name of an API group. For core groups this is the empty string &amp;lsquo;&amp;ldquo;&amp;rdquo;&amp;rsquo;.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.syncedResources[*].identityHash">.status.syncedResources[*].identityHash&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>identityHash is the identity for a given APIExport that the APIResourceSchema belongs to. The hash can be found on APIExport and APIResourceSchema&amp;rsquo;s status. It will be empty for core types.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.syncedResources[*].resource">.status.syncedResources[*].resource&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>resource is the name of the resource. Note: it is worth noting that you can not ask for permissions for resource provided by a CRD not provided by an api export.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.syncedResources[*].state">.status.syncedResources[*].state&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>state indicate whether the resources schema is compatible to the SyncTarget. It must be updated by syncer after checking the API compaibility on SyncTarget.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.syncedResources[*].versions">.status.syncedResources[*].versions&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>versions are the resource versions the syncer can choose to sync depending on availability on the downstream cluster. Conversion to the storage version, if necessary, will be done on the kcp side. The versions are ordered by precedence and the first version compatible is preferred by syncer.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-4">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.syncedResources[*].versions[*]">.status.syncedResources[*].versions[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.virtualWorkspaces">.status.virtualWorkspaces&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>VirtualWorkspaces contains all syncer virtual workspace URLs.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.virtualWorkspaces[*]">.status.virtualWorkspaces[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1alpha1-.status.virtualWorkspaces[*].url">.status.virtualWorkspaces[*].url&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>URL is the URL of the syncer virtual workspace.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div></description></item><item><title>Docs: Workspace CRD schema reference (group tenancy.kcp.dev)</title><link>http://kcp-dev.github.io/docs/kcp-core/crd-reference/workspaces.tenancy.kcp.dev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kcp-dev.github.io/docs/kcp-core/crd-reference/workspaces.tenancy.kcp.dev/</guid><description>
&lt;h2 id="workspace">Workspace&lt;/h2>
&lt;dl class="crd-meta">
&lt;dt class="fullname">Full name:&lt;/dt>
&lt;dd class="fullname">workspaces.tenancy.kcp.dev&lt;/dd>
&lt;dt class="groupname">Group:&lt;/dt>
&lt;dd class="groupname">tenancy.kcp.dev&lt;/dd>
&lt;dt class="singularname">Singular name:&lt;/dt>
&lt;dd class="singularname">workspace&lt;/dd>
&lt;dt class="pluralname">Plural name:&lt;/dt>
&lt;dd class="pluralname">workspaces&lt;/dd>
&lt;dt class="scope">Scope:&lt;/dt>
&lt;dd class="scope">Cluster&lt;/dd>
&lt;dt class="versions">Versions:&lt;/dt>
&lt;dd class="versions">&lt;a class="version" href="#v1beta1" title="Show schema for version v1beta1">v1beta1&lt;/a>&lt;/dd>
&lt;/dl>
&lt;div class="crd-schema-version">
&lt;h2 id="v1beta1">Version v1beta1&lt;/h2>
&lt;h3 id="property-details-v1beta1">Properties&lt;/h3>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1beta1-.apiVersion">.apiVersion&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: &lt;a href="https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources">https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources&lt;/a>&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1beta1-.kind">.kind&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: &lt;a href="https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds">https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds&lt;/a>&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1beta1-.metadata">.metadata&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1beta1-.metadata.name">.metadata.name&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1beta1-.spec">.spec&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>WorkspaceSpec holds the desired state of the ClusterWorkspace.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1beta1-.spec.type">.spec.type&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>type defines properties of the workspace both on creation (e.g. initial resources and initially installed APIs) and during runtime (e.g. permissions). If no type is provided, the default type for the workspace in which this workspace is nesting will be used.
The type is a reference to a ClusterWorkspaceType in the listed workspace, but lower-cased. The ClusterWorkspaceType existence is validated at admission during creation. The type is immutable after creation. The use of a type is gated via the RBAC clusterworkspacetypes/use resource permission.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1beta1-.spec.type.name">.spec.type.name&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>name is the name of the ClusterWorkspaceType&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1beta1-.spec.type.path">.spec.type.path&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>path is an absolute reference to the workspace that owns this type, e.g. root:org:ws.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-0">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1beta1-.status">.status&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>WorkspaceStatus communicates the observed state of the Workspace.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1beta1-.status.URL">.status.URL&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>url is the address under which the Kubernetes-cluster-like endpoint can be found. This URL can be used to access the workspace with standard Kubernetes client libraries and command line tools.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1beta1-.status.conditions">.status.conditions&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Current processing state of the ClusterWorkspace.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1beta1-.status.conditions[*]">.status.conditions[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">object&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Condition defines an observation of a object operational state.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1beta1-.status.conditions[*].lastTransitionTime">.status.conditions[*].lastTransitionTime&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1beta1-.status.conditions[*].message">.status.conditions[*].message&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>A human readable message indicating details about the transition. This field may be empty.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1beta1-.status.conditions[*].reason">.status.conditions[*].reason&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>The reason for the condition&amp;rsquo;s last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1beta1-.status.conditions[*].severity">.status.conditions[*].severity&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1beta1-.status.conditions[*].status">.status.conditions[*].status&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Status of the condition, one of True, False, Unknown.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-3">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1beta1-.status.conditions[*].type">.status.conditions[*].type&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;span class="property-required">Required&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1beta1-.status.initializers">.status.initializers&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">array&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>initializers are set on creation by the system and must be cleared by a controller before the workspace can be used. The workspace will stay in the phase &amp;ldquo;Initializing&amp;rdquo; state until all initializers are cleared.
A cluster workspace in &amp;ldquo;Initializing&amp;rdquo; state are gated via the RBAC clusterworkspaces/initialize resource permission.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-2">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1beta1-.status.initializers[*]">.status.initializers[*]&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>ClusterWorkspaceInitializer is a unique string corresponding to a cluster workspace initialization controller for the given type of workspaces.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="property depth-1">
&lt;div class="property-header">
&lt;h3 class="property-path" id="v1beta1-.status.phase">.status.phase&lt;/h3>
&lt;/div>
&lt;div class="property-body">
&lt;div class="property-meta">
&lt;span class="property-type">string&lt;/span>
&lt;/div>
&lt;div class="property-description">
&lt;p>Phase of the workspace (Initializing / Active / Terminating). This field is ALPHA.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div></description></item><item><title>Docs:</title><link>http://kcp-dev.github.io/docs/kcp-core/concepts/kubectl-kcp-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kcp-dev.github.io/docs/kcp-core/concepts/kubectl-kcp-plugin/</guid><description>
&lt;h1 id="kubectl-kcp-plugin">Kubectl kcp plugin&lt;/h1>
&lt;p>kcp provides a kubectl plugin that simplifies the operations with the kcp server.&lt;/p>
&lt;p>You can install the plugin from the current repo:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ make install
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>go install ./cmd/...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The plugin will be &lt;a href="">automatically discovered by your current &lt;code>kubectl&lt;/code> binary&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ kubectl-kcp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>KCP is the easiest way to manage Kubernetes applications against one or more clusters, by giving you a personal control plane that schedules your workloads onto one or many clusters, and making it simple to pick up and move. Advanced use cases including spreading your apps across clusters &lt;span style="color:#66d9ef">for&lt;/span> resiliency, scheduling batch workloads onto clusters with free capacity, and enabling collaboration &lt;span style="color:#66d9ef">for&lt;/span> individual teams without having access to the underlying clusters.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>This command provides KCP specific sub-command &lt;span style="color:#66d9ef">for&lt;/span> kubectl.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Usage:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kcp &lt;span style="color:#f92672">[&lt;/span>command&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Available Commands:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> completion generate the autocompletion script &lt;span style="color:#66d9ef">for&lt;/span> the specified shell
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> help Help about any command
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> workspace Manages KCP workspaces
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Flags:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --add_dir_header If true, adds the file directory to the header of the log messages
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --alsologtostderr log to standard error as well as files
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -h, --help help &lt;span style="color:#66d9ef">for&lt;/span> kcp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace &lt;span style="color:#f92672">(&lt;/span>default :0&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --log_dir string If non-empty, write log files in this directory
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --log_file string If non-empty, use this log file
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --log_file_max_size uint Defines the maximum size a log file can grow to. Unit is megabytes. If the value is 0, the maximum file size is unlimited. &lt;span style="color:#f92672">(&lt;/span>default 1800&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --logtostderr log to standard error instead of files &lt;span style="color:#f92672">(&lt;/span>default true&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --one_output If true, only write logs to their native severity level &lt;span style="color:#f92672">(&lt;/span>vs also writing to each lower severity level&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --skip_headers If true, avoid header prefixes in the log messages
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --skip_log_headers If true, avoid headers when opening log files
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --stderrthreshold severity logs at or above this threshold go to stderr &lt;span style="color:#f92672">(&lt;/span>default 2&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -v, --v Level number &lt;span style="color:#66d9ef">for&lt;/span> the log level verbosity
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --vmodule moduleSpec comma-separated list of pattern&lt;span style="color:#f92672">=&lt;/span>N settings &lt;span style="color:#66d9ef">for&lt;/span> file-filtered logging
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Use &lt;span style="color:#e6db74">&amp;#34;kcp [command] --help&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> more information about a command.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>