<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>kcp – a Kubernetes-like multi-tenant control plane – Developers</title><link>http://avinal.space/kcp-dev.github.io/docs/kcp-core/concepts/developers/</link><description>Recent content in Developers on kcp – a Kubernetes-like multi-tenant control plane</description><generator>Hugo -- gohugo.io</generator><atom:link href="http://avinal.space/kcp-dev.github.io/docs/kcp-core/concepts/developers/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Writing kcp-aware controllers</title><link>http://avinal.space/kcp-dev.github.io/docs/kcp-core/concepts/developers/controllers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://avinal.space/kcp-dev.github.io/docs/kcp-core/concepts/developers/controllers/</guid><description>
&lt;h2 id="keys-for-objects-in-listersindexers">Keys for objects in listers/indexers&lt;/h2>
&lt;p>When you need to get an object from a kcp-aware lister or an indexer, you can&amp;rsquo;t just pass the object&amp;rsquo;s name to the
&lt;code>Get()&lt;/code> function, like you do with a typical controller targeting Kubernetes. Projects using kcp&amp;rsquo;s copy of client-go
are using a modified key function.&lt;/p>
&lt;p>Here are what keys look like for an object &lt;code>foo&lt;/code> for both cluster-scoped and namespace-scoped varieties:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Organization&lt;/th>
&lt;th>Workspace&lt;/th>
&lt;th>Logical Cluster&lt;/th>
&lt;th>Namespace&lt;/th>
&lt;th>Key&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>root&lt;/td>
&lt;td>-&lt;/td>
&lt;td>root&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>root&lt;/td>
&lt;td>default&lt;/td>
&lt;td>default/root&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>root&lt;/td>
&lt;td>my-org&lt;/td>
&lt;td>root:my-org&lt;/td>
&lt;td>-&lt;/td>
&lt;td>root:my-org&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>root&lt;/td>
&lt;td>my-org&lt;/td>
&lt;td>root:my-org&lt;/td>
&lt;td>default&lt;/td>
&lt;td>default/root:my-org&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>my-org&lt;/td>
&lt;td>my-workspace&lt;/td>
&lt;td>my-org:my-workspace&lt;/td>
&lt;td>-&lt;/td>
&lt;td>my-org:my-workspace&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>my-org&lt;/td>
&lt;td>my-workspace&lt;/td>
&lt;td>my-org:my-workspace&lt;/td>
&lt;td>default&lt;/td>
&lt;td>default/my-org:my-workspace&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="encodingdecoding-keys">Encoding/decoding keys&lt;/h2>
&lt;h3 id="encoding-workspace-keys">Encoding workspace keys&lt;/h3>
&lt;p>To encode a key &lt;strong>for a workspace&lt;/strong>, use &lt;code>helper.WorkspaceKey(org, ws)&lt;/code>. Valid values for &lt;code>org&lt;/code> are &lt;code>root&lt;/code> and any
organization workspace name (e.g. &lt;code>my-org&lt;/code> from above).&lt;/p>
&lt;h3 id="encoding-all-other-keys">Encoding all other keys&lt;/h3>
&lt;p>To encode a key for anything else, use &lt;code>clusters.ToClusterAwareKey(clusterName, name)&lt;/code>. If your object is namespace-scoped,
you&amp;rsquo;ll need to do &lt;code>ns + &amp;quot;/&amp;quot; + clusters.ToClusterAwareKey(clusterName, name)&lt;/code>.&lt;/p>
&lt;h3 id="decoding-keys">Decoding keys&lt;/h3>
&lt;p>To decode a key, use &lt;code>clusters.SplitClusterAwareKey(key)&lt;/code>.&lt;/p>
&lt;p>To decode a key for a cluster-scoped object, use it directly. To decode a key for a namespace-scoped object, do this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">namespace&lt;/span>, &lt;span style="color:#a6e22e">clusterNameAndName&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">cache&lt;/span>.&lt;span style="color:#a6e22e">SplitMetaNamespaceKey&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// handle error
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">clusterName&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">clusters&lt;/span>.&lt;span style="color:#a6e22e">SplitClusterAwareKey&lt;/span>(&lt;span style="color:#a6e22e">clusterNameAndName&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Using `kcp` as a library</title><link>http://avinal.space/kcp-dev.github.io/docs/kcp-core/concepts/developers/library-usage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://avinal.space/kcp-dev.github.io/docs/kcp-core/concepts/developers/library-usage/</guid><description>
&lt;p>Instead of running the kcp as a binary using &lt;code>go run&lt;/code>, you can include the kcp api-server in your own projects. To create and start the api-server with the default options (including an embedded etcd server):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">options&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">serveroptions&lt;/span>.&lt;span style="color:#a6e22e">NewOptions&lt;/span>().&lt;span style="color:#a6e22e">Complete&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">srv&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">server&lt;/span>.&lt;span style="color:#a6e22e">NewServer&lt;/span>(&lt;span style="color:#a6e22e">options&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Run() will block until the apiserver stops or an error occurs.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">srv&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You may also configure post-start hooks which are useful if you need to start a some process that depends on a connection to the newly created api-server such as a controller manager.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Create a new api-server with default options
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">options&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">serveroptions&lt;/span>.&lt;span style="color:#a6e22e">NewOptions&lt;/span>().&lt;span style="color:#a6e22e">Complete&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">srv&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">server&lt;/span>.&lt;span style="color:#a6e22e">NewServer&lt;/span>(&lt;span style="color:#a6e22e">options&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Register a post-start hook that connects to the api-server
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">srv&lt;/span>.&lt;span style="color:#a6e22e">AddPostStartHook&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;connect-to-api&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">genericapiserver&lt;/span>.&lt;span style="color:#a6e22e">PostStartHookContext&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Create a new client using the client config from our newly created api-server
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">client&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">clientset&lt;/span>.&lt;span style="color:#a6e22e">NewForConfigOrDie&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>.&lt;span style="color:#a6e22e">LoopbackClientConfig&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">client&lt;/span>.&lt;span style="color:#a6e22e">Discovery&lt;/span>().&lt;span style="color:#a6e22e">ServerGroups&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Start the api-server
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">srv&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Publishing a new kcp release</title><link>http://avinal.space/kcp-dev.github.io/docs/kcp-core/concepts/developers/releasing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://avinal.space/kcp-dev.github.io/docs/kcp-core/concepts/developers/releasing/</guid><description>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
&lt;p>You currently need write access to the &lt;a href="">kcp-dev/kcp&lt;/a> repository to perform these tasks.&lt;/p>
&lt;p>You also need an available team member with approval permissions from &lt;a href="">https://github.com/openshift/release/blob/master/ci-operator/config/kcp-dev/kcp/OWNERS&lt;/a>.&lt;/p>
&lt;/div>
&lt;h2 id="create-git-tags">Create git tags&lt;/h2>
&lt;h3 id="prerequisite---make-sure-you-have-a-gpg-signing-key">Prerequisite - make sure you have a GPG signing key&lt;/h3>
&lt;ol>
&lt;li>&lt;a href="">https://docs.github.com/en/authentication/managing-commit-signature-verification/generating-a-new-gpg-key&lt;/a>&lt;/li>
&lt;li>&lt;a href="">https://docs.github.com/en/authentication/managing-commit-signature-verification/adding-a-gpg-key-to-your-github-account&lt;/a>&lt;/li>
&lt;li>&lt;a href="">https://docs.github.com/en/authentication/managing-commit-signature-verification/telling-git-about-your-signing-key&lt;/a>&lt;/li>
&lt;/ol>
&lt;h3 id="create-the-tags">Create the tags&lt;/h3>
&lt;p>kcp has 2 go modules, and a unique tag is needed for each module every time we create a new release.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>git fetch&lt;/code> from the main kcp repository (kcp-dev/kcp) to ensure you have the latest commits&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Tag the main module&lt;/p>
&lt;ol>
&lt;li>If your git remote for kcp-dev/kcp is named something other than &lt;code>upstream&lt;/code>, change &lt;code>REF&lt;/code> accordingly&lt;/li>
&lt;li>If you are creating a release from a release branch, change &lt;code>main&lt;/code> in &lt;code>REF&lt;/code> accordingly, or you can
make &lt;code>REF&lt;/code> a commit hash.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>REF&lt;span style="color:#f92672">=&lt;/span>upstream/main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TAG&lt;span style="color:#f92672">=&lt;/span>v1.2.3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git tag --sign --message &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$TAG&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$TAG&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$REF&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Tag the &lt;code>pkg/apis&lt;/code> module, following the same logic as above for &lt;code>REF&lt;/code> and &lt;code>TAG&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>REF&lt;span style="color:#f92672">=&lt;/span>upstream/main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TAG&lt;span style="color:#f92672">=&lt;/span>v1.2.3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git tag --sign --message &lt;span style="color:#e6db74">&amp;#34;pkg/apis/&lt;/span>$TAG&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;pkg/apis/&lt;/span>$TAG&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$REF&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h3 id="push-the-tags">Push the tags&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>REMOTE&lt;span style="color:#f92672">=&lt;/span>upstream
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TAG&lt;span style="color:#f92672">=&lt;/span>v1.2.3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git push &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$REMOTE&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$TAG&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;pkg/apis/&lt;/span>$TAG&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="if-its-a-new-minor-version">If it&amp;rsquo;s a new minor version&lt;/h2>
&lt;p>If this is the first release of a new minor version (e.g. the last release was v0.7.x, and you are releasing the first
0.8.x version), follow the following steps.&lt;/p>
&lt;p>Otherwise, you can skip to &lt;a href="">Review/edit/publish the release in GitHub&lt;/a>&lt;/p>
&lt;h3 id="create-a-release-branch">Create a release branch&lt;/h3>
&lt;p>Set &lt;code>REMOTE&lt;/code>, &lt;code>REF&lt;/code>, and &lt;code>VERSION&lt;/code> as appropriate.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>REMOTE&lt;span style="color:#f92672">=&lt;/span>upstream
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>REF&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>$REMOTE&lt;span style="color:#e6db74">/main&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>VERSION&lt;span style="color:#f92672">=&lt;/span>1.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git checkout -b &lt;span style="color:#e6db74">&amp;#34;release-&lt;/span>$VERSION&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$REF&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git push &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$REMOTE&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;release-&lt;/span>$VERSION&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="configure-prow-for-the-new-release-branch">Configure prow for the new release branch&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>Make sure you have &lt;a href="">openshift/release&lt;/a> cloned&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Create a new branch&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Copy &lt;code>ci-operator/config/kcp-dev/kcp/kcp-dev-kcp-main.yaml&lt;/code> to &lt;code>ci-operator/config/kcp-dev/kcp/kcp-dev-kcp-release-&amp;lt;version&amp;gt;.yaml&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Edit the new file&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Change &lt;code>main&lt;/code> to the name of the release branch, such as &lt;code>release-0.8&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">zz_generated_metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">branch&lt;/span>: &lt;span style="color:#ae81ff">main&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Change &lt;code>latest&lt;/code> to the name of the release branch&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">promotion&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">namespace&lt;/span>: &lt;span style="color:#ae81ff">kcp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tag&lt;/span>: &lt;span style="color:#ae81ff">latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tag_by_commit&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Edit &lt;code>core-services/prow/02_config/kcp-dev/kcp/_prowconfig.yaml&lt;/code>&lt;/p>
&lt;ol>
&lt;li>Copy the &lt;code>main&lt;/code> branch configuration to a new &lt;code>release-x.y&lt;/code> entry&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Run &lt;code>make update&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Add the new/updated files and commit your changes&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Push your branch to your fork&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Open a pull request&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Wait for it to be reviewed and merged&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="update-testgrid">Update testgrid&lt;/h3>
&lt;ol>
&lt;li>Make sure you have a clone of &lt;a href="">kubernetes/test-infra&lt;/a>&lt;/li>
&lt;li>Edit config/testgrids/kcp/kcp.yaml
&lt;ol>
&lt;li>In the &lt;code>test_groups&lt;/code> section:
&lt;ol>
&lt;li>Copy all the entries under &lt;code># main&lt;/code> to the bottom of the map&lt;/li>
&lt;li>Rename &lt;code>-main-&lt;/code> to &lt;code>-release-&amp;lt;version&amp;gt;-&lt;/code>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>In the &lt;code>dashboard_groups&lt;/code> section:
&lt;ol>
&lt;li>Add a new entry under &lt;code>dashboard_names&lt;/code> for &lt;code>kcp-release-&amp;lt;version&amp;gt;&lt;/code>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>In the &lt;code>dashboards&lt;/code> section:
&lt;ol>
&lt;li>Copy the &lt;code>kcp-main&lt;/code> entry, including &lt;code>dashboard_tab&lt;/code> and all its entries, to a new entry called &lt;code>kcp-release-&amp;lt;version&amp;gt;&lt;/code>&lt;/li>
&lt;li>Rename &lt;code>main&lt;/code> to &lt;code>release-&amp;lt;version&amp;gt;&lt;/code> in the new entry&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Commit your changes&lt;/li>
&lt;li>Push your branch to your fork&lt;/li>
&lt;li>Open a pull request&lt;/li>
&lt;li>Wait for it to be reviewed and merged&lt;/li>
&lt;/ol>
&lt;h2 id="revieweditpublish-the-release-in-github">Review/edit/publish the release in GitHub&lt;/h2>
&lt;p>The &lt;a href="">goreleaser&lt;/a> workflow automatically creates a draft GitHub release for each tag.&lt;/p>
&lt;ol>
&lt;li>Navigate to the draft release for the tag you just pushed. You&amp;rsquo;ll be able to find it under the &lt;a href="">releases&lt;/a> page.&lt;/li>
&lt;li>If the release notes have been pre-populated, delete them.&lt;/li>
&lt;li>For the &amp;ldquo;previous tag,&amp;rdquo; select the most recent, appropriate tag as the starting point
&lt;ol>
&lt;li>If this is a new minor release (e.g. v0.8.0), select the initial version of the previous minor release (e.g. v0.7.0)&lt;/li>
&lt;li>If this is a patch release (e.g. v0.8.7), select the previous patch release (e.g. v0.8.6)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Click &amp;ldquo;Generate release notes&amp;rdquo;&lt;/li>
&lt;li>Publish the release&lt;/li>
&lt;/ol>
&lt;h2 id="notify">Notify&lt;/h2>
&lt;ol>
&lt;li>Create an email addressed to &lt;a href="">kcp-dev@googlegroups.com&lt;/a> and &lt;a href="">kcp-users@googlegroups.com&lt;/a>
&lt;ol>
&lt;li>Subject: &lt;code>[release] &amp;lt;version&amp;gt;&lt;/code> e.g. &lt;code>[release] v0.8.0&lt;/code>&lt;/li>
&lt;li>In the body, include noteworthy changes&lt;/li>
&lt;li>Provide a link to the release in GitHub for the full release notes&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Post a message in the &lt;a href="">#kcp-dev&lt;/a> Slack channel&lt;/li>
&lt;/ol></description></item></channel></rss>